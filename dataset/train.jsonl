{"image": "images/000000.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 4, 5, 7]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(3 × 4) + (5 + 7)", "system": "{'numbers': [3, 4, 5, 7]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000001.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 7, 8, 8]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "3 × (7 + (8 ÷ 8))", "system": "{'numbers': [3, 7, 8, 8]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000002.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 1, 3, 4]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 + 1) × (3 × 4)", "system": "{'numbers': [1, 1, 3, 4]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000003.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 3, 8, 9]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 ÷ 3) × (8 × 9)", "system": "{'numbers': [1, 3, 8, 9]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000004.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [2, 6, 6, 6]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(2 × 6) + (6 + 6)", "system": "{'numbers': [2, 6, 6, 6]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000005.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [2, 8, 9, 9]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(2 + (9 ÷ 9)) × 8", "system": "{'numbers': [2, 8, 9, 9]}", "category": "24Points", "metadata": {"difficulty": 1, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000006.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 4, 5, 5]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "4 - (1 - 5) × 5", "system": "{'numbers': [1, 4, 5, 5]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000007.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [2, 4, 5, 10]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(2 × 5) + (4 + 10)", "system": "{'numbers': [2, 4, 5, 10]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000008.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [4, 7, 10, 11]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "4 × (7 + (10 - 11))", "system": "{'numbers': [4, 7, 10, 11]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000009.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 5, 10, 12]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 ÷ 5) × (10 × 12)", "system": "{'numbers': [1, 5, 10, 12]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000010.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 3, 4, 9]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 + (3 × 9)) - 4", "system": "{'numbers': [1, 3, 4, 9]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000011.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 3, 4, 5]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 + 3) + (4 × 5)", "system": "{'numbers': [1, 3, 4, 5]}", "category": "24Points", "metadata": {"difficulty": 2, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000012.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [6, 10, 11, 18]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "6 - (10 - 11) × 18", "system": "{'numbers': [6, 10, 11, 18]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000013.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [2, 9, 17, 18]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(17 - (2 + 9)) + 18", "system": "{'numbers': [2, 9, 17, 18]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000014.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 4, 12, 18]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 + (4 ÷ 12)) × 18", "system": "{'numbers': [1, 4, 12, 18]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000015.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [7, 8, 13, 19]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(7 × 8) - (13 + 19)", "system": "{'numbers': [7, 8, 13, 19]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000016.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [8, 10, 14, 19]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(10 - 8) × 19 - 14", "system": "{'numbers': [8, 10, 14, 19]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000017.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 4, 16, 18]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(3 × 4) × (18 - 16)", "system": "{'numbers': [3, 4, 16, 18]}", "category": "24Points", "metadata": {"difficulty": 3, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000018.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [4, 14, 15, 20]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(4 + 14) ÷ 15 × 20", "system": "{'numbers': [4, 14, 15, 20]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000019.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [1, 5, 10, 18]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(1 - 5) + (10 + 18)", "system": "{'numbers': [1, 5, 10, 18]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000020.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [6, 10, 11, 19]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(6 + (10 - 11)) + 19", "system": "{'numbers': [6, 10, 11, 19]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000021.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [2, 12, 15, 19]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(2 - 12) + (15 + 19)", "system": "{'numbers': [2, 12, 15, 19]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000022.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 7, 11, 12]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "3 × (7 - 11 + 12)", "system": "{'numbers': [3, 7, 11, 12]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000023.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [4, 9, 11, 16]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(4 × (11 - 9)) + 16", "system": "{'numbers': [4, 9, 11, 16]}", "category": "24Points", "metadata": {"difficulty": 4, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000024.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 5, 7, 23]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(3 + (5 - 7)) + 23", "system": "{'numbers': [3, 5, 7, 23]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000025.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [6, 8, 23, 25]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(6 × 8) ÷ (25 - 23)", "system": "{'numbers': [6, 8, 23, 25]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000026.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 5, 7, 21]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(3 + 5) ÷ 7 × 21", "system": "{'numbers': [3, 5, 7, 21]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000027.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [3, 8, 13, 23]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(3 × 13) + (8 - 23)", "system": "{'numbers': [3, 8, 13, 23]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000028.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [10, 14, 16, 17]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "10 - (14 × (16 - 17))", "system": "{'numbers': [10, 14, 16, 17]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000029.png", "question": "Use these numbers exactly once, and combine them with +, -, ×, ÷, and parentheses to make 24.\\nNumbers: [10, 12, 20, 22]\\nPlease provide your answer as an expression that includes only numbers, operators, and parentheses.\\nExample answer format: (9 - 3) × 8 ÷ 2.", "answer": "(10 + (12 - 20)) + 22", "system": "{'numbers': [10, 12, 20, 22]}", "category": "24Points", "metadata": {"difficulty": 5, "metric_info": "{'score_function': '24points_evaluator'}"}}
{"image": "images/000030.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3\\nRow 1: 4 5 9 6\\nRow 2: 7 8 9 6\\nRow 3: 10 10 11 11\\n\\nRow clues: [0, 2, 1, 4]\\nColumn clues: [2, 2, 1, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 1), (1, 1), (3, 2), (0, 3), (1, 3), (2, 3), (3, 3)]", "system": "{\"regions\": [[0, 1, 2, 3], [4, 5, 9, 6], [7, 8, 9, 6], [10, 10, 11, 11]], \"row_clues\": [0, 2, 1, 4], \"col_clues\": [2, 2, 1, 2], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000031.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3\\nRow 1: 4 5 6 7\\nRow 2: 8 9 10 7\\nRow 3: 11 11 12 12\\n\\nRow clues: [0, 2, 2, 2]\\nColumn clues: [2, 1, 1, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 1), (3, 1), (0, 2), (3, 2), (0, 3), (1, 3)]", "system": "{\"regions\": [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 7], [11, 11, 12, 12]], \"row_clues\": [0, 2, 2, 2], \"col_clues\": [2, 1, 1, 2], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000032.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 0 1\\nRow 1: 2 3 4 5\\nRow 2: 6 7 8 11\\nRow 3: 9 9 10 11\\n\\nRow clues: [0, 3, 1, 2]\\nColumn clues: [0, 2, 2, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(1, 1), (2, 1), (3, 1), (1, 2), (2, 3), (3, 3)]", "system": "{\"regions\": [[0, 0, 0, 1], [2, 3, 4, 5], [6, 7, 8, 11], [9, 9, 10, 11]], \"row_clues\": [0, 3, 1, 2], \"col_clues\": [0, 2, 2, 2], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000033.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2\\nRow 1: 3 4 5 6\\nRow 2: 9 4 7 8\\nRow 3: 9 10 11 12\\n\\nRow clues: [1, 0, 2, 2]\\nColumn clues: [2, 0, 2, 1]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 0), (0, 2), (3, 2), (0, 3), (2, 3)]", "system": "{\"regions\": [[0, 0, 1, 2], [3, 4, 5, 6], [9, 4, 7, 8], [9, 10, 11, 12]], \"row_clues\": [1, 0, 2, 2], \"col_clues\": [2, 0, 2, 1], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000034.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3\\nRow 1: 4 5 5 3\\nRow 2: 6 7 8 9\\nRow 3: 10 10 10 11\\n\\nRow clues: [1, 0, 2, 4]\\nColumn clues: [2, 2, 2, 1]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(1, 0), (0, 2), (2, 2), (0, 3), (1, 3), (2, 3), (3, 3)]", "system": "{\"regions\": [[0, 1, 2, 3], [4, 5, 5, 3], [6, 7, 8, 9], [10, 10, 10, 11]], \"row_clues\": [1, 0, 2, 4], \"col_clues\": [2, 2, 2, 1], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000035.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 2 0 0 1\\nRow 1: 2 3 4 5\\nRow 2: 6 6 7 8\\nRow 3: 9 10 11 12\\n\\nRow clues: [1, 2, 4, 2]\\nColumn clues: [4, 2, 1, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 0), (0, 1), (3, 1), (0, 2), (1, 2), (2, 2), (3, 2), (0, 3), (1, 3)]", "system": "{\"regions\": [[2, 0, 0, 1], [2, 3, 4, 5], [6, 6, 7, 8], [9, 10, 11, 12]], \"row_clues\": [1, 2, 4, 2], \"col_clues\": [4, 2, 1, 2], \"grid_size\": [4, 4]}", "category": "aquarium", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000036.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 4\\nRow 1: 5 6 7 7 8\\nRow 2: 9 10 13 13 11\\nRow 3: 15 15 12 13 14\\nRow 4: 15 16 16 17 18\\n\\nRow clues: [3, 3, 0, 1, 4]\\nColumn clues: [1, 2, 3, 3, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 0), (3, 0), (4, 0), (1, 1), (2, 1), (3, 1), (2, 3), (1, 4), (2, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[0, 1, 2, 3, 4], [5, 6, 7, 7, 8], [9, 10, 13, 13, 11], [15, 15, 12, 13, 14], [15, 16, 16, 17, 18]], \"row_clues\": [3, 3, 0, 1, 4], \"col_clues\": [1, 2, 3, 3, 2], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000037.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 3\\nRow 1: 0 4 5 6 6\\nRow 2: 7 8 9 10 11\\nRow 3: 12 13 14 15 15\\nRow 4: 16 17 17 17 17\\n\\nRow clues: [0, 2, 3, 4, 5]\\nColumn clues: [3, 2, 3, 3, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 1), (2, 1), (1, 2), (3, 2), (4, 2), (0, 3), (2, 3), (3, 3), (4, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[0, 1, 2, 3, 3], [0, 4, 5, 6, 6], [7, 8, 9, 10, 11], [12, 13, 14, 15, 15], [16, 17, 17, 17, 17]], \"row_clues\": [0, 2, 3, 4, 5], \"col_clues\": [3, 2, 3, 3, 3], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000038.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 2 3\\nRow 1: 7 4 5 6 3\\nRow 2: 7 7 5 8 9\\nRow 3: 10 11 12 13 14\\nRow 4: 15 16 17 17 17\\n\\nRow clues: [0, 1, 3, 4, 5]\\nColumn clues: [3, 3, 3, 2, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 1), (0, 2), (1, 2), (2, 2), (1, 3), (2, 3), (3, 3), (4, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[0, 1, 2, 2, 3], [7, 4, 5, 6, 3], [7, 7, 5, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 17, 17]], \"row_clues\": [0, 1, 3, 4, 5], \"col_clues\": [3, 3, 3, 2, 2], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000039.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 4\\nRow 1: 5 5 6 6 7\\nRow 2: 8 9 10 6 11\\nRow 3: 12 13 14 15 15\\nRow 4: 16 16 17 15 15\\n\\nRow clues: [0, 2, 3, 2, 4]\\nColumn clues: [2, 2, 2, 3, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 1), (3, 1), (2, 2), (3, 2), (4, 2), (0, 3), (1, 3), (0, 4), (1, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[0, 1, 2, 3, 4], [5, 5, 6, 6, 7], [8, 9, 10, 6, 11], [12, 13, 14, 15, 15], [16, 16, 17, 15, 15]], \"row_clues\": [0, 2, 3, 2, 4], \"col_clues\": [2, 2, 2, 3, 2], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000040.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 3 0 0 1 2\\nRow 1: 3 4 5 5 6\\nRow 2: 7 11 11 8 9\\nRow 3: 10 14 11 12 17\\nRow 4: 13 14 15 16 17\\n\\nRow clues: [0, 0, 4, 2, 5]\\nColumn clues: [2, 3, 3, 2, 1]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 2), (1, 2), (2, 2), (3, 2), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[3, 0, 0, 1, 2], [3, 4, 5, 5, 6], [7, 11, 11, 8, 9], [10, 14, 11, 12, 17], [13, 14, 15, 16, 17]], \"row_clues\": [0, 0, 4, 2, 5], \"col_clues\": [2, 3, 3, 2, 1], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000041.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 5 1 2 3\\nRow 1: 4 5 5 3 3\\nRow 2: 6 7 5 8 9\\nRow 3: 13 10 5 11 12\\nRow 4: 13 14 15 16 17\\n\\nRow clues: [0, 1, 1, 2, 4]\\nColumn clues: [2, 1, 2, 1, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 1), (1, 2), (2, 3), (4, 3), (0, 4), (2, 4), (3, 4), (4, 4)]", "system": "{\"regions\": [[0, 5, 1, 2, 3], [4, 5, 5, 3, 3], [6, 7, 5, 8, 9], [13, 10, 5, 11, 12], [13, 14, 15, 16, 17]], \"row_clues\": [0, 1, 1, 2, 4], \"col_clues\": [2, 1, 2, 1, 2], \"grid_size\": [5, 5]}", "category": "aquarium", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000042.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 2 3 4\\nRow 1: 5 9 6 7 11 8\\nRow 2: 9 9 6 10 11 12\\nRow 3: 13 14 14 15 16 16\\nRow 4: 17 20 18 19 16 16\\nRow 5: 20 20 21 21 16 16\\n\\nRow clues: [0, 2, 5, 2, 5, 4]\\nColumn clues: [3, 2, 3, 2, 4, 4]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 1), (3, 1), (0, 2), (1, 2), (2, 2), (4, 2), (5, 2), (4, 3), (5, 3), (0, 4), (2, 4), (3, 4), (4, 4), (5, 4), (0, 5), (1, 5), (4, 5), (5, 5)]", "system": "{\"regions\": [[0, 1, 2, 2, 3, 4], [5, 9, 6, 7, 11, 8], [9, 9, 6, 10, 11, 12], [13, 14, 14, 15, 16, 16], [17, 20, 18, 19, 16, 16], [20, 20, 21, 21, 16, 16]], \"row_clues\": [0, 2, 5, 2, 5, 4], \"col_clues\": [3, 2, 3, 2, 4, 4], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000043.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 3 4\\nRow 1: 5 1 6 11 7 8\\nRow 2: 9 10 10 11 12 12\\nRow 3: 13 13 17 14 15 19\\nRow 4: 16 20 17 18 18 19\\nRow 5: 20 20 21 22 23 23\\n\\nRow clues: [1, 2, 2, 3, 4, 6]\\nColumn clues: [2, 4, 4, 3, 4, 1]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(1, 0), (1, 1), (4, 1), (1, 2), (2, 2), (2, 3), (3, 3), (4, 3), (0, 4), (2, 4), (3, 4), (4, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5)]", "system": "{\"regions\": [[0, 1, 2, 3, 3, 4], [5, 1, 6, 11, 7, 8], [9, 10, 10, 11, 12, 12], [13, 13, 17, 14, 15, 19], [16, 20, 17, 18, 18, 19], [20, 20, 21, 22, 23, 23]], \"row_clues\": [1, 2, 2, 3, 4, 6], \"col_clues\": [2, 4, 4, 3, 4, 1], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000044.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 7 0 1 1 2 3\\nRow 1: 7 7 8 4 5 6\\nRow 2: 7 7 8 9 10 15\\nRow 3: 11 12 13 14 18 15\\nRow 4: 16 19 17 17 18 18\\nRow 5: 19 19 20 21 18 18\\n\\nRow clues: [1, 1, 1, 3, 3, 6]\\nColumn clues: [2, 1, 2, 1, 6, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(4, 0), (4, 1), (4, 2), (2, 3), (4, 3), (5, 3), (0, 4), (4, 4), (5, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5)]", "system": "{\"regions\": [[7, 0, 1, 1, 2, 3], [7, 7, 8, 4, 5, 6], [7, 7, 8, 9, 10, 15], [11, 12, 13, 14, 18, 15], [16, 19, 17, 17, 18, 18], [19, 19, 20, 21, 18, 18]], \"row_clues\": [1, 1, 1, 3, 3, 6], \"col_clues\": [2, 1, 2, 1, 6, 3], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000045.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2 3 3\\nRow 1: 0 4 5 5 6 7\\nRow 2: 8 9 9 10 10 18\\nRow 3: 11 11 12 13 13 18\\nRow 4: 19 14 15 16 17 18\\nRow 5: 19 19 20 21 22 22\\n\\nRow clues: [0, 2, 1, 2, 5, 6]\\nColumn clues: [5, 3, 2, 2, 3, 1]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 1), (4, 1), (0, 2), (0, 3), (1, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5)]", "system": "{\"regions\": [[0, 0, 1, 2, 3, 3], [0, 4, 5, 5, 6, 7], [8, 9, 9, 10, 10, 18], [11, 11, 12, 13, 13, 18], [19, 14, 15, 16, 17, 18], [19, 19, 20, 21, 22, 22]], \"row_clues\": [0, 2, 1, 2, 5, 6], \"col_clues\": [5, 3, 2, 2, 3, 1], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000046.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 2 3 4\\nRow 1: 5 6 7 11 3 3\\nRow 2: 8 9 10 11 3 3\\nRow 3: 12 13 11 11 14 14\\nRow 4: 15 16 17 18 18 22\\nRow 5: 19 20 20 21 22 22\\n\\nRow clues: [1, 2, 3, 5, 1, 4]\\nColumn clues: [2, 2, 3, 3, 3, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 0), (4, 1), (5, 1), (3, 2), (4, 2), (5, 2), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (2, 4), (0, 5), (1, 5), (2, 5), (3, 5)]", "system": "{\"regions\": [[0, 1, 2, 2, 3, 4], [5, 6, 7, 11, 3, 3], [8, 9, 10, 11, 3, 3], [12, 13, 11, 11, 14, 14], [15, 16, 17, 18, 18, 22], [19, 20, 20, 21, 22, 22]], \"row_clues\": [1, 2, 3, 5, 1, 4], \"col_clues\": [2, 2, 3, 3, 3, 3], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000047.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 3 2 2\\nRow 1: 6 3 3 3 4 5\\nRow 2: 6 12 12 7 8 9\\nRow 3: 10 11 12 7 13 14\\nRow 4: 15 16 16 22 17 18\\nRow 5: 19 20 21 22 23 18\\n\\nRow clues: [1, 3, 3, 3, 4, 4]\\nColumn clues: [2, 4, 5, 4, 1, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(3, 0), (1, 1), (2, 1), (3, 1), (1, 2), (2, 2), (5, 2), (1, 3), (2, 3), (5, 3), (0, 4), (1, 4), (2, 4), (3, 4), (0, 5), (2, 5), (3, 5), (4, 5)]", "system": "{\"regions\": [[0, 0, 1, 3, 2, 2], [6, 3, 3, 3, 4, 5], [6, 12, 12, 7, 8, 9], [10, 11, 12, 7, 13, 14], [15, 16, 16, 22, 17, 18], [19, 20, 21, 22, 23, 18]], \"row_clues\": [1, 3, 3, 3, 4, 4], \"col_clues\": [2, 4, 5, 4, 1, 2], \"grid_size\": [6, 6]}", "category": "aquarium", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000048.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2 3 3 4\\nRow 1: 0 5 5 9 6 7 7\\nRow 2: 17 17 8 9 15 10 11\\nRow 3: 17 12 13 14 15 10 16\\nRow 4: 17 17 17 18 19 20 21\\nRow 5: 22 23 24 25 25 26 27\\nRow 6: 28 28 29 25 30 31 32\\n\\nRow clues: [1, 4, 0, 3, 5, 3, 6]\\nColumn clues: [3, 5, 4, 2, 2, 4, 2]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 0), (1, 1), (2, 1), (5, 1), (6, 1), (1, 3), (3, 3), (4, 3), (0, 4), (1, 4), (2, 4), (3, 4), (5, 4), (0, 5), (1, 5), (5, 5), (0, 6), (1, 6), (2, 6), (4, 6), (5, 6), (6, 6)]", "system": "{\"regions\": [[0, 0, 1, 2, 3, 3, 4], [0, 5, 5, 9, 6, 7, 7], [17, 17, 8, 9, 15, 10, 11], [17, 12, 13, 14, 15, 10, 16], [17, 17, 17, 18, 19, 20, 21], [22, 23, 24, 25, 25, 26, 27], [28, 28, 29, 25, 30, 31, 32]], \"row_clues\": [1, 4, 0, 3, 5, 3, 6], \"col_clues\": [3, 5, 4, 2, 2, 4, 2], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000049.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2 3 3 3\\nRow 1: 4 5 6 6 3 3 3\\nRow 2: 7 6 6 8 13 3 3\\nRow 3: 9 10 11 12 13 14 3\\nRow 4: 15 16 16 16 21 17 18\\nRow 5: 19 20 16 16 21 27 22\\nRow 6: 23 24 25 26 27 27 22\\n\\nRow clues: [3, 6, 5, 4, 5, 5, 6]\\nColumn clues: [3, 5, 6, 4, 5, 7, 4]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(4, 0), (5, 0), (6, 0), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (1, 2), (2, 2), (4, 2), (5, 2), (6, 2), (2, 3), (4, 3), (5, 3), (6, 3), (0, 4), (1, 4), (2, 4), (3, 4), (5, 4), (0, 5), (1, 5), (2, 5), (3, 5), (5, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6)]", "system": "{\"regions\": [[0, 0, 1, 2, 3, 3, 3], [4, 5, 6, 6, 3, 3, 3], [7, 6, 6, 8, 13, 3, 3], [9, 10, 11, 12, 13, 14, 3], [15, 16, 16, 16, 21, 17, 18], [19, 20, 16, 16, 21, 27, 22], [23, 24, 25, 26, 27, 27, 22]], \"row_clues\": [3, 6, 5, 4, 5, 5, 6], \"col_clues\": [3, 5, 6, 4, 5, 7, 4], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000050.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 4 4 0 1 2 3 3\\nRow 1: 4 5 0 0 6 7 8\\nRow 2: 9 10 11 15 15 15 15\\nRow 3: 12 12 12 13 14 15 15\\nRow 4: 16 17 18 14 14 19 19\\nRow 5: 20 21 22 23 24 19 25\\nRow 6: 26 27 28 29 30 31 32\\n\\nRow clues: [1, 0, 4, 3, 3, 6, 5]\\nColumn clues: [3, 3, 2, 4, 3, 4, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(3, 0), (3, 2), (4, 2), (5, 2), (6, 2), (3, 3), (5, 3), (6, 3), (0, 4), (1, 4), (2, 4), (0, 5), (1, 5), (3, 5), (4, 5), (5, 5), (6, 5), (0, 6), (1, 6), (2, 6), (4, 6), (5, 6)]", "system": "{\"regions\": [[4, 4, 0, 1, 2, 3, 3], [4, 5, 0, 0, 6, 7, 8], [9, 10, 11, 15, 15, 15, 15], [12, 12, 12, 13, 14, 15, 15], [16, 17, 18, 14, 14, 19, 19], [20, 21, 22, 23, 24, 19, 25], [26, 27, 28, 29, 30, 31, 32]], \"row_clues\": [1, 0, 4, 3, 3, 6, 5], \"col_clues\": [3, 3, 2, 4, 3, 4, 3], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000051.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 6 2 3 4 5\\nRow 1: 0 9 6 2 7 12 12\\nRow 2: 8 9 10 11 12 12 13\\nRow 3: 17 14 15 15 19 19 16\\nRow 4: 17 17 18 15 26 19 16\\nRow 5: 17 17 18 20 26 21 22\\nRow 6: 23 23 24 25 26 27 27\\n\\nRow clues: [1, 1, 2, 3, 3, 4, 6]\\nColumn clues: [2, 2, 3, 1, 3, 4, 5]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(1, 0), (4, 1), (0, 2), (6, 2), (4, 3), (5, 3), (6, 3), (2, 4), (5, 4), (6, 4), (2, 5), (3, 5), (5, 5), (6, 5), (0, 6), (1, 6), (2, 6), (4, 6), (5, 6), (6, 6)]", "system": "{\"regions\": [[0, 1, 6, 2, 3, 4, 5], [0, 9, 6, 2, 7, 12, 12], [8, 9, 10, 11, 12, 12, 13], [17, 14, 15, 15, 19, 19, 16], [17, 17, 18, 15, 26, 19, 16], [17, 17, 18, 20, 26, 21, 22], [23, 23, 24, 25, 26, 27, 27]], \"row_clues\": [1, 1, 2, 3, 3, 4, 6], \"col_clues\": [2, 2, 3, 1, 3, 4, 5], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000052.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 3 8 4 4 4\\nRow 1: 2 2 3 8 4 4 4\\nRow 2: 5 6 7 8 9 10 4\\nRow 3: 11 11 12 13 14 15 21\\nRow 4: 16 17 18 18 19 20 21\\nRow 5: 25 22 26 23 24 24 28\\nRow 6: 25 25 26 23 27 28 28\\n\\nRow clues: [0, 3, 4, 3, 5, 3, 6]\\nColumn clues: [5, 4, 2, 3, 3, 3, 4]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(4, 1), (5, 1), (6, 1), (0, 2), (1, 2), (4, 2), (6, 2), (0, 3), (1, 3), (2, 3), (0, 4), (1, 4), (2, 4), (3, 4), (5, 4), (0, 5), (3, 5), (6, 5), (0, 6), (1, 6), (3, 6), (4, 6), (5, 6), (6, 6)]", "system": "{\"regions\": [[0, 1, 3, 8, 4, 4, 4], [2, 2, 3, 8, 4, 4, 4], [5, 6, 7, 8, 9, 10, 4], [11, 11, 12, 13, 14, 15, 21], [16, 17, 18, 18, 19, 20, 21], [25, 22, 26, 23, 24, 24, 28], [25, 25, 26, 23, 27, 28, 28]], \"row_clues\": [0, 3, 4, 3, 5, 3, 6], \"col_clues\": [5, 4, 2, 3, 3, 3, 4], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000053.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 4 5 6\\nRow 1: 0 0 7 8 9 10 11\\nRow 2: 12 13 14 15 15 15 18\\nRow 3: 19 16 14 17 17 17 18\\nRow 4: 19 16 20 25 21 21 22\\nRow 5: 23 16 24 25 26 21 32\\nRow 6: 27 28 29 30 31 32 32\\n\\nRow clues: [1, 1, 5, 1, 1, 6, 7]\\nColumn clues: [2, 2, 2, 5, 3, 3, 5]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(3, 0), (3, 1), (0, 2), (3, 2), (4, 2), (5, 2), (6, 2), (6, 3), (6, 4), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6)]", "system": "{\"regions\": [[0, 1, 2, 3, 4, 5, 6], [0, 0, 7, 8, 9, 10, 11], [12, 13, 14, 15, 15, 15, 18], [19, 16, 14, 17, 17, 17, 18], [19, 16, 20, 25, 21, 21, 22], [23, 16, 24, 25, 26, 21, 32], [27, 28, 29, 30, 31, 32, 32]], \"row_clues\": [1, 1, 5, 1, 1, 6, 7], \"col_clues\": [2, 2, 2, 5, 3, 3, 5], \"grid_size\": [7, 7]}", "category": "aquarium", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000054.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2 2 3 4 5\\nRow 1: 0 0 6 6 7 8 9 9\\nRow 2: 0 0 10 11 12 16 13 9\\nRow 3: 14 15 15 16 16 16 17 17\\nRow 4: 18 15 19 20 21 21 22 23\\nRow 5: 24 24 24 24 24 25 26 23\\nRow 6: 24 24 24 27 28 29 29 30\\nRow 7: 24 24 24 31 32 29 33 34\\n\\nRow clues: [0, 2, 2, 1, 4, 7, 8, 8]\\nColumn clues: [4, 3, 3, 4, 4, 4, 4, 6]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(6, 1), (7, 1), (3, 2), (7, 2), (0, 3), (4, 4), (5, 4), (6, 4), (7, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (7, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]", "system": "{\"regions\": [[0, 0, 1, 2, 2, 3, 4, 5], [0, 0, 6, 6, 7, 8, 9, 9], [0, 0, 10, 11, 12, 16, 13, 9], [14, 15, 15, 16, 16, 16, 17, 17], [18, 15, 19, 20, 21, 21, 22, 23], [24, 24, 24, 24, 24, 25, 26, 23], [24, 24, 24, 27, 28, 29, 29, 30], [24, 24, 24, 31, 32, 29, 33, 34]], \"row_clues\": [0, 2, 2, 1, 4, 7, 8, 8], \"col_clues\": [4, 3, 3, 4, 4, 4, 4, 6], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000055.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 2 2 8 3 4\\nRow 1: 0 5 6 7 11 8 8 8\\nRow 2: 9 9 6 10 11 12 21 21\\nRow 3: 19 13 14 15 16 17 21 18\\nRow 4: 19 20 20 16 16 16 21 22\\nRow 5: 23 24 25 26 27 16 28 29\\nRow 6: 30 31 32 33 34 34 34 37\\nRow 7: 35 36 36 34 34 37 37 37\\n\\nRow clues: [1, 1, 0, 3, 5, 7, 7, 5]\\nColumn clues: [4, 4, 2, 5, 4, 4, 3, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 0), (0, 1), (1, 3), (3, 3), (7, 3), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (0, 5), (1, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]", "system": "{\"regions\": [[0, 1, 2, 2, 2, 8, 3, 4], [0, 5, 6, 7, 11, 8, 8, 8], [9, 9, 6, 10, 11, 12, 21, 21], [19, 13, 14, 15, 16, 17, 21, 18], [19, 20, 20, 16, 16, 16, 21, 22], [23, 24, 25, 26, 27, 16, 28, 29], [30, 31, 32, 33, 34, 34, 34, 37], [35, 36, 36, 34, 34, 37, 37, 37]], \"row_clues\": [1, 1, 0, 3, 5, 7, 7, 5], \"col_clues\": [4, 4, 2, 5, 4, 4, 3, 3], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000056.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 2 3 4 5 6 7\\nRow 1: 0 0 10 8 9 7 7 7\\nRow 2: 10 10 10 10 11 12 13 13\\nRow 3: 14 14 15 16 16 17 18 18\\nRow 4: 14 14 14 19 20 21 18 18\\nRow 5: 22 23 24 25 26 31 27 18\\nRow 6: 33 28 29 29 30 31 32 18\\nRow 7: 33 33 33 34 35 36 37 37\\n\\nRow clues: [1, 2, 0, 5, 7, 8, 5, 8]\\nColumn clues: [5, 4, 4, 5, 4, 4, 5, 5]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(3, 0), (3, 1), (4, 1), (0, 3), (1, 3), (2, 3), (6, 3), (7, 3), (0, 4), (1, 4), (2, 4), (3, 4), (5, 4), (6, 4), (7, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (0, 6), (4, 6), (5, 6), (6, 6), (7, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]", "system": "{\"regions\": [[0, 1, 2, 3, 4, 5, 6, 7], [0, 0, 10, 8, 9, 7, 7, 7], [10, 10, 10, 10, 11, 12, 13, 13], [14, 14, 15, 16, 16, 17, 18, 18], [14, 14, 14, 19, 20, 21, 18, 18], [22, 23, 24, 25, 26, 31, 27, 18], [33, 28, 29, 29, 30, 31, 32, 18], [33, 33, 33, 34, 35, 36, 37, 37]], \"row_clues\": [1, 2, 0, 5, 7, 8, 5, 8], \"col_clues\": [5, 4, 4, 5, 4, 4, 5, 5], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000057.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 1 1 2 3 4 5 6\\nRow 1: 7 8 1 9 3 3 10 10\\nRow 2: 26 26 11 12 13 13 13 14\\nRow 3: 15 26 16 17 18 19 19 19\\nRow 4: 26 26 26 23 23 20 19 19\\nRow 5: 21 26 22 23 23 24 25 29\\nRow 6: 26 26 26 27 31 24 28 29\\nRow 7: 26 26 26 30 31 32 33 34\\n\\nRow clues: [1, 1, 5, 4, 6, 5, 8, 7]\\nColumn clues: [5, 4, 6, 2, 3, 6, 5, 6]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(0, 0), (3, 1), (2, 2), (4, 2), (5, 2), (6, 2), (7, 2), (2, 3), (5, 3), (6, 3), (7, 3), (0, 4), (1, 4), (2, 4), (5, 4), (6, 4), (7, 4), (0, 5), (1, 5), (2, 5), (5, 5), (7, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (0, 7), (1, 7), (2, 7), (4, 7), (5, 7), (6, 7), (7, 7)]", "system": "{\"regions\": [[0, 1, 1, 2, 3, 4, 5, 6], [7, 8, 1, 9, 3, 3, 10, 10], [26, 26, 11, 12, 13, 13, 13, 14], [15, 26, 16, 17, 18, 19, 19, 19], [26, 26, 26, 23, 23, 20, 19, 19], [21, 26, 22, 23, 23, 24, 25, 29], [26, 26, 26, 27, 31, 24, 28, 29], [26, 26, 26, 30, 31, 32, 33, 34]], \"row_clues\": [1, 1, 5, 4, 6, 5, 8, 7], \"col_clues\": [5, 4, 6, 2, 3, 6, 5, 6], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000058.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 7 7 0 1 5 5 5 5\\nRow 1: 7 7 2 3 4 10 5 6\\nRow 2: 7 7 8 9 4 10 10 10\\nRow 3: 11 15 16 16 18 12 13 20\\nRow 4: 14 15 16 17 18 18 19 20\\nRow 5: 26 21 22 17 23 24 25 20\\nRow 6: 26 31 31 27 32 28 28 29\\nRow 7: 30 31 31 32 32 32 33 34\\n\\nRow clues: [0, 4, 4, 2, 4, 6, 5, 4]\\nColumn clues: [3, 3, 2, 4, 4, 5, 3, 5]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(3, 1), (4, 1), (5, 1), (6, 1), (4, 2), (5, 2), (6, 2), (7, 2), (5, 3), (7, 3), (3, 4), (4, 4), (5, 4), (7, 4), (0, 5), (1, 5), (3, 5), (4, 5), (5, 5), (7, 5), (0, 6), (1, 6), (2, 6), (3, 6), (7, 6), (0, 7), (1, 7), (2, 7), (6, 7)]", "system": "{\"regions\": [[7, 7, 0, 1, 5, 5, 5, 5], [7, 7, 2, 3, 4, 10, 5, 6], [7, 7, 8, 9, 4, 10, 10, 10], [11, 15, 16, 16, 18, 12, 13, 20], [14, 15, 16, 17, 18, 18, 19, 20], [26, 21, 22, 17, 23, 24, 25, 20], [26, 31, 31, 27, 32, 28, 28, 29], [30, 31, 31, 32, 32, 32, 33, 34]], \"row_clues\": [0, 4, 4, 2, 4, 6, 5, 4], \"col_clues\": [3, 3, 2, 4, 4, 5, 3, 5], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000059.png", "question": "\\nThe grid is divided into multiple aquariums (regions). Your task is to determine which cells are filled with water based on the following rules:\\n\\n### Game Rules:\\n1. Each region must be filled to a uniform water level (from bottom up).\\n2. Water cannot float — if a cell is filled, the cell directly below it (if any, in same region) must also be filled.\\n3. The numbers outside the grid indicate how many cells are filled with water in each row and column.\\n4. Cells with the same number belong to the same region in the region layout representation.\\n\\n### Region layout:\\nRow 0: 0 0 1 2 3 4 5 5\\nRow 1: 6 13 1 7 7 8 5 5\\nRow 2: 13 13 9 10 11 12 12 12\\nRow 3: 13 14 15 16 17 18 19 20\\nRow 4: 13 21 29 29 22 22 23 20\\nRow 5: 24 24 29 29 29 29 25 25\\nRow 6: 26 27 29 29 28 29 29 30\\nRow 7: 31 32 29 29 33 34 35 35\\n\\nRow clues: [1, 2, 3, 3, 7, 8, 8, 8]\\nColumn clues: [6, 5, 8, 5, 4, 5, 4, 3]\\n\\n### Coordinate system: \\n(x, y) where (0, 0) is the top-left cell. x increases to the right, y increases downward.\\n\\nPlease list all the cells that are filled with water in the format:\\n[(x1, y1), (x2, y2), ...]\\n\\nExample:\\n[(0, 4), (1, 4), (1, 3), (2, 3)]\\n", "answer": "[(2, 0), (2, 1), (5, 1), (0, 2), (1, 2), (2, 2), (0, 3), (2, 3), (3, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (6, 4), (0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]", "system": "{\"regions\": [[0, 0, 1, 2, 3, 4, 5, 5], [6, 13, 1, 7, 7, 8, 5, 5], [13, 13, 9, 10, 11, 12, 12, 12], [13, 14, 15, 16, 17, 18, 19, 20], [13, 21, 29, 29, 22, 22, 23, 20], [24, 24, 29, 29, 29, 29, 25, 25], [26, 27, 29, 29, 28, 29, 29, 30], [31, 32, 29, 29, 33, 34, 35, 35]], \"row_clues\": [1, 2, 3, 3, 7, 8, 8, 8], \"col_clues\": [6, 5, 8, 5, 4, 5, 4, 3], \"grid_size\": [8, 8]}", "category": "aquarium", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'aquarium_evaluator'}"}}
{"image": "images/000060.png", "question": "Given a list of stock prices [2, 4, 5, 1, 19, 9, 10, 15, 9] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "27", "system": "{'prices': [2, 4, 5, 1, 19, 9, 10, 15, 9]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000061.png", "question": "Given a list of stock prices [4, 16, 11, 16, 1, 8, 3, 10] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "31", "system": "{'prices': [4, 16, 11, 16, 1, 8, 3, 10]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000062.png", "question": "Given a list of stock prices [7, 14, 8, 19, 3, 1, 16, 17] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "34", "system": "{'prices': [7, 14, 8, 19, 3, 1, 16, 17]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000063.png", "question": "Given a list of stock prices [11, 6, 12, 12, 14, 17, 11, 15, 20, 9] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "20", "system": "{'prices': [11, 6, 12, 12, 14, 17, 11, 15, 20, 9]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000064.png", "question": "Given a list of stock prices [11, 12, 10, 15, 20, 11, 1, 10, 16, 7] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "26", "system": "{'prices': [11, 12, 10, 15, 20, 11, 1, 10, 16, 7]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000065.png", "question": "Given a list of stock prices [17, 4, 8, 5, 15] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "14", "system": "{'prices': [17, 4, 8, 5, 15]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000066.png", "question": "Given a list of stock prices [35, 28, 33, 35, 21, 6, 31, 22, 36, 15, 10, 17, 27, 1, 8] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "70", "system": "{'prices': [35, 28, 33, 35, 21, 6, 31, 22, 36, 15, 10, 17, 27, 1, 8]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000067.png", "question": "Given a list of stock prices [2, 20, 4, 14, 37, 10, 15, 23, 4, 37, 31, 20] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "97", "system": "{'prices': [2, 20, 4, 14, 37, 10, 15, 23, 4, 37, 31, 20]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000068.png", "question": "Given a list of stock prices [20, 14, 38, 39, 25, 20, 17, 23, 13, 37, 17, 26, 26] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "64", "system": "{'prices': [20, 14, 38, 39, 25, 20, 17, 23, 13, 37, 17, 26, 26]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000069.png", "question": "Given a list of stock prices [28, 40, 21, 17, 2, 23, 13, 34, 1, 27, 3, 34, 1, 34, 27, 29, 11, 9, 9] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "146", "system": "{'prices': [28, 40, 21, 17, 2, 23, 13, 34, 1, 27, 3, 34, 1, 34, 27, 29, 11, 9, 9]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000070.png", "question": "Given a list of stock prices [12, 23, 15, 15, 3, 34, 30, 1, 36, 10, 2, 32, 12, 21, 13, 26, 22, 17, 8, 32] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "153", "system": "{'prices': [12, 23, 15, 15, 3, 34, 30, 1, 36, 10, 2, 32, 12, 21, 13, 26, 22, 17, 8, 32]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000071.png", "question": "Given a list of stock prices [15, 19, 19, 1, 37, 18, 35, 12, 25, 2, 18, 17, 40, 27, 17, 39, 26, 6, 28, 16] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "153", "system": "{'prices': [15, 19, 19, 1, 37, 18, 35, 12, 25, 2, 18, 17, 40, 27, 17, 39, 26, 6, 28, 16]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000072.png", "question": "Given a list of stock prices [60, 58, 53, 50, 53, 50, 54, 56, 28, 26, 22, 25, 56, 47, 51, 20, 16, 14, 17, 10, 8, 6, 7, 5, 1, 9, 49, 12] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "99", "system": "{'prices': [60, 58, 53, 50, 53, 50, 54, 56, 28, 26, 22, 25, 56, 47, 51, 20, 16, 14, 17, 10, 8, 6, 7, 5, 1, 9, 49, 12]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000073.png", "question": "Given a list of stock prices [28, 30, 28, 23, 22, 26, 27, 23, 39, 1, 6, 3, 33, 54, 55, 53, 58, 58, 62, 65] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "92", "system": "{'prices': [28, 30, 28, 23, 22, 26, 27, 23, 39, 1, 6, 3, 33, 54, 55, 53, 58, 58, 62, 65]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000074.png", "question": "Given a list of stock prices [19, 16, 15, 56, 51, 46, 45, 47, 14, 17, 14, 15, 10, 21, 23, 28, 23, 26, 20, 18, 21, 26, 6] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "76", "system": "{'prices': [19, 16, 15, 56, 51, 46, 45, 47, 14, 17, 14, 15, 10, 21, 23, 28, 23, 26, 20, 18, 21, 26, 6]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000075.png", "question": "Given a list of stock prices [20, 18, 17, 15, 14, 19, 20, 25, 22, 18, 13, 12, 14, 10, 6, 7, 5, 9, 6, 3] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "18", "system": "{'prices': [20, 18, 17, 15, 14, 19, 20, 25, 22, 18, 13, 12, 14, 10, 6, 7, 5, 9, 6, 3]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000076.png", "question": "Given a list of stock prices [25, 3, 23, 18, 18, 13, 9, 10, 5, 30, 25, 30, 32, 34, 3, 7, 6, 2, 36, 32, 35, 40] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "101", "system": "{'prices': [25, 3, 23, 18, 18, 13, 9, 10, 5, 30, 25, 30, 32, 34, 3, 7, 6, 2, 36, 32, 35, 40]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000077.png", "question": "Given a list of stock prices [30, 27, 31, 31, 4, 35, 36, 34, 30, 32, 3, 7, 9, 7, 4, 1, 4, 17, 18, 15, 10, 36, 35, 59, 42, 38, 40] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "113", "system": "{'prices': [30, 27, 31, 31, 4, 35, 36, 34, 30, 32, 3, 7, 9, 7, 4, 1, 4, 17, 18, 15, 10, 36, 35, 59, 42, 38, 40]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000078.png", "question": "Given a list of stock prices [11, 9, 83, 82, 87, 80, 81, 5, 29, 27, 28, 52, 98, 34, 29, 34, 32, 9, 11, 49, 21, 17, 19, 15, 12, 10, 9, 4, 7, 6, 67, 66, 51, 23, 18, 19, 46, 41, 37, 33, 35, 38, 42, 41, 36, 87, 86, 95, 94] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "383", "system": "{'prices': [11, 9, 83, 82, 87, 80, 81, 5, 29, 27, 28, 52, 98, 34, 29, 34, 32, 9, 11, 49, 21, 17, 19, 15, 12, 10, 9, 4, 7, 6, 67, 66, 51, 23, 18, 19, 46, 41, 37, 33, 35, 38, 42, 41, 36, 87, 86, 95, 94]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000079.png", "question": "Given a list of stock prices [27, 26, 30, 27, 50, 49, 52, 53, 67, 64, 69, 64, 95, 16, 15, 10, 8, 5, 15, 11, 7, 6, 5, 79, 76, 73, 78, 73, 75, 71, 73, 16, 44, 42, 39] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "202", "system": "{'prices': [27, 26, 30, 27, 50, 49, 52, 53, 67, 64, 69, 64, 95, 16, 15, 10, 8, 5, 15, 11, 7, 6, 5, 79, 76, 73, 78, 73, 75, 71, 73, 16, 44, 42, 39]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000080.png", "question": "Given a list of stock prices [11, 9, 13, 12, 52, 48, 45, 40, 35, 30, 41, 69, 64, 69, 69, 99, 96, 53, 58, 59, 54, 50, 39, 58, 54, 58, 56, 53, 49, 53, 49, 54, 51, 47, 46, 13, 13, 18, 22, 66, 63, 65, 66, 71, 70, 71, 68, 66] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "218", "system": "{'prices': [11, 9, 13, 12, 52, 48, 45, 40, 35, 30, 41, 69, 64, 69, 69, 99, 96, 53, 58, 59, 54, 50, 39, 58, 54, 58, 56, 53, 49, 53, 49, 54, 51, 47, 46, 13, 13, 18, 22, 66, 63, 65, 66, 71, 70, 71, 68, 66]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000081.png", "question": "Given a list of stock prices [89, 85, 89, 90, 42, 73, 72, 67, 9, 10, 5, 75, 58, 94, 92, 89, 20, 16, 15, 98, 93, 42, 35, 15, 19, 23, 25, 2, 1, 1, 1, 1, 5, 6, 69, 72, 71, 70, 75] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "312", "system": "{'prices': [89, 85, 89, 90, 42, 73, 72, 67, 9, 10, 5, 75, 58, 94, 92, 89, 20, 16, 15, 98, 93, 42, 35, 15, 19, 23, 25, 2, 1, 1, 1, 1, 5, 6, 69, 72, 71, 70, 75]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000082.png", "question": "Given a list of stock prices [38, 33, 35, 8, 3, 2, 5, 74, 27, 28, 75, 70, 6, 11, 8, 49, 46, 41, 9, 40, 62, 59, 56, 95, 96, 97, 93, 47, 49, 54, 55] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "270", "system": "{'prices': [38, 33, 35, 8, 3, 2, 5, 74, 27, 28, 75, 70, 6, 11, 8, 49, 46, 41, 9, 40, 62, 59, 56, 95, 96, 97, 93, 47, 49, 54, 55]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000083.png", "question": "Given a list of stock prices [98, 52, 53, 54, 53, 50, 51, 50, 54, 51, 78, 75, 78, 72, 76, 80, 77, 82, 85, 89, 88, 84, 88, 85, 83, 78, 92, 93, 16, 46, 45, 42, 46, 41, 42, 38, 42, 43, 57, 53, 5, 6, 3, 71, 68, 69, 65, 21, 20, 25] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "205", "system": "{'prices': [98, 52, 53, 54, 53, 50, 51, 50, 54, 51, 78, 75, 78, 72, 76, 80, 77, 82, 85, 89, 88, 84, 88, 85, 83, 78, 92, 93, 16, 46, 45, 42, 46, 41, 42, 38, 42, 43, 57, 53, 5, 6, 3, 71, 68, 69, 65, 21, 20, 25]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000084.png", "question": "Given a list of stock prices [72, 68, 80, 77, 73, 83, 78, 74, 69, 68, 66, 77, 81, 85, 89, 91, 90, 89, 85, 5, 1, 1, 23, 18, 16, 12, 39, 34, 39, 38, 41, 39, 42, 40, 38, 40, 44, 40, 36, 86, 43, 40, 36, 19, 17, 16, 13, 10, 13, 37, 77, 74, 19, 22, 18, 17, 13, 14, 96, 99, 96, 92] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "319", "system": "{'prices': [72, 68, 80, 77, 73, 83, 78, 74, 69, 68, 66, 77, 81, 85, 89, 91, 90, 89, 85, 5, 1, 1, 23, 18, 16, 12, 39, 34, 39, 38, 41, 39, 42, 40, 38, 40, 44, 40, 36, 86, 43, 40, 36, 19, 17, 16, 13, 10, 13, 37, 77, 74, 19, 22, 18, 17, 13, 14, 96, 99, 96, 92]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000085.png", "question": "Given a list of stock prices [41, 39, 55, 87, 82, 21, 19, 15, 14, 17, 13, 75, 66, 47, 1, 1, 4, 1, 1, 4, 5, 22, 21, 45, 44, 1, 3, 4, 79, 81, 77, 73, 87, 83, 80, 49, 47, 46, 42, 43, 46, 44, 60, 58, 68, 33, 67, 68, 10, 44, 29, 24, 20, 90, 88, 3, 2, 1, 1, 8, 89, 84, 79, 78, 82, 79, 86, 85] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "523", "system": "{'prices': [41, 39, 55, 87, 82, 21, 19, 15, 14, 17, 13, 75, 66, 47, 1, 1, 4, 1, 1, 4, 5, 22, 21, 45, 44, 1, 3, 4, 79, 81, 77, 73, 87, 83, 80, 49, 47, 46, 42, 43, 46, 44, 60, 58, 68, 33, 67, 68, 10, 44, 29, 24, 20, 90, 88, 3, 2, 1, 1, 8, 89, 84, 79, 78, 82, 79, 86, 85]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000086.png", "question": "Given a list of stock prices [84, 82, 78, 81, 83, 79, 84, 8, 7, 4, 90, 45, 44, 43, 58, 20, 17, 13, 95, 19, 38, 41, 90, 91, 28, 26, 43, 80, 76, 8, 7, 5, 4, 2, 48, 44, 49, 45, 40, 37, 12, 10, 5, 41, 42, 47, 45, 42, 46, 50, 45, 40, 45, 44, 41, 37] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "425", "system": "{'prices': [84, 82, 78, 81, 83, 79, 84, 8, 7, 4, 90, 45, 44, 43, 58, 20, 17, 13, 95, 19, 38, 41, 90, 91, 28, 26, 43, 80, 76, 8, 7, 5, 4, 2, 48, 44, 49, 45, 40, 37, 12, 10, 5, 41, 42, 47, 45, 42, 46, 50, 45, 40, 45, 44, 41, 37]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000087.png", "question": "Given a list of stock prices [47, 43, 42, 38, 35, 54, 99, 31, 30, 35, 38, 35, 40, 41, 79, 97, 94, 96, 44, 42, 1, 5, 1, 6, 3, 93, 97, 102, 99, 101, 96, 95, 97, 43, 84, 88, 84, 35, 62, 64, 59, 71, 25, 91, 88, 92, 94, 89, 84, 83, 15, 20, 18, 19, 24, 27, 30, 15, 14, 82, 79, 78, 75, 70, 75, 79] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "500", "system": "{'prices': [47, 43, 42, 38, 35, 54, 99, 31, 30, 35, 38, 35, 40, 41, 79, 97, 94, 96, 44, 42, 1, 5, 1, 6, 3, 93, 97, 102, 99, 101, 96, 95, 97, 43, 84, 88, 84, 35, 62, 64, 59, 71, 25, 91, 88, 92, 94, 89, 84, 83, 15, 20, 18, 19, 24, 27, 30, 15, 14, 82, 79, 78, 75, 70, 75, 79]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000088.png", "question": "Given a list of stock prices [75, 79, 29, 31, 70, 72, 69, 80, 81, 78, 54, 53, 45, 47, 50, 53, 55, 60, 55, 56, 59, 81, 82, 81, 80, 77, 74, 73, 78, 95, 94, 99, 95, 81, 79, 75, 78, 76, 72, 20, 17, 22, 60, 85, 14, 11, 13, 17, 13, 12, 13, 17, 21, 19, 23, 26, 28, 24, 27, 25] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "226", "system": "{'prices': [75, 79, 29, 31, 70, 72, 69, 80, 81, 78, 54, 53, 45, 47, 50, 53, 55, 60, 55, 56, 59, 81, 82, 81, 80, 77, 74, 73, 78, 95, 94, 99, 95, 81, 79, 75, 78, 76, 72, 20, 17, 22, 60, 85, 14, 11, 13, 17, 13, 12, 13, 17, 21, 19, 23, 26, 28, 24, 27, 25]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000089.png", "question": "Given a list of stock prices [46, 70, 68, 65, 27, 29, 34, 16, 69, 10, 5, 1, 1, 60, 59, 81, 76, 74, 71, 95, 98, 99, 101, 100, 93, 15, 13, 96, 100, 32, 33, 32, 29, 33, 30, 33, 31, 6, 1, 69, 66, 70, 47, 44, 69, 26, 23, 63, 59, 56, 96, 93, 89, 87] over time. You can buy and sell as much as you want, but can only hold one stock at a time. Calculate the maximum profit you can get from this transaction. If you cannot get any profit, answer 0.", "answer": "467", "system": "{'prices': [46, 70, 68, 65, 27, 29, 34, 16, 69, 10, 5, 1, 1, 60, 59, 81, 76, 74, 71, 95, 98, 99, 101, 100, 93, 15, 13, 96, 100, 32, 33, 32, 29, 33, 30, 33, 31, 6, 1, 69, 66, 70, 47, 44, 69, 26, 23, 63, 59, 56, 96, 93, 89, 87]}", "category": "BestTimeToBuyAndSellStock", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000090.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 0 _ 1\\nRow 2: 1 0 _ _\\nRow 3: 0 _ 1 _\\nRow 4: _ _ 0 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 8\\n- Empty cells: 8\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 0 1 1\\n1 0 0 1\\n0 1 1 0\\n1 1 0 0", "system": "[[None, 0, None, 1], [1, 0, None, None], [0, None, 1, None], [None, None, 0, 0]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000091.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ _ 0\\nRow 2: 1 _ _ 0\\nRow 3: 0 _ 1 1\\nRow 4: 0 _ 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 8\\n- Empty cells: 8\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 1 0\\n1 1 0 0\\n0 0 1 1\\n0 1 0 1", "system": "[[None, None, None, 0], [1, None, None, 0], [0, None, 1, 1], [0, None, 0, None]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000092.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ 1\\nRow 2: 1 1 0 _\\nRow 3: _ _ _ 0\\nRow 4: _ _ 1 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 8\\n- Empty cells: 8\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 1\\n1 1 0 0\\n1 0 1 0\\n0 0 1 1", "system": "[[0, None, None, 1], [1, 1, 0, None], [None, None, None, 0], [None, None, 1, 1]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000093.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 1 0 _\\nRow 2: _ 0 1 _\\nRow 3: 0 1 1 0\\nRow 4: _ 0 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 10\\n- Empty cells: 6\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 1\\n1 0 1 0\\n0 1 1 0\\n1 0 0 1", "system": "[[None, 1, 0, None], [None, 0, 1, None], [0, 1, 1, 0], [None, 0, 0, None]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000094.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ 1\\nRow 2: _ 1 _ 1\\nRow 3: 1 _ 0 _\\nRow 4: 1 0 1 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 9\\n- Empty cells: 7\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 0 1 1\\n0 1 0 1\\n1 1 0 0\\n1 0 1 0", "system": "[[0, None, None, 1], [None, 1, None, 1], [1, None, 0, None], [1, 0, 1, None]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000095.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 2 0s and 2 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ 1\\nRow 2: 1 _ 0 1\\nRow 3: 1 0 _ _\\nRow 4: 0 _ 1 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 4 rows × 4 columns\\n- Total cells: 16\\n- Filled cells: 10\\n- Empty cells: 6\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 4 from top to bottom\\n- Columns are numbered 1 to 4 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 1\\n1 0 0 1\\n1 0 1 0\\n0 1 1 0", "system": "[[0, None, None, 1], [1, None, 0, 1], [1, 0, None, None], [0, None, 1, 0]]", "category": "binairo", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000096.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ 0 _ 1\\nRow 2: 0 0 1 0 _ 1\\nRow 3: _ _ 0 1 _ _\\nRow 4: _ 1 _ _ 0 _\\nRow 5: _ _ _ _ 1 0\\nRow 6: 1 1 _ _ 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 17\\n- Empty cells: 19\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 0 1\\n0 0 1 0 1 1\\n1 0 0 1 1 0\\n0 1 0 1 0 1\\n1 0 1 0 1 0\\n1 1 0 1 0 0", "system": "[[0, None, None, 0, None, 1], [0, 0, 1, 0, None, 1], [None, None, 0, 1, None, None], [None, 1, None, None, 0, None], [None, None, None, None, 1, 0], [1, 1, None, None, 0, None]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000097.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ _ _ _\\nRow 2: 0 _ _ _ _ _\\nRow 3: _ _ 0 _ _ 0\\nRow 4: _ _ 1 _ _ _\\nRow 5: _ 1 _ _ _ _\\nRow 6: 1 1 _ _ _ _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 8\\n- Empty cells: 28\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 0 1 0 1 1\\n0 0 1 1 0 1\\n1 1 0 1 0 0\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 1 0 0 1 0", "system": "[[0, None, None, None, None, None], [0, None, None, None, None, None], [None, None, 0, None, None, 0], [None, None, 1, None, None, None], [None, 1, None, None, None, None], [1, 1, None, None, None, None]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000098.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 1 _ 0 1 0\\nRow 2: 1 1 _ 1 0 _\\nRow 3: 0 0 1 0 1 _\\nRow 4: 1 0 1 _ 1 0\\nRow 5: 0 _ 0 _ _ _\\nRow 6: 0 _ 1 1 _ 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 25\\n- Empty cells: 11\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 0 1 0\\n1 1 0 1 0 0\\n0 0 1 0 1 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n0 0 1 1 0 1", "system": "[[1, 1, None, 0, 1, 0], [1, 1, None, 1, 0, None], [0, 0, 1, 0, 1, None], [1, 0, 1, None, 1, 0], [0, None, 0, None, None, None], [0, None, 1, 1, None, 1]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000099.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 0 _ 1 _ _\\nRow 2: _ _ 0 _ 1 _\\nRow 3: 0 _ 1 _ _ _\\nRow 4: 0 _ 1 _ 0 _\\nRow 5: _ 0 _ _ _ 0\\nRow 6: _ 1 _ _ 0 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 15\\n- Empty cells: 21\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 0 1 0 1\\n1 1 0 0 1 0\\n0 1 1 0 1 0\\n0 0 1 1 0 1\\n1 0 0 1 1 0\\n0 1 1 0 0 1", "system": "[[1, 0, None, 1, None, None], [None, None, 0, None, 1, None], [0, None, 1, None, None, None], [0, None, 1, None, 0, None], [None, 0, None, None, None, 0], [None, 1, None, None, 0, 1]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000100.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 1 1 _ 0 _\\nRow 2: 0 _ 1 0 1 _\\nRow 3: _ 0 0 1 1 _\\nRow 4: 0 1 _ _ 0 _\\nRow 5: 1 _ 1 0 1 _\\nRow 6: _ 1 0 _ 0 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 22\\n- Empty cells: 14\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 0 1\\n0 0 1 0 1 1\\n1 0 0 1 1 0\\n0 1 0 1 0 1\\n1 0 1 0 1 0\\n1 1 0 1 0 0", "system": "[[None, 1, 1, None, 0, None], [0, None, 1, 0, 1, None], [None, 0, 0, 1, 1, None], [0, 1, None, None, 0, None], [1, None, 1, 0, 1, None], [None, 1, 0, None, 0, 0]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000101.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 3 0s and 3 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ _ _ 0 1\\nRow 2: _ 1 0 _ _ _\\nRow 3: _ 0 _ 0 _ _\\nRow 4: _ 1 0 _ _ _\\nRow 5: 1 _ _ 1 _ 1\\nRow 6: _ 0 _ 0 1 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 6 rows × 6 columns\\n- Total cells: 36\\n- Filled cells: 15\\n- Empty cells: 21\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 6 from top to bottom\\n- Columns are numbered 1 to 6 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 0 1\\n1 1 0 1 0 0\\n0 0 1 0 1 1\\n0 1 0 1 1 0\\n1 0 0 1 0 1\\n1 0 1 0 1 0", "system": "[[None, None, None, None, 0, 1], [None, 1, 0, None, None, None], [None, 0, None, 0, None, None], [None, 1, 0, None, None, None], [1, None, None, 1, None, 1], [None, 0, None, 0, 1, 0]]", "category": "binairo", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000102.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ 1 _ _ 1 0 _\\nRow 2: _ _ _ _ 0 0 1 1\\nRow 3: _ _ _ _ 0 _ 1 _\\nRow 4: _ 0 1 _ 1 _ _ 0\\nRow 5: 0 1 1 _ _ 0 _ 0\\nRow 6: 1 0 0 _ 0 _ _ _\\nRow 7: _ 1 0 0 _ _ 0 _\\nRow 8: _ _ 1 1 0 _ _ 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 31\\n- Empty cells: 33\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 1 1 0 0\\n0 1 0 1 0 0 1 1\\n1 0 0 1 0 0 1 1\\n1 0 1 0 1 1 0 0\\n0 1 1 0 1 0 1 0\\n1 0 0 1 0 1 0 1\\n1 1 0 0 1 0 0 1\\n0 0 1 1 0 1 1 0", "system": "[[0, None, 1, None, None, 1, 0, None], [None, None, None, None, 0, 0, 1, 1], [None, None, None, None, 0, None, 1, None], [None, 0, 1, None, 1, None, None, 0], [0, 1, 1, None, None, 0, None, 0], [1, 0, 0, None, 0, None, None, None], [None, 1, 0, 0, None, None, 0, None], [None, None, 1, 1, 0, None, None, 0]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000103.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ 0 _ _ _ _ _\\nRow 2: _ _ 1 _ _ _ 0 _\\nRow 3: _ _ 0 _ 1 0 _ 1\\nRow 4: _ 1 _ 0 _ _ 1 _\\nRow 5: _ 0 0 1 _ _ _ 1\\nRow 6: _ _ _ 1 0 0 _ 1\\nRow 7: _ 0 _ 0 1 _ 1 _\\nRow 8: _ 0 _ _ _ _ 0 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 25\\n- Empty cells: 39\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 1 0 1 0 0\\n1 0 1 1 0 1 0 0\\n0 1 0 0 1 0 1 1\\n0 1 1 0 1 0 1 0\\n1 0 0 1 0 1 0 1\\n0 1 0 1 0 0 1 1\\n1 0 1 0 1 0 1 0\\n0 0 1 0 1 1 0 1", "system": "[[None, None, 0, None, None, None, None, None], [None, None, 1, None, None, None, 0, None], [None, None, 0, None, 1, 0, None, 1], [None, 1, None, 0, None, None, 1, None], [None, 0, 0, 1, None, None, None, 1], [None, None, None, 1, 0, 0, None, 1], [None, 0, None, 0, 1, None, 1, None], [None, 0, None, None, None, None, 0, 1]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000104.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ 0 1 1 0 _ _\\nRow 2: 0 _ 1 0 _ 1 0 0\\nRow 3: _ 1 _ _ 0 0 1 _\\nRow 4: _ 0 1 0 1 _ _ 1\\nRow 5: 0 0 1 1 _ 1 1 0\\nRow 6: 0 1 _ 0 1 _ 1 1\\nRow 7: 1 0 0 1 0 1 _ _\\nRow 8: 0 1 _ 0 0 1 1 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 45\\n- Empty cells: 19\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 0 1 1 0 0 1\\n0 1 1 0 1 1 0 0\\n1 1 0 1 0 0 1 0\\n1 0 1 0 1 0 0 1\\n0 0 1 1 0 1 1 0\\n0 1 0 0 1 0 1 1\\n1 0 0 1 0 1 0 1\\n0 1 1 0 0 1 1 0", "system": "[[None, None, 0, 1, 1, 0, None, None], [0, None, 1, 0, None, 1, 0, 0], [None, 1, None, None, 0, 0, 1, None], [None, 0, 1, 0, 1, None, None, 1], [0, 0, 1, 1, None, 1, 1, 0], [0, 1, None, 0, 1, None, 1, 1], [1, 0, 0, 1, 0, 1, None, None], [0, 1, None, 0, 0, 1, 1, 0]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000105.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ _ 0 1 _ _ _\\nRow 2: _ _ _ 0 _ 1 _ _\\nRow 3: _ _ 0 1 _ 1 _ _\\nRow 4: 1 _ 0 _ _ _ 0 _\\nRow 5: _ 1 _ 0 _ 0 1 0\\nRow 6: 0 _ _ 1 0 1 1 _\\nRow 7: _ 0 _ _ _ 1 _ 1\\nRow 8: _ 0 1 _ _ _ _ _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 26\\n- Empty cells: 38\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 0 1 0 1 0 1 1\\n0 1 1 0 0 1 1 0\\n1 1 0 1 0 1 0 0\\n1 0 0 1 1 0 0 1\\n0 1 1 0 1 0 1 0\\n0 1 0 1 0 1 1 0\\n1 0 0 1 0 1 0 1\\n1 0 1 0 1 0 0 1", "system": "[[0, None, None, 0, 1, None, None, None], [None, None, None, 0, None, 1, None, None], [None, None, 0, 1, None, 1, None, None], [1, None, 0, None, None, None, 0, None], [None, 1, None, 0, None, 0, 1, 0], [0, None, None, 1, 0, 1, 1, None], [None, 0, None, None, None, 1, None, 1], [None, 0, 1, None, None, None, None, None]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000106.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 _ 0 _ _ 0 0 1\\nRow 2: 1 0 1 0 _ 1 1 0\\nRow 3: 1 1 _ 1 0 0 _ 0\\nRow 4: 0 _ _ _ 1 _ _ _\\nRow 5: _ 0 1 0 0 _ 0 1\\nRow 6: 0 1 _ 1 0 1 1 _\\nRow 7: 1 0 _ 1 _ 0 1 _\\nRow 8: _ 0 1 0 _ 1 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 42\\n- Empty cells: 22\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 1 1 0 0 1\\n1 0 1 0 0 1 1 0\\n1 1 0 1 0 0 1 0\\n0 1 1 0 1 0 0 1\\n1 0 1 0 0 1 0 1\\n0 1 0 1 0 1 1 0\\n1 0 0 1 1 0 1 0\\n0 0 1 0 1 1 0 1", "system": "[[0, None, 0, None, None, 0, 0, 1], [1, 0, 1, 0, None, 1, 1, 0], [1, 1, None, 1, 0, 0, None, 0], [0, None, None, None, 1, None, None, None], [None, 0, 1, 0, 0, None, 0, 1], [0, 1, None, 1, 0, 1, 1, None], [1, 0, None, 1, None, 0, 1, None], [None, 0, 1, 0, None, 1, 0, None]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000107.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 4 0s and 4 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 0 0 _ 0 1 0 1\\nRow 2: 1 1 0 1 _ _ 0 0\\nRow 3: _ _ 1 0 1 0 1 _\\nRow 4: _ 0 _ 0 1 _ _ _\\nRow 5: 1 1 _ _ 0 0 _ _\\nRow 6: _ 0 _ _ _ _ 1 0\\nRow 7: 0 1 1 0 0 1 _ _\\nRow 8: 0 1 0 1 1 _ _ 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 8 rows × 8 columns\\n- Total cells: 64\\n- Filled cells: 39\\n- Empty cells: 25\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 8 from top to bottom\\n- Columns are numbered 1 to 8 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 0 1 0 1 0 1\\n1 1 0 1 0 1 0 0\\n0 0 1 0 1 0 1 1\\n0 0 1 0 1 1 0 1\\n1 1 0 1 0 0 1 0\\n1 0 1 0 1 0 1 0\\n0 1 1 0 0 1 0 1\\n0 1 0 1 1 0 1 0", "system": "[[None, 0, 0, None, 0, 1, 0, 1], [1, 1, 0, 1, None, None, 0, 0], [None, None, 1, 0, 1, 0, 1, None], [None, 0, None, 0, 1, None, None, None], [1, 1, None, None, 0, 0, None, None], [None, 0, None, None, None, None, 1, 0], [0, 1, 1, 0, 0, 1, None, None], [0, 1, 0, 1, 1, None, None, 0]]", "category": "binairo", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000108.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 1 _ 1 _ _ _ _ 1 0\\nRow 2: _ _ _ _ 1 1 _ 0 1 1\\nRow 3: _ 0 1 _ 1 1 0 1 0 _\\nRow 4: _ 1 _ 1 _ 0 _ _ _ _\\nRow 5: 0 0 1 0 1 _ 0 0 1 1\\nRow 6: _ 0 _ 0 1 0 1 1 0 _\\nRow 7: 0 1 _ _ _ 0 1 _ 0 1\\nRow 8: 0 _ _ _ 0 _ 0 0 1 1\\nRow 9: 1 1 _ 0 1 0 1 1 _ 0\\nRow 10: 1 0 _ _ 0 _ _ _ 0 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 61\\n- Empty cells: 39\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 1 0 0 1 0 1 0\\n0 1 0 0 1 1 0 0 1 1\\n1 0 1 0 1 1 0 1 0 0\\n0 1 0 1 0 0 1 0 1 1\\n0 0 1 0 1 1 0 0 1 1\\n1 0 1 0 1 0 1 1 0 0\\n0 1 0 1 0 0 1 1 0 1\\n0 0 1 1 0 1 0 0 1 1\\n1 1 0 0 1 0 1 1 0 0\\n1 0 1 1 0 1 0 1 0 0", "system": "[[1, 1, None, 1, None, None, None, None, 1, 0], [None, None, None, None, 1, 1, None, 0, 1, 1], [None, 0, 1, None, 1, 1, 0, 1, 0, None], [None, 1, None, 1, None, 0, None, None, None, None], [0, 0, 1, 0, 1, None, 0, 0, 1, 1], [None, 0, None, 0, 1, 0, 1, 1, 0, None], [0, 1, None, None, None, 0, 1, None, 0, 1], [0, None, None, None, 0, None, 0, 0, 1, 1], [1, 1, None, 0, 1, 0, 1, 1, None, 0], [1, 0, None, None, 0, None, None, None, 0, 0]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000109.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 _ 0 0 1 1 _ 0 1 _\\nRow 2: 1 0 _ _ _ 1 _ _ 1 0\\nRow 3: _ 0 _ 0 1 0 1 _ 0 1\\nRow 4: _ _ 0 1 _ 0 0 _ 0 1\\nRow 5: 1 0 _ 1 0 1 1 0 1 _\\nRow 6: 0 _ _ 0 1 _ _ 0 _ 0\\nRow 7: _ 0 _ 1 0 0 _ 1 0 1\\nRow 8: 1 1 _ 0 1 0 _ 1 1 0\\nRow 9: _ 1 _ _ 0 _ _ _ 0 1\\nRow 10: _ _ 0 _ _ 0 1 _ 0 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 62\\n- Empty cells: 38\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 0 1 1 0 0 1 0\\n1 0 1 1 0 1 0 0 1 0\\n0 0 1 0 1 0 1 1 0 1\\n0 1 0 1 1 0 0 1 0 1\\n1 0 0 1 0 1 1 0 1 0\\n0 1 1 0 1 1 0 0 1 0\\n0 0 1 1 0 0 1 1 0 1\\n1 1 0 0 1 0 0 1 1 0\\n0 1 1 0 0 1 1 0 0 1\\n1 0 0 1 0 0 1 1 0 1", "system": "[[1, None, 0, 0, 1, 1, None, 0, 1, None], [1, 0, None, None, None, 1, None, None, 1, 0], [None, 0, None, 0, 1, 0, 1, None, 0, 1], [None, None, 0, 1, None, 0, 0, None, 0, 1], [1, 0, None, 1, 0, 1, 1, 0, 1, None], [0, None, None, 0, 1, None, None, 0, None, 0], [None, 0, None, 1, 0, 0, None, 1, 0, 1], [1, 1, None, 0, 1, 0, None, 1, 1, 0], [None, 1, None, None, 0, None, None, None, 0, 1], [None, None, 0, None, None, 0, 1, None, 0, 1]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000110.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 1 _ _ _ _ _ _ _ _\\nRow 2: 1 _ 1 _ 0 _ _ _ _ 0\\nRow 3: 1 0 0 _ 0 0 _ _ _ _\\nRow 4: _ _ _ _ 1 0 0 _ 0 _\\nRow 5: _ 1 _ _ _ 1 _ _ 1 _\\nRow 6: 1 _ _ _ _ 0 _ _ _ 0\\nRow 7: _ 1 _ _ _ _ _ 1 _ _\\nRow 8: 0 _ 1 0 _ 1 _ _ _ 1\\nRow 9: 1 _ 0 1 1 0 _ _ _ _\\nRow 10: _ _ _ _ 0 _ 1 0 _ 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 37\\n- Empty cells: 63\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 1 1 0 1 0 0\\n1 0 1 0 0 1 1 0 1 0\\n1 0 0 1 0 0 1 1 0 1\\n0 1 0 1 1 0 0 1 0 1\\n0 1 1 0 1 1 0 0 1 0\\n1 0 1 1 0 0 1 0 1 0\\n0 1 0 0 1 1 0 1 0 1\\n0 1 1 0 0 1 1 0 0 1\\n1 0 0 1 1 0 0 1 1 0\\n1 0 0 1 0 0 1 0 1 1", "system": "[[0, 1, None, None, None, None, None, None, None, None], [1, None, 1, None, 0, None, None, None, None, 0], [1, 0, 0, None, 0, 0, None, None, None, None], [None, None, None, None, 1, 0, 0, None, 0, None], [None, 1, None, None, None, 1, None, None, 1, None], [1, None, None, None, None, 0, None, None, None, 0], [None, 1, None, None, None, None, None, 1, None, None], [0, None, 1, 0, None, 1, None, None, None, 1], [1, None, 0, 1, 1, 0, None, None, None, None], [None, None, None, None, 0, None, 1, 0, None, 1]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000111.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 0 1 _ 0 1 0 _ 1 1 0\\nRow 2: 1 1 0 0 1 0 0 1 1 _\\nRow 3: 1 _ 0 1 0 1 _ _ _ _\\nRow 4: 0 0 1 _ _ _ 1 0 1 1\\nRow 5: _ 1 _ 0 _ _ 0 1 0 0\\nRow 6: 1 _ _ 0 _ _ _ _ 0 _\\nRow 7: _ 0 1 1 0 1 _ _ 1 1\\nRow 8: 0 1 1 _ 0 _ _ 1 1 0\\nRow 9: _ _ _ _ 1 _ 1 _ 0 0\\nRow 10: _ 0 1 _ 0 1 1 0 _ 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 63\\n- Empty cells: 37\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 1 0 1 0 0 1 1 0\\n1 1 0 0 1 0 0 1 1 0\\n1 0 0 1 0 1 1 0 0 1\\n0 0 1 1 0 0 1 0 1 1\\n1 1 0 0 1 1 0 1 0 0\\n1 1 0 0 1 0 1 0 0 1\\n0 0 1 1 0 1 0 0 1 1\\n0 1 1 0 0 1 0 1 1 0\\n1 0 0 1 1 0 1 1 0 0\\n0 0 1 1 0 1 1 0 0 1", "system": "[[0, 1, None, 0, 1, 0, None, 1, 1, 0], [1, 1, 0, 0, 1, 0, 0, 1, 1, None], [1, None, 0, 1, 0, 1, None, None, None, None], [0, 0, 1, None, None, None, 1, 0, 1, 1], [None, 1, None, 0, None, None, 0, 1, 0, 0], [1, None, None, 0, None, None, None, None, 0, None], [None, 0, 1, 1, 0, 1, None, None, 1, 1], [0, 1, 1, None, 0, None, None, 1, 1, 0], [None, None, None, None, 1, None, 1, None, 0, 0], [None, 0, 1, None, 0, 1, 1, 0, None, 1]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000112.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ _ _ 0 _ _ 1 _ 1\\nRow 2: 0 _ 1 1 _ _ _ _ _ 1\\nRow 3: 1 _ _ 0 _ _ _ 0 1 _\\nRow 4: _ 1 _ _ 0 0 1 _ 1 _\\nRow 5: _ _ _ _ _ 1 0 _ 0 _\\nRow 6: _ 0 _ 0 _ 1 0 1 _ _\\nRow 7: _ _ _ 0 _ 0 _ _ _ _\\nRow 8: _ _ _ _ 0 _ 1 _ 0 0\\nRow 9: _ _ _ _ _ _ _ _ _ 1\\nRow 10: 1 _ _ 0 _ _ _ 0 1 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 35\\n- Empty cells: 65\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 1 0 0 1 1 0 1\\n0 0 1 1 0 0 1 1 0 1\\n1 0 1 0 1 1 0 0 1 0\\n1 1 0 1 0 0 1 0 1 0\\n0 1 0 1 0 1 0 1 0 1\\n1 0 1 0 1 1 0 1 0 0\\n0 0 1 0 1 0 1 0 1 1\\n1 1 0 1 0 0 1 1 0 0\\n0 0 1 0 1 1 0 0 1 1\\n1 1 0 0 1 1 0 0 1 0", "system": "[[None, None, None, None, 0, None, None, 1, None, 1], [0, None, 1, 1, None, None, None, None, None, 1], [1, None, None, 0, None, None, None, 0, 1, None], [None, 1, None, None, 0, 0, 1, None, 1, None], [None, None, None, None, None, 1, 0, None, 0, None], [None, 0, None, 0, None, 1, 0, 1, None, None], [None, None, None, 0, None, 0, None, None, None, None], [None, None, None, None, 0, None, 1, None, 0, 0], [None, None, None, None, None, None, None, None, None, 1], [1, None, None, 0, None, None, None, 0, 1, None]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000113.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 5 0s and 5 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 _ 1 _ 0 _ _ _ _ 0\\nRow 2: _ _ _ _ _ _ _ _ 0 _\\nRow 3: 0 _ 1 _ _ _ _ _ 1 1\\nRow 4: _ _ 0 _ 0 _ 0 1 _ 0\\nRow 5: 1 0 1 1 0 0 1 _ _ _\\nRow 6: _ 0 1 _ 1 1 _ _ _ _\\nRow 7: 0 _ _ _ _ _ 1 1 _ 1\\nRow 8: _ _ 1 _ _ 0 _ _ _ _\\nRow 9: _ 1 0 _ 1 1 _ _ _ _\\nRow 10: 0 _ 0 _ 0 _ 1 _ _ 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 10 rows × 10 columns\\n- Total cells: 100\\n- Filled cells: 40\\n- Empty cells: 60\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 10 from top to bottom\\n- Columns are numbered 1 to 10 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 1 1 0 1 0 0 1 0\\n1 1 0 0 1 0 0 1 0 1\\n0 0 1 0 1 0 1 0 1 1\\n1 1 0 1 0 1 0 1 0 0\\n1 0 1 1 0 0 1 1 0 0\\n0 0 1 0 1 1 0 0 1 1\\n0 1 0 0 1 0 1 1 0 1\\n1 0 1 1 0 0 1 0 1 0\\n0 1 0 0 1 1 0 1 1 0\\n0 1 0 1 0 1 1 0 0 1", "system": "[[1, None, 1, None, 0, None, None, None, None, 0], [None, None, None, None, None, None, None, None, 0, None], [0, None, 1, None, None, None, None, None, 1, 1], [None, None, 0, None, 0, None, 0, 1, None, 0], [1, 0, 1, 1, 0, 0, 1, None, None, None], [None, 0, 1, None, 1, 1, None, None, None, None], [0, None, None, None, None, None, 1, 1, None, 1], [None, None, 1, None, None, 0, None, None, None, None], [None, 1, 0, None, 1, 1, None, None, None, None], [0, None, 0, None, 0, None, 1, None, None, 1]]", "category": "binairo", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000114.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 1 _ 0 1 0 0 _ _ _ 1 1\\nRow 2: 1 _ _ 0 1 _ 0 1 1 _ _ 0\\nRow 3: _ _ _ 1 0 _ _ _ _ 1 0 _\\nRow 4: 0 _ 0 _ 1 _ 1 1 0 _ 1 _\\nRow 5: 0 _ _ 0 _ _ _ _ 1 _ 1 _\\nRow 6: 1 _ 0 _ 0 _ 0 0 _ 1 _ _\\nRow 7: 1 0 0 1 _ _ _ 1 _ 1 0 _\\nRow 8: _ _ 1 _ 1 _ 0 _ 1 0 1 _\\nRow 9: 0 0 _ 1 _ 1 1 0 0 1 0 _\\nRow 10: _ _ 0 1 _ _ 0 1 _ 0 0 _\\nRow 11: 0 _ 1 _ 0 _ 1 _ 0 _ 1 _\\nRow 12: 1 _ 1 1 0 _ _ 0 _ 1 0 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 77\\n- Empty cells: 67\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 1 0 0 1 0 0 1 1 0 1 1\\n1 0 1 0 1 0 0 1 1 0 1 0\\n1 1 0 1 0 1 1 0 0 1 0 0\\n0 1 0 0 1 0 1 1 0 0 1 1\\n0 0 1 0 1 0 0 1 1 0 1 1\\n1 1 0 1 0 1 0 0 1 1 0 0\\n1 0 0 1 0 0 1 1 0 1 0 1\\n0 1 1 0 1 1 0 0 1 0 1 0\\n0 0 1 1 0 1 1 0 0 1 0 1\\n1 0 0 1 1 0 0 1 1 0 0 1\\n0 1 1 0 0 1 1 0 0 1 1 0\\n1 0 1 1 0 1 1 0 0 1 0 0", "system": "[[None, 1, None, 0, 1, 0, 0, None, None, None, 1, 1], [1, None, None, 0, 1, None, 0, 1, 1, None, None, 0], [None, None, None, 1, 0, None, None, None, None, 1, 0, None], [0, None, 0, None, 1, None, 1, 1, 0, None, 1, None], [0, None, None, 0, None, None, None, None, 1, None, 1, None], [1, None, 0, None, 0, None, 0, 0, None, 1, None, None], [1, 0, 0, 1, None, None, None, 1, None, 1, 0, None], [None, None, 1, None, 1, None, 0, None, 1, 0, 1, None], [0, 0, None, 1, None, 1, 1, 0, 0, 1, 0, None], [None, None, 0, 1, None, None, 0, 1, None, 0, 0, None], [0, None, 1, None, 0, None, 1, None, 0, None, 1, None], [1, None, 1, 1, 0, None, None, 0, None, 1, 0, 0]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000115.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 0 _ _ _ 1 _ 0 _ _ 0 1\\nRow 2: _ 0 _ 0 1 _ _ _ _ _ _ 0\\nRow 3: _ 1 0 _ _ 1 _ _ 1 _ _ 1\\nRow 4: 0 0 1 _ _ 0 1 _ _ 0 _ 1\\nRow 5: _ 1 0 _ _ 1 _ 1 _ 1 1 0\\nRow 6: 1 0 _ _ _ _ _ 0 _ 0 _ _\\nRow 7: 1 _ 1 _ 1 _ 1 _ _ 1 _ _\\nRow 8: 0 1 0 _ 0 _ 0 _ 1 _ 0 _\\nRow 9: 1 _ _ 0 1 _ 1 _ _ _ _ 0\\nRow 10: _ _ _ 1 _ _ 1 _ 1 _ 0 _\\nRow 11: _ _ _ 0 _ 1 _ 1 _ 0 _ 1\\nRow 12: 0 1 _ _ _ _ _ 1 _ _ 1 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 63\\n- Empty cells: 81\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "0 0 1 1 0 1 1 0 0 1 0 1\\n1 0 1 0 1 0 0 1 0 1 1 0\\n1 1 0 1 0 1 0 0 1 0 0 1\\n0 0 1 0 1 0 1 0 1 0 1 1\\n0 1 0 0 1 1 0 1 0 1 1 0\\n1 0 1 1 0 1 0 0 1 0 0 1\\n1 0 1 0 1 0 1 0 0 1 1 0\\n0 1 0 1 0 1 0 1 1 0 0 1\\n1 1 0 0 1 0 1 1 0 0 1 0\\n1 0 1 1 0 0 1 0 1 1 0 0\\n0 1 0 0 1 1 0 1 1 0 0 1\\n0 1 0 1 0 0 1 1 0 1 1 0", "system": "[[None, 0, None, None, None, 1, None, 0, None, None, 0, 1], [None, 0, None, 0, 1, None, None, None, None, None, None, 0], [None, 1, 0, None, None, 1, None, None, 1, None, None, 1], [0, 0, 1, None, None, 0, 1, None, None, 0, None, 1], [None, 1, 0, None, None, 1, None, 1, None, 1, 1, 0], [1, 0, None, None, None, None, None, 0, None, 0, None, None], [1, None, 1, None, 1, None, 1, None, None, 1, None, None], [0, 1, 0, None, 0, None, 0, None, 1, None, 0, None], [1, None, None, 0, 1, None, 1, None, None, None, None, 0], [None, None, None, 1, None, None, 1, None, 1, None, 0, None], [None, None, None, 0, None, 1, None, 1, None, 0, None, 1], [0, 1, None, None, None, None, None, 1, None, None, 1, 0]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000116.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 0 1 _ 0 _ _ _ _ 1 _ 0\\nRow 2: 1 0 _ _ _ 1 _ 0 1 0 0 _\\nRow 3: 0 _ _ _ _ _ _ _ 1 _ 1 _\\nRow 4: 0 0 1 _ _ 1 _ _ _ 1 0 1\\nRow 5: _ _ 0 _ _ 1 _ _ 0 _ _ _\\nRow 6: _ 0 0 1 0 _ _ _ 1 _ _ _\\nRow 7: 0 1 _ 0 _ 1 0 _ _ _ _ _\\nRow 8: 0 0 1 _ _ 0 _ _ _ 1 0 1\\nRow 9: _ 1 0 0 _ _ _ _ _ 0 _ _\\nRow 10: _ _ 0 _ 0 1 _ _ _ _ _ _\\nRow 11: 0 _ _ _ 1 _ _ _ 1 _ _ 0\\nRow 12: 0 _ 0 _ _ _ _ _ _ _ 1 1\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 57\\n- Empty cells: 87\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 1 1 0 1 1 0 0 1 0 0\\n1 0 0 1 0 1 1 0 1 0 0 1\\n0 1 1 0 1 0 0 1 1 0 1 0\\n0 0 1 0 1 1 0 1 0 1 0 1\\n1 1 0 1 0 1 1 0 0 1 0 0\\n1 0 0 1 0 0 1 0 1 0 1 1\\n0 1 1 0 1 1 0 1 0 0 1 0\\n0 0 1 1 0 0 1 0 1 1 0 1\\n1 1 0 0 1 0 0 1 0 0 1 1\\n1 0 0 1 0 1 0 1 0 1 1 0\\n0 1 1 0 1 0 1 0 1 1 0 0\\n0 1 0 0 1 0 0 1 1 0 1 1", "system": "[[None, 0, 1, None, 0, None, None, None, None, 1, None, 0], [1, 0, None, None, None, 1, None, 0, 1, 0, 0, None], [0, None, None, None, None, None, None, None, 1, None, 1, None], [0, 0, 1, None, None, 1, None, None, None, 1, 0, 1], [None, None, 0, None, None, 1, None, None, 0, None, None, None], [None, 0, 0, 1, 0, None, None, None, 1, None, None, None], [0, 1, None, 0, None, 1, 0, None, None, None, None, None], [0, 0, 1, None, None, 0, None, None, None, 1, 0, 1], [None, 1, 0, 0, None, None, None, None, None, 0, None, None], [None, None, 0, None, 0, 1, None, None, None, None, None, None], [0, None, None, None, 1, None, None, None, 1, None, None, 0], [0, None, 0, None, None, None, None, None, None, None, 1, 1]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000117.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ _ _ _ _ _ _ _ _ _ 0 0\\nRow 2: _ 1 _ _ 1 _ _ 0 0 _ _ _\\nRow 3: 0 0 _ 0 0 _ 1 0 _ _ 1 _\\nRow 4: _ _ 0 1 1 0 0 1 _ 0 _ 1\\nRow 5: 1 0 1 _ 0 0 _ _ 1 1 _ 0\\nRow 6: 0 _ 0 0 1 1 _ _ _ _ _ 1\\nRow 7: 0 1 0 _ _ _ 0 _ 1 0 1 _\\nRow 8: _ _ _ _ 0 _ 1 0 _ 0 _ _\\nRow 9: _ _ _ _ _ 0 1 _ _ _ 1 0\\nRow 10: 0 1 _ 1 0 1 _ _ _ 1 _ 1\\nRow 11: 0 _ _ 0 _ 1 _ _ 1 _ _ _\\nRow 12: 1 0 1 0 _ 0 1 0 _ 0 _ 0\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 70\\n- Empty cells: 74\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 1 0 1 0 1 0 1 0 0\\n1 1 0 1 1 0 1 0 0 1 0 0\\n0 0 1 0 0 1 1 0 1 0 1 1\\n0 1 0 1 1 0 0 1 0 0 1 1\\n1 0 1 1 0 0 1 0 1 1 0 0\\n0 1 0 0 1 1 0 1 0 1 0 1\\n0 1 0 0 1 1 0 1 1 0 1 0\\n1 0 1 1 0 0 1 0 1 0 0 1\\n1 0 1 0 1 0 1 0 0 1 1 0\\n0 1 0 1 0 1 0 1 0 1 0 1\\n0 0 1 0 0 1 0 1 1 0 1 1\\n1 0 1 0 1 0 1 0 1 0 1 0", "system": "[[None, None, None, None, None, None, None, None, None, None, 0, 0], [None, 1, None, None, 1, None, None, 0, 0, None, None, None], [0, 0, None, 0, 0, None, 1, 0, None, None, 1, None], [None, None, 0, 1, 1, 0, 0, 1, None, 0, None, 1], [1, 0, 1, None, 0, 0, None, None, 1, 1, None, 0], [0, None, 0, 0, 1, 1, None, None, None, None, None, 1], [0, 1, 0, None, None, None, 0, None, 1, 0, 1, None], [None, None, None, None, 0, None, 1, 0, None, 0, None, None], [None, None, None, None, None, 0, 1, None, None, None, 1, 0], [0, 1, None, 1, 0, 1, None, None, None, 1, None, 1], [0, None, None, 0, None, 1, None, None, 1, None, None, None], [1, 0, 1, 0, None, 0, 1, 0, None, 0, None, 0]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000118.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: _ 1 0 _ 1 1 _ 1 _ _ _ 0\\nRow 2: _ _ _ 1 0 _ _ _ _ _ 0 _\\nRow 3: 0 _ 1 0 _ 0 0 _ 0 0 1 1\\nRow 4: _ _ 0 0 _ _ _ 1 _ _ _ _\\nRow 5: _ _ 1 _ 0 _ _ _ _ 1 0 _\\nRow 6: 0 _ 1 _ 1 0 0 1 _ _ _ _\\nRow 7: _ _ 0 1 _ _ _ _ _ _ _ _\\nRow 8: 0 0 _ 0 _ _ 0 _ _ 0 _ 1\\nRow 9: 1 0 0 _ _ 0 _ _ _ _ 0 _\\nRow 10: _ _ 0 0 1 _ 1 1 0 _ 1 _\\nRow 11: _ _ _ 1 _ _ _ _ _ 0 1 _\\nRow 12: _ _ _ 1 0 _ 1 _ _ 0 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 59\\n- Empty cells: 85\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 1 0 0 1 1 0 1 0 1 0 0\\n1 0 1 1 0 0 1 0 1 1 0 0\\n0 1 1 0 1 0 0 1 0 0 1 1\\n1 1 0 0 1 1 0 1 0 0 1 0\\n0 0 1 1 0 1 1 0 1 1 0 0\\n0 1 1 0 1 0 0 1 1 0 0 1\\n1 1 0 1 0 0 1 0 0 1 1 0\\n0 0 1 0 1 1 0 0 1 0 1 1\\n1 0 0 1 0 0 1 1 0 1 0 1\\n0 1 0 0 1 0 1 1 0 1 1 0\\n0 0 1 1 0 1 0 0 1 0 1 1\\n1 0 0 1 0 1 1 0 1 0 0 1", "system": "[[None, 1, 0, None, 1, 1, None, 1, None, None, None, 0], [None, None, None, 1, 0, None, None, None, None, None, 0, None], [0, None, 1, 0, None, 0, 0, None, 0, 0, 1, 1], [None, None, 0, 0, None, None, None, 1, None, None, None, None], [None, None, 1, None, 0, None, None, None, None, 1, 0, None], [0, None, 1, None, 1, 0, 0, 1, None, None, None, None], [None, None, 0, 1, None, None, None, None, None, None, None, None], [0, 0, None, 0, None, None, 0, None, None, 0, None, 1], [1, 0, 0, None, None, 0, None, None, None, None, 0, None], [None, None, 0, 0, 1, None, 1, 1, 0, None, 1, None], [None, None, None, 1, None, None, None, None, None, 0, 1, None], [None, None, None, 1, 0, None, 1, None, None, 0, 0, None]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000119.png", "question": "\\nPlease examine the grid carefully. The grid shows a Binairo puzzle grid with 0s and 1s. Empty cells need to be filled.\\n\\n## Rules:\\n1. Fill the grid with 0s and 1s\\n2. Each row and column must contain exactly 6 0s and 6 1s\\n3. No three consecutive identical digits in any row or column\\n4. All rows must be unique and all columns must be unique\\n### Current Game State (text representation):\\nRow 1: 1 _ _ 1 0 1 _ _ 0 0 1 1\\nRow 2: 0 _ _ 1 0 _ 1 _ 1 1 0 0\\nRow 3: _ 0 1 0 _ _ 0 1 _ 0 1 _\\nRow 4: _ 1 _ _ 0 0 _ 0 _ 1 0 1\\nRow 5: 0 0 1 0 _ 1 0 0 1 0 1 _\\nRow 6: 0 _ 0 0 1 _ _ 1 _ 1 1 0\\nRow 7: _ 1 _ 1 0 _ 1 1 0 _ _ 0\\nRow 8: 1 _ _ _ 1 _ _ 0 1 _ _ _\\nRow 9: _ 0 1 0 1 1 _ _ 0 1 1 0\\nRow 10: 0 1 0 1 0 0 _ 0 _ 1 _ 1\\nRow 11: _ _ _ _ 0 _ 1 1 0 0 _ 0\\nRow 12: 0 1 _ 0 1 1 0 0 _ _ 0 _\\n\\n\\n### Game State Explanation:\\n- Grid dimensions: 12 rows × 12 columns\\n- Total cells: 144\\n- Filled cells: 91\\n- Empty cells: 53\\n\\n### Text Representation Legend:\\n- Numbers (0, 1): Pre-filled clues that cannot be changed\\n- Underscore (_): Empty cells that need to be filled\\n\\n### Coordinate System:\\n- Rows are numbered 1 to 12 from top to bottom\\n- Columns are numbered 1 to 12 from left to right\\n\\n### Output Format:\\nYour answer must be formatted as a grid of 0s and 1s separated by spaces, with rows separated by newlines. For example:\\n\\n0 1 1 0 0 1\\n1 0 1 0 1 0\\n0 1 0 1 0 1\\n1 0 0 1 1 0\\n1 0 1 0 0 1\\n0 1 0 1 1 0\\n", "answer": "1 0 0 1 0 1 0 1 0 0 1 1\\n0 1 0 1 0 1 1 0 1 1 0 0\\n1 0 1 0 1 0 0 1 1 0 1 0\\n1 1 0 1 0 0 1 0 0 1 0 1\\n0 0 1 0 1 1 0 0 1 0 1 1\\n0 1 0 0 1 0 1 1 0 1 1 0\\n1 1 0 1 0 0 1 1 0 1 0 0\\n1 0 1 0 1 1 0 0 1 0 0 1\\n0 0 1 0 1 1 0 1 0 1 1 0\\n0 1 0 1 0 0 1 0 1 1 0 1\\n1 0 1 1 0 0 1 1 0 0 1 0\\n0 1 1 0 1 1 0 0 1 0 0 1", "system": "[[1, None, None, 1, 0, 1, None, None, 0, 0, 1, 1], [0, None, None, 1, 0, None, 1, None, 1, 1, 0, 0], [None, 0, 1, 0, None, None, 0, 1, None, 0, 1, None], [None, 1, None, None, 0, 0, None, 0, None, 1, 0, 1], [0, 0, 1, 0, None, 1, 0, 0, 1, 0, 1, None], [0, None, 0, 0, 1, None, None, 1, None, 1, 1, 0], [None, 1, None, 1, 0, None, 1, 1, 0, None, None, 0], [1, None, None, None, 1, None, None, 0, 1, None, None, None], [None, 0, 1, 0, 1, 1, None, None, 0, 1, 1, 0], [0, 1, 0, 1, 0, 0, None, 0, None, 1, None, 1], [None, None, None, None, 0, None, 1, 1, 0, 0, None, 0], [0, 1, None, 0, 1, 1, 0, 0, None, None, 0, None]]", "category": "binairo", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'binairo_evaluator'}"}}
{"image": "images/000120.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000121.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000122.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000123.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000124.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000125.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 3\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 1.\\nIsland at coordinates (4, 0) has number 2.\\nIsland at coordinates (4, 2) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(4,0)-(4,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 0, \"y\": 0, \"num\": 1}], \"bridges\": [{\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000126.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000127.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000128.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000129.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000130.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000131.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 6x6\\n- Total grid cells: 36\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 5)\\n- Y increases from top to bottom (rows: 0 to 5)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 2.\\nIsland at coordinates (5, 0) has number 3.\\nIsland at coordinates (4, 2) has number 1.\\nIsland at coordinates (5, 2) has number 3.\\nIsland at coordinates (2, 5) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(5,0):1\\n(2,0)-(2,5):1\\n(4,2)-(5,2):1\\n(5,0)-(5,2):2", "system": "{\"islands\": [{\"x\": 5, \"y\": 2, \"num\": 3}, {\"x\": 2, \"y\": 5, \"num\": 1}, {\"x\": 2, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 1}, {\"x\": 5, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [4, 2], \"to\": [5, 2], \"count\": 1}, {\"from\": [5, 0], \"to\": [5, 2], \"count\": 2}, {\"from\": [2, 0], \"to\": [5, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 5], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000132.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000133.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000134.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000135.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000136.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000137.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 5x5\\n- Total grid cells: 25\\n- Number of islands: 5\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 4)\\n- Y increases from top to bottom (rows: 0 to 4)\\n\\n**Islands distribution:**\\nIsland at coordinates (2, 0) has number 3.\\nIsland at coordinates (4, 0) has number 1.\\nIsland at coordinates (3, 1) has number 1.\\nIsland at coordinates (2, 2) has number 3.\\nIsland at coordinates (3, 2) has number 2.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(2,0)-(4,0):1\\n(2,0)-(2,2):2\\n(2,2)-(3,2):1\\n(3,1)-(3,2):1", "system": "{\"islands\": [{\"x\": 4, \"y\": 0, \"num\": 1}, {\"x\": 2, \"y\": 2, \"num\": 3}, {\"x\": 3, \"y\": 1, \"num\": 1}, {\"x\": 3, \"y\": 2, \"num\": 2}, {\"x\": 2, \"y\": 0, \"num\": 3}], \"bridges\": [{\"from\": [2, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [2, 0], \"to\": [2, 2], \"count\": 2}, {\"from\": [2, 2], \"to\": [3, 2], \"count\": 1}, {\"from\": [3, 1], \"to\": [3, 2], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000138.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000139.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000140.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000141.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000142.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000143.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 8x8\\n- Total grid cells: 64\\n- Number of islands: 7\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 7)\\n- Y increases from top to bottom (rows: 0 to 7)\\n\\n**Islands distribution:**\\nIsland at coordinates (1, 1) has number 2.\\nIsland at coordinates (4, 1) has number 3.\\nIsland at coordinates (7, 1) has number 1.\\nIsland at coordinates (4, 2) has number 3.\\nIsland at coordinates (1, 5) has number 1.\\nIsland at coordinates (4, 5) has number 3.\\nIsland at coordinates (4, 6) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(1,1)-(1,5):1\\n(1,1)-(4,1):1\\n(4,1)-(4,2):1\\n(4,1)-(7,1):1\\n(4,2)-(4,5):2\\n(4,5)-(4,6):1", "system": "{\"islands\": [{\"x\": 1, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 2, \"num\": 3}, {\"x\": 4, \"y\": 5, \"num\": 3}, {\"x\": 4, \"y\": 1, \"num\": 3}, {\"x\": 7, \"y\": 1, \"num\": 1}, {\"x\": 1, \"y\": 5, \"num\": 1}, {\"x\": 4, \"y\": 6, \"num\": 1}], \"bridges\": [{\"from\": [1, 1], \"to\": [1, 5], \"count\": 1}, {\"from\": [1, 1], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 2], \"count\": 1}, {\"from\": [4, 2], \"to\": [4, 5], \"count\": 2}, {\"from\": [4, 1], \"to\": [7, 1], \"count\": 1}, {\"from\": [4, 5], \"to\": [4, 6], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000144.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000145.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000146.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000147.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000148.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000149.png", "question": "# Bridges Puzzle\\n\\nPlease refer to the initial_state provided below for this Bridges puzzle (Hashiwokakero). In this puzzle, you need to connect all numbered \"islands\" using horizontal/vertical bridges.\\n\\n**Grid Information:**\\n- Grid size: 9x9\\n- Total grid cells: 81\\n- Number of islands: 8\\n\\n**Rules to follow:**\\n1. Each island displays a number indicating how many bridges must connect to it\\n2. Bridges can only run horizontally or vertically between islands\\n3. Bridges cannot cross other bridges or islands\\n4. At most 2 bridges can connect any pair of islands\\n5. All islands must form a single connected network\\n\\n**Coordinate system:**\\n- The grid uses (x,y) coordinates starting from (0,0) in the top-left corner\\n- X increases from left to right (columns: 0 to 8)\\n- Y increases from top to bottom (rows: 0 to 8)\\n\\n**Islands distribution:**\\nIsland at coordinates (0, 0) has number 2.\\nIsland at coordinates (4, 0) has number 3.\\nIsland at coordinates (8, 0) has number 2.\\nIsland at coordinates (4, 1) has number 2.\\nIsland at coordinates (1, 3) has number 2.\\nIsland at coordinates (4, 3) has number 3.\\nIsland at coordinates (8, 5) has number 1.\\nIsland at coordinates (0, 7) has number 1.\\n\\n**Answer format:**\\nProvide your solution with each bridge connection in the format:\\n(x1,y1)-(x2,y2):count\\n\\nFor example:\\n(0,4)-(2,4):1\\n(2,1)-(2,4):1\\n(2,4)-(4,4):1\\n\\nPlease solve the puzzle and provide your solution.", "answer": "(0,0)-(4,0):1\\n(0,0)-(0,7):1\\n(1,3)-(4,3):2\\n(4,0)-(8,0):1\\n(4,0)-(4,1):1\\n(4,1)-(4,3):1\\n(8,0)-(8,5):1", "system": "{\"islands\": [{\"x\": 8, \"y\": 5, \"num\": 1}, {\"x\": 8, \"y\": 0, \"num\": 2}, {\"x\": 0, \"y\": 7, \"num\": 1}, {\"x\": 1, \"y\": 3, \"num\": 2}, {\"x\": 0, \"y\": 0, \"num\": 2}, {\"x\": 4, \"y\": 1, \"num\": 2}, {\"x\": 4, \"y\": 0, \"num\": 3}, {\"x\": 4, \"y\": 3, \"num\": 3}], \"bridges\": [{\"from\": [8, 0], \"to\": [8, 5], \"count\": 1}, {\"from\": [4, 0], \"to\": [8, 0], \"count\": 1}, {\"from\": [4, 0], \"to\": [4, 1], \"count\": 1}, {\"from\": [4, 1], \"to\": [4, 3], \"count\": 1}, {\"from\": [1, 3], \"to\": [4, 3], \"count\": 2}, {\"from\": [0, 0], \"to\": [4, 0], \"count\": 1}, {\"from\": [0, 0], \"to\": [0, 7], \"count\": 1}]}", "category": "bridges", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'bridges_evaluator'}"}}
{"image": "images/000150.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (2,3), (3,3), (3,2): 12×\\nRegion at (1,2), (1,3), (1,1): 6×\\nRegion at (2,1), (3,1), (2,2): 3×\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1], [3, 1, 2], [1, 2, 3]]", "system": "{'size': 3, 'regions': [{'cells': [[2, 3], [3, 3], [3, 2]], 'operator': '*', 'target': 12}, {'cells': [[1, 2], [1, 3], [1, 1]], 'operator': '*', 'target': 6}, {'cells': [[2, 1], [3, 1], [2, 2]], 'operator': '*', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000151.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,1), (1,2): 6×\\nRegion at (3,2), (3,1), (2,2): 5+\\nRegion at (1,3), (2,3): 3×\\nRegion at (3,3): 2+\\nRegion at (2,1): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 1], [2, 1, 3], [1, 3, 2]]", "system": "{'size': 3, 'regions': [{'cells': [[1, 1], [1, 2]], 'operator': '*', 'target': 6}, {'cells': [[3, 2], [3, 1], [2, 2]], 'operator': '+', 'target': 5}, {'cells': [[1, 3], [2, 3]], 'operator': '*', 'target': 3}, {'cells': [[3, 3]], 'operator': '+', 'target': 2}, {'cells': [[2, 1]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000152.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,1), (2,1), (3,1): 6×\\nRegion at (2,2), (3,2), (2,3): 6×\\nRegion at (1,3), (1,2): 2÷\\nRegion at (3,3): 3+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 1], [1, 3, 2], [2, 1, 3]]", "system": "{'size': 3, 'regions': [{'cells': [[1, 1], [2, 1], [3, 1]], 'operator': '*', 'target': 6}, {'cells': [[2, 2], [3, 2], [2, 3]], 'operator': '*', 'target': 6}, {'cells': [[1, 3], [1, 2]], 'operator': '÷', 'target': 2}, {'cells': [[3, 3]], 'operator': '+', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000153.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,3), (2,3): 5+\\nRegion at (1,3), (1,2): 3÷\\nRegion at (3,1), (2,1), (3,2): 6+\\nRegion at (1,1): 2+\\nRegion at (2,2): 1+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1], [3, 1, 2], [1, 2, 3]]", "system": "{'size': 3, 'regions': [{'cells': [[3, 3], [2, 3]], 'operator': '+', 'target': 5}, {'cells': [[1, 3], [1, 2]], 'operator': '÷', 'target': 3}, {'cells': [[3, 1], [2, 1], [3, 2]], 'operator': '+', 'target': 6}, {'cells': [[1, 1]], 'operator': '+', 'target': 2}, {'cells': [[2, 2]], 'operator': '+', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000154.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,1), (3,2), (2,2): 6×\\nRegion at (2,1), (1,1): 3+\\nRegion at (1,2), (1,3), (2,3): 7+\\nRegion at (3,3): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1], [1, 2, 3], [3, 1, 2]]", "system": "{'size': 3, 'regions': [{'cells': [[3, 1], [3, 2], [2, 2]], 'operator': '*', 'target': 6}, {'cells': [[2, 1], [1, 1]], 'operator': '+', 'target': 3}, {'cells': [[1, 2], [1, 3], [2, 3]], 'operator': '+', 'target': 7}, {'cells': [[3, 3]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000155.png", "question": "This is a 3x3 Calcudoku puzzle. Each row and column must contain the numbers 1 to 3 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,1), (2,1): 1-\\nRegion at (3,2), (3,3), (3,1): 6+\\nRegion at (1,3), (2,3), (2,2): 6×\\nRegion at (1,2): 3+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1], [1, 2, 3], [3, 1, 2]]", "system": "{'size': 3, 'regions': [{'cells': [[1, 1], [2, 1]], 'operator': '-', 'target': 1}, {'cells': [[3, 2], [3, 3], [3, 1]], 'operator': '+', 'target': 6}, {'cells': [[1, 3], [2, 3], [2, 2]], 'operator': '*', 'target': 6}, {'cells': [[1, 2]], 'operator': '+', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000156.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,3), (3,4): 6+\\nRegion at (1,2), (1,1), (2,2): 32×\\nRegion at (2,3), (2,4), (1,4): 6+\\nRegion at (4,3), (4,4): 7+\\nRegion at (4,1), (3,1), (4,2): 4+\\nRegion at (2,1): 3+\\nRegion at (3,2): 3+\\nRegion at (1,3): 1+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 2, 1, 3], [3, 4, 2, 1], [1, 3, 4, 2], [2, 1, 3, 4]]", "system": "{'size': 4, 'regions': [{'cells': [[3, 3], [3, 4]], 'operator': '+', 'target': 6}, {'cells': [[1, 2], [1, 1], [2, 2]], 'operator': '*', 'target': 32}, {'cells': [[2, 3], [2, 4], [1, 4]], 'operator': '+', 'target': 6}, {'cells': [[4, 3], [4, 4]], 'operator': '+', 'target': 7}, {'cells': [[4, 1], [3, 1], [4, 2]], 'operator': '+', 'target': 4}, {'cells': [[2, 1]], 'operator': '+', 'target': 3}, {'cells': [[3, 2]], 'operator': '+', 'target': 3}, {'cells': [[1, 3]], 'operator': '+', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000157.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,1), (4,1): 2÷\\nRegion at (1,4), (1,3), (1,2), (1,1): 24×\\nRegion at (3,4), (4,4): 1-\\nRegion at (4,3), (4,2), (3,3), (2,3): 24×\\nRegion at (3,2), (2,2), (2,1): 3×\\nRegion at (2,4): 4+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 4, 1], [1, 3, 2, 4], [4, 1, 3, 2], [2, 4, 1, 3]]", "system": "{'size': 4, 'regions': [{'cells': [[3, 1], [4, 1]], 'operator': '÷', 'target': 2}, {'cells': [[1, 4], [1, 3], [1, 2], [1, 1]], 'operator': '*', 'target': 24}, {'cells': [[3, 4], [4, 4]], 'operator': '-', 'target': 1}, {'cells': [[4, 3], [4, 2], [3, 3], [2, 3]], 'operator': '*', 'target': 24}, {'cells': [[3, 2], [2, 2], [2, 1]], 'operator': '*', 'target': 3}, {'cells': [[2, 4]], 'operator': '+', 'target': 4}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000158.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (4,4), (4,3), (4,2): 7+\\nRegion at (1,2), (1,3), (2,2), (1,1): 12+\\nRegion at (3,1), (3,2), (2,1), (4,1): 12×\\nRegion at (2,4), (2,3): 3÷\\nRegion at (1,4): 2+\\nRegion at (3,3), (3,4): 1-\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 3, 1, 2], [2, 4, 3, 1], [1, 2, 4, 3], [3, 1, 2, 4]]", "system": "{'size': 4, 'regions': [{'cells': [[4, 4], [4, 3], [4, 2]], 'operator': '+', 'target': 7}, {'cells': [[1, 2], [1, 3], [2, 2], [1, 1]], 'operator': '+', 'target': 12}, {'cells': [[3, 1], [3, 2], [2, 1], [4, 1]], 'operator': '*', 'target': 12}, {'cells': [[2, 4], [2, 3]], 'operator': '÷', 'target': 3}, {'cells': [[1, 4]], 'operator': '+', 'target': 2}, {'cells': [[3, 3], [3, 4]], 'operator': '-', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000159.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (2,3), (2,2), (3,2), (3,1): 64×\\nRegion at (1,1), (2,1), (1,2): 6+\\nRegion at (1,4), (1,3): 3-\\nRegion at (3,3), (4,3), (4,2), (4,1): 36×\\nRegion at (2,4), (3,4): 4+\\nRegion at (4,4): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1, 4], [1, 4, 2, 3], [4, 2, 3, 1], [3, 1, 4, 2]]", "system": "{'size': 4, 'regions': [{'cells': [[2, 3], [2, 2], [3, 2], [3, 1]], 'operator': '*', 'target': 64}, {'cells': [[1, 1], [2, 1], [1, 2]], 'operator': '+', 'target': 6}, {'cells': [[1, 4], [1, 3]], 'operator': '-', 'target': 3}, {'cells': [[3, 3], [4, 3], [4, 2], [4, 1]], 'operator': '*', 'target': 36}, {'cells': [[2, 4], [3, 4]], 'operator': '+', 'target': 4}, {'cells': [[4, 4]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000160.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,3), (3,4), (2,3), (2,4): 72×\\nRegion at (4,2), (4,1), (3,1), (2,1): 12×\\nRegion at (2,2), (1,2): 7+\\nRegion at (4,3), (4,4): 3-\\nRegion at (1,3), (1,4): 1-\\nRegion at (3,2): 1+\\nRegion at (1,1): 4+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 3, 2, 1], [1, 4, 3, 2], [2, 1, 4, 3], [3, 2, 1, 4]]", "system": "{'size': 4, 'regions': [{'cells': [[3, 3], [3, 4], [2, 3], [2, 4]], 'operator': '*', 'target': 72}, {'cells': [[4, 2], [4, 1], [3, 1], [2, 1]], 'operator': '*', 'target': 12}, {'cells': [[2, 2], [1, 2]], 'operator': '+', 'target': 7}, {'cells': [[4, 3], [4, 4]], 'operator': '-', 'target': 3}, {'cells': [[1, 3], [1, 4]], 'operator': '-', 'target': 1}, {'cells': [[3, 2]], 'operator': '+', 'target': 1}, {'cells': [[1, 1]], 'operator': '+', 'target': 4}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000161.png", "question": "This is a 4x4 Calcudoku puzzle. Each row and column must contain the numbers 1 to 4 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (4,1), (3,1), (3,2): 8×\\nRegion at (1,3), (1,2): 2÷\\nRegion at (4,2), (4,3): 4×\\nRegion at (3,4), (4,4): 1-\\nRegion at (1,4), (2,4), (2,3): 8×\\nRegion at (2,1), (2,2), (1,1): 10+\\nRegion at (3,3): 3+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 1, 4], [4, 3, 2, 1], [1, 4, 3, 2], [2, 1, 4, 3]]", "system": "{'size': 4, 'regions': [{'cells': [[4, 1], [3, 1], [3, 2]], 'operator': '*', 'target': 8}, {'cells': [[1, 3], [1, 2]], 'operator': '÷', 'target': 2}, {'cells': [[4, 2], [4, 3]], 'operator': '*', 'target': 4}, {'cells': [[3, 4], [4, 4]], 'operator': '-', 'target': 1}, {'cells': [[1, 4], [2, 4], [2, 3]], 'operator': '*', 'target': 8}, {'cells': [[2, 1], [2, 2], [1, 1]], 'operator': '+', 'target': 10}, {'cells': [[3, 3]], 'operator': '+', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000162.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (5,3), (5,4): 1-\\nRegion at (1,5), (1,4), (1,3), (2,3): 24×\\nRegion at (3,5), (3,4), (4,4), (4,5): 10×\\nRegion at (2,4), (2,5): 7+\\nRegion at (2,1), (1,1): 7+\\nRegion at (3,1), (3,2): 1-\\nRegion at (3,3), (4,3), (4,2): 40×\\nRegion at (5,2), (5,1): 2÷\\nRegion at (2,2), (1,2): 4-\\nRegion at (5,5): 5+\\nRegion at (4,1): 3+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 1, 4, 2, 3], [2, 5, 1, 3, 4], [4, 3, 5, 1, 2], [3, 4, 2, 5, 1], [1, 2, 3, 4, 5]]", "system": "{'size': 5, 'regions': [{'cells': [[5, 3], [5, 4]], 'operator': '-', 'target': 1}, {'cells': [[1, 5], [1, 4], [1, 3], [2, 3]], 'operator': '*', 'target': 24}, {'cells': [[3, 5], [3, 4], [4, 4], [4, 5]], 'operator': '*', 'target': 10}, {'cells': [[2, 4], [2, 5]], 'operator': '+', 'target': 7}, {'cells': [[2, 1], [1, 1]], 'operator': '+', 'target': 7}, {'cells': [[3, 1], [3, 2]], 'operator': '-', 'target': 1}, {'cells': [[3, 3], [4, 3], [4, 2]], 'operator': '*', 'target': 40}, {'cells': [[5, 2], [5, 1]], 'operator': '÷', 'target': 2}, {'cells': [[2, 2], [1, 2]], 'operator': '-', 'target': 4}, {'cells': [[5, 5]], 'operator': '+', 'target': 5}, {'cells': [[4, 1]], 'operator': '+', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000163.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (4,2), (4,1), (5,1): 13+\\nRegion at (3,5), (4,5), (4,4), (5,5): 10+\\nRegion at (2,1), (1,1), (3,1): 6×\\nRegion at (2,3), (3,3), (3,2): 10+\\nRegion at (5,2), (5,3): 2÷\\nRegion at (3,4), (2,4), (2,5): 60×\\nRegion at (4,3): 3+\\nRegion at (1,2), (2,2): 6×\\nRegion at (5,4): 3+\\nRegion at (1,3), (1,4): 6+\\nRegion at (1,5): 4+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 5, 1, 4], [1, 2, 4, 5, 3], [3, 5, 1, 4, 2], [5, 4, 3, 2, 1], [4, 1, 2, 3, 5]]", "system": "{'size': 5, 'regions': [{'cells': [[4, 2], [4, 1], [5, 1]], 'operator': '+', 'target': 13}, {'cells': [[3, 5], [4, 5], [4, 4], [5, 5]], 'operator': '+', 'target': 10}, {'cells': [[2, 1], [1, 1], [3, 1]], 'operator': '*', 'target': 6}, {'cells': [[2, 3], [3, 3], [3, 2]], 'operator': '+', 'target': 10}, {'cells': [[5, 2], [5, 3]], 'operator': '÷', 'target': 2}, {'cells': [[3, 4], [2, 4], [2, 5]], 'operator': '*', 'target': 60}, {'cells': [[4, 3]], 'operator': '+', 'target': 3}, {'cells': [[1, 2], [2, 2]], 'operator': '*', 'target': 6}, {'cells': [[5, 4]], 'operator': '+', 'target': 3}, {'cells': [[1, 3], [1, 4]], 'operator': '+', 'target': 6}, {'cells': [[1, 5]], 'operator': '+', 'target': 4}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000164.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (5,5), (4,5): 4-\\nRegion at (4,1), (3,1), (2,1), (3,2): 10+\\nRegion at (5,4), (4,4): 2-\\nRegion at (3,5), (2,5), (1,5), (3,4): 11+\\nRegion at (4,2), (4,3), (5,2), (3,3): 14+\\nRegion at (2,4), (1,4): 20×\\nRegion at (5,1): 3+\\nRegion at (1,1), (1,2), (1,3), (2,2): 60×\\nRegion at (2,3): 1+\\nRegion at (5,3): 4+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 1, 3, 4, 2], [2, 4, 1, 5, 3], [1, 3, 5, 2, 4], [4, 5, 2, 3, 1], [3, 2, 4, 1, 5]]", "system": "{'size': 5, 'regions': [{'cells': [[5, 5], [4, 5]], 'operator': '-', 'target': 4}, {'cells': [[4, 1], [3, 1], [2, 1], [3, 2]], 'operator': '+', 'target': 10}, {'cells': [[5, 4], [4, 4]], 'operator': '-', 'target': 2}, {'cells': [[3, 5], [2, 5], [1, 5], [3, 4]], 'operator': '+', 'target': 11}, {'cells': [[4, 2], [4, 3], [5, 2], [3, 3]], 'operator': '+', 'target': 14}, {'cells': [[2, 4], [1, 4]], 'operator': '*', 'target': 20}, {'cells': [[5, 1]], 'operator': '+', 'target': 3}, {'cells': [[1, 1], [1, 2], [1, 3], [2, 2]], 'operator': '*', 'target': 60}, {'cells': [[2, 3]], 'operator': '+', 'target': 1}, {'cells': [[5, 3]], 'operator': '+', 'target': 4}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000165.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (2,5), (1,5), (2,4), (3,5): 14+\\nRegion at (2,1), (2,2), (1,2): 60×\\nRegion at (4,2), (4,1), (3,1): 60×\\nRegion at (1,1): 1+\\nRegion at (5,1), (5,2), (5,3): 7+\\nRegion at (1,4), (1,3): 7+\\nRegion at (3,3), (4,3): 1-\\nRegion at (2,3): 1+\\nRegion at (3,4), (4,4), (5,4): 10+\\nRegion at (3,2): 2+\\nRegion at (5,5), (4,5): 3÷\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 3, 5, 2, 4], [5, 4, 1, 3, 2], [4, 2, 3, 1, 5], [3, 5, 2, 4, 1], [2, 1, 4, 5, 3]]", "system": "{'size': 5, 'regions': [{'cells': [[2, 5], [1, 5], [2, 4], [3, 5]], 'operator': '+', 'target': 14}, {'cells': [[2, 1], [2, 2], [1, 2]], 'operator': '*', 'target': 60}, {'cells': [[4, 2], [4, 1], [3, 1]], 'operator': '*', 'target': 60}, {'cells': [[1, 1]], 'operator': '+', 'target': 1}, {'cells': [[5, 1], [5, 2], [5, 3]], 'operator': '+', 'target': 7}, {'cells': [[1, 4], [1, 3]], 'operator': '+', 'target': 7}, {'cells': [[3, 3], [4, 3]], 'operator': '-', 'target': 1}, {'cells': [[2, 3]], 'operator': '+', 'target': 1}, {'cells': [[3, 4], [4, 4], [5, 4]], 'operator': '+', 'target': 10}, {'cells': [[3, 2]], 'operator': '+', 'target': 2}, {'cells': [[5, 5], [4, 5]], 'operator': '÷', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000166.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,1), (1,2): 1-\\nRegion at (2,1), (3,1), (2,2): 10×\\nRegion at (4,4), (4,3), (5,3), (3,4): 60×\\nRegion at (4,5), (5,5): 3+\\nRegion at (3,2), (4,2): 8+\\nRegion at (4,1), (5,1), (5,2): 11+\\nRegion at (3,3), (2,3), (2,4), (1,3): 12+\\nRegion at (1,4), (1,5), (2,5), (3,5): 17+\\nRegion at (5,4): 1+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 1, 3, 5, 4], [5, 2, 1, 4, 3], [1, 3, 4, 2, 5], [4, 5, 2, 3, 1], [3, 4, 5, 1, 2]]", "system": "{'size': 5, 'regions': [{'cells': [[1, 1], [1, 2]], 'operator': '-', 'target': 1}, {'cells': [[2, 1], [3, 1], [2, 2]], 'operator': '*', 'target': 10}, {'cells': [[4, 4], [4, 3], [5, 3], [3, 4]], 'operator': '*', 'target': 60}, {'cells': [[4, 5], [5, 5]], 'operator': '+', 'target': 3}, {'cells': [[3, 2], [4, 2]], 'operator': '+', 'target': 8}, {'cells': [[4, 1], [5, 1], [5, 2]], 'operator': '+', 'target': 11}, {'cells': [[3, 3], [2, 3], [2, 4], [1, 3]], 'operator': '+', 'target': 12}, {'cells': [[1, 4], [1, 5], [2, 5], [3, 5]], 'operator': '+', 'target': 17}, {'cells': [[5, 4]], 'operator': '+', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000167.png", "question": "This is a 5x5 Calcudoku puzzle. Each row and column must contain the numbers 1 to 5 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (5,1), (5,2), (4,1): 10×\\nRegion at (5,3), (4,3): 2-\\nRegion at (5,5), (5,4), (4,5): 9+\\nRegion at (1,1), (1,2), (1,3), (2,2): 11+\\nRegion at (3,3), (3,4), (2,4), (2,5): 12+\\nRegion at (4,2), (3,2): 1-\\nRegion at (1,5), (1,4): 1-\\nRegion at (2,3): 3+\\nRegion at (3,1), (2,1): 5+\\nRegion at (4,4): 3+\\nRegion at (3,5): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 1, 4, 5], [1, 5, 3, 2, 4], [4, 3, 5, 1, 2], [5, 4, 2, 3, 1], [2, 1, 4, 5, 3]]", "system": "{'size': 5, 'regions': [{'cells': [[5, 1], [5, 2], [4, 1]], 'operator': '*', 'target': 10}, {'cells': [[5, 3], [4, 3]], 'operator': '-', 'target': 2}, {'cells': [[5, 5], [5, 4], [4, 5]], 'operator': '+', 'target': 9}, {'cells': [[1, 1], [1, 2], [1, 3], [2, 2]], 'operator': '+', 'target': 11}, {'cells': [[3, 3], [3, 4], [2, 4], [2, 5]], 'operator': '+', 'target': 12}, {'cells': [[4, 2], [3, 2]], 'operator': '-', 'target': 1}, {'cells': [[1, 5], [1, 4]], 'operator': '-', 'target': 1}, {'cells': [[2, 3]], 'operator': '+', 'target': 3}, {'cells': [[3, 1], [2, 1]], 'operator': '+', 'target': 5}, {'cells': [[4, 4]], 'operator': '+', 'target': 3}, {'cells': [[3, 5]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000168.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (4,1), (5,1), (6,1): 8+\\nRegion at (2,1), (2,2), (1,1), (3,2): 18+\\nRegion at (4,2), (5,2), (6,2), (6,3): 60×\\nRegion at (6,4), (5,4), (4,4): 12+\\nRegion at (1,2), (1,3), (1,4), (1,5): 24×\\nRegion at (5,3), (4,3), (3,3): 11+\\nRegion at (5,5), (6,5), (4,5): 60×\\nRegion at (2,5), (2,4), (3,4): 12+\\nRegion at (3,5), (3,6), (2,6), (1,6): 72×\\nRegion at (2,3): 1+\\nRegion at (3,1): 6+\\nRegion at (5,6), (6,6): 3+\\nRegion at (4,6): 5+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 2, 4, 1, 3, 6], [2, 6, 1, 5, 4, 3], [6, 5, 2, 3, 1, 4], [3, 1, 6, 4, 2, 5], [1, 4, 3, 6, 5, 2], [4, 3, 5, 2, 6, 1]]", "system": "{'size': 6, 'regions': [{'cells': [[4, 1], [5, 1], [6, 1]], 'operator': '+', 'target': 8}, {'cells': [[2, 1], [2, 2], [1, 1], [3, 2]], 'operator': '+', 'target': 18}, {'cells': [[4, 2], [5, 2], [6, 2], [6, 3]], 'operator': '*', 'target': 60}, {'cells': [[6, 4], [5, 4], [4, 4]], 'operator': '+', 'target': 12}, {'cells': [[1, 2], [1, 3], [1, 4], [1, 5]], 'operator': '*', 'target': 24}, {'cells': [[5, 3], [4, 3], [3, 3]], 'operator': '+', 'target': 11}, {'cells': [[5, 5], [6, 5], [4, 5]], 'operator': '*', 'target': 60}, {'cells': [[2, 5], [2, 4], [3, 4]], 'operator': '+', 'target': 12}, {'cells': [[3, 5], [3, 6], [2, 6], [1, 6]], 'operator': '*', 'target': 72}, {'cells': [[2, 3]], 'operator': '+', 'target': 1}, {'cells': [[3, 1]], 'operator': '+', 'target': 6}, {'cells': [[5, 6], [6, 6]], 'operator': '+', 'target': 3}, {'cells': [[4, 6]], 'operator': '+', 'target': 5}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000169.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (5,3), (4,3), (6,3): 10+\\nRegion at (2,2), (2,1), (3,2), (4,2): 19+\\nRegion at (3,6), (3,5), (4,5), (4,6): 18+\\nRegion at (1,6), (2,6), (1,5), (2,5): 10+\\nRegion at (6,2), (6,1), (5,1): 6+\\nRegion at (5,2): 4+\\nRegion at (1,4), (2,4), (2,3), (3,3): 13+\\nRegion at (5,4), (5,5): 7+\\nRegion at (1,1), (1,2), (1,3): 13+\\nRegion at (6,6), (6,5), (6,4): 15+\\nRegion at (3,4), (4,4): 5+\\nRegion at (3,1), (4,1): 3-\\nRegion at (5,6): 1+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[6, 2, 5, 1, 4, 3], [5, 3, 4, 6, 1, 2], [1, 5, 2, 3, 6, 4], [4, 6, 1, 2, 3, 5], [3, 4, 6, 5, 2, 1], [2, 1, 3, 4, 5, 6]]", "system": "{'size': 6, 'regions': [{'cells': [[5, 3], [4, 3], [6, 3]], 'operator': '+', 'target': 10}, {'cells': [[2, 2], [2, 1], [3, 2], [4, 2]], 'operator': '+', 'target': 19}, {'cells': [[3, 6], [3, 5], [4, 5], [4, 6]], 'operator': '+', 'target': 18}, {'cells': [[1, 6], [2, 6], [1, 5], [2, 5]], 'operator': '+', 'target': 10}, {'cells': [[6, 2], [6, 1], [5, 1]], 'operator': '+', 'target': 6}, {'cells': [[5, 2]], 'operator': '+', 'target': 4}, {'cells': [[1, 4], [2, 4], [2, 3], [3, 3]], 'operator': '+', 'target': 13}, {'cells': [[5, 4], [5, 5]], 'operator': '+', 'target': 7}, {'cells': [[1, 1], [1, 2], [1, 3]], 'operator': '+', 'target': 13}, {'cells': [[6, 6], [6, 5], [6, 4]], 'operator': '+', 'target': 15}, {'cells': [[3, 4], [4, 4]], 'operator': '+', 'target': 5}, {'cells': [[3, 1], [4, 1]], 'operator': '-', 'target': 3}, {'cells': [[5, 6]], 'operator': '+', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000170.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (4,2), (5,2), (6,2): 15×\\nRegion at (4,6), (4,5), (5,5), (3,5): 12+\\nRegion at (1,1), (2,1), (3,1): 7+\\nRegion at (6,3), (6,4): 2-\\nRegion at (4,1), (5,1), (6,1): 14+\\nRegion at (3,6), (2,6), (2,5): 17+\\nRegion at (6,5), (6,6), (5,6): 2×\\nRegion at (1,2), (2,2): 2-\\nRegion at (2,3), (3,3): 3÷\\nRegion at (1,4), (1,3), (1,5), (1,6): 14+\\nRegion at (2,4), (3,4), (4,4), (4,3): 13+\\nRegion at (5,4), (5,3): 24×\\nRegion at (3,2): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 6, 2, 3, 5, 4], [2, 4, 3, 1, 6, 5], [4, 2, 1, 5, 3, 6], [6, 1, 5, 2, 4, 3], [3, 5, 6, 4, 2, 1], [5, 3, 4, 6, 1, 2]]", "system": "{'size': 6, 'regions': [{'cells': [[4, 2], [5, 2], [6, 2]], 'operator': '*', 'target': 15}, {'cells': [[4, 6], [4, 5], [5, 5], [3, 5]], 'operator': '+', 'target': 12}, {'cells': [[1, 1], [2, 1], [3, 1]], 'operator': '+', 'target': 7}, {'cells': [[6, 3], [6, 4]], 'operator': '-', 'target': 2}, {'cells': [[4, 1], [5, 1], [6, 1]], 'operator': '+', 'target': 14}, {'cells': [[3, 6], [2, 6], [2, 5]], 'operator': '+', 'target': 17}, {'cells': [[6, 5], [6, 6], [5, 6]], 'operator': '*', 'target': 2}, {'cells': [[1, 2], [2, 2]], 'operator': '-', 'target': 2}, {'cells': [[2, 3], [3, 3]], 'operator': '÷', 'target': 3}, {'cells': [[1, 4], [1, 3], [1, 5], [1, 6]], 'operator': '+', 'target': 14}, {'cells': [[2, 4], [3, 4], [4, 4], [4, 3]], 'operator': '+', 'target': 13}, {'cells': [[5, 4], [5, 3]], 'operator': '*', 'target': 24}, {'cells': [[3, 2]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000171.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,5), (3,6), (4,5), (2,5): 30×\\nRegion at (5,6), (4,6), (6,6), (5,5): 18+\\nRegion at (4,4), (5,4), (6,4): 12×\\nRegion at (6,1), (6,2): 3-\\nRegion at (2,2), (3,2), (1,2), (4,2): 18+\\nRegion at (5,2), (5,3), (4,3), (5,1): 15+\\nRegion at (2,1), (3,1), (1,1), (4,1): 36×\\nRegion at (2,3), (2,4), (3,4): 13+\\nRegion at (1,4), (1,5), (1,6), (2,6): 13+\\nRegion at (3,3): 4+\\nRegion at (6,5): 2+\\nRegion at (6,3): 6+\\nRegion at (1,3): 1+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[6, 5, 1, 2, 4, 3], [3, 6, 2, 5, 1, 4], [1, 3, 4, 6, 5, 2], [2, 4, 5, 1, 3, 6], [5, 2, 3, 4, 6, 1], [4, 1, 6, 3, 2, 5]]", "system": "{'size': 6, 'regions': [{'cells': [[3, 5], [3, 6], [4, 5], [2, 5]], 'operator': '*', 'target': 30}, {'cells': [[5, 6], [4, 6], [6, 6], [5, 5]], 'operator': '+', 'target': 18}, {'cells': [[4, 4], [5, 4], [6, 4]], 'operator': '*', 'target': 12}, {'cells': [[6, 1], [6, 2]], 'operator': '-', 'target': 3}, {'cells': [[2, 2], [3, 2], [1, 2], [4, 2]], 'operator': '+', 'target': 18}, {'cells': [[5, 2], [5, 3], [4, 3], [5, 1]], 'operator': '+', 'target': 15}, {'cells': [[2, 1], [3, 1], [1, 1], [4, 1]], 'operator': '*', 'target': 36}, {'cells': [[2, 3], [2, 4], [3, 4]], 'operator': '+', 'target': 13}, {'cells': [[1, 4], [1, 5], [1, 6], [2, 6]], 'operator': '+', 'target': 13}, {'cells': [[3, 3]], 'operator': '+', 'target': 4}, {'cells': [[6, 5]], 'operator': '+', 'target': 2}, {'cells': [[6, 3]], 'operator': '+', 'target': 6}, {'cells': [[1, 3]], 'operator': '+', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000172.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (6,6), (6,5), (5,5), (6,4): 16+\\nRegion at (1,5), (1,4): 5×\\nRegion at (2,6), (3,6): 1-\\nRegion at (1,2), (2,2), (1,3): 13+\\nRegion at (2,1), (1,1), (3,1), (4,1): 40×\\nRegion at (4,5), (4,4), (3,4): 10+\\nRegion at (6,3), (6,2), (6,1): 15×\\nRegion at (4,2), (5,2), (4,3): 8×\\nRegion at (4,6), (5,6): 3×\\nRegion at (5,1): 6+\\nRegion at (3,3), (3,2), (2,3): 36×\\nRegion at (5,3), (5,4): 3-\\nRegion at (3,5), (2,5), (2,4): 90×\\nRegion at (1,6): 2+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 6, 3, 5, 1, 2], [1, 4, 2, 6, 3, 5], [2, 3, 6, 1, 5, 4], [5, 2, 4, 3, 6, 1], [6, 1, 5, 2, 4, 3], [3, 5, 1, 4, 2, 6]]", "system": "{'size': 6, 'regions': [{'cells': [[6, 6], [6, 5], [5, 5], [6, 4]], 'operator': '+', 'target': 16}, {'cells': [[1, 5], [1, 4]], 'operator': '*', 'target': 5}, {'cells': [[2, 6], [3, 6]], 'operator': '-', 'target': 1}, {'cells': [[1, 2], [2, 2], [1, 3]], 'operator': '+', 'target': 13}, {'cells': [[2, 1], [1, 1], [3, 1], [4, 1]], 'operator': '*', 'target': 40}, {'cells': [[4, 5], [4, 4], [3, 4]], 'operator': '+', 'target': 10}, {'cells': [[6, 3], [6, 2], [6, 1]], 'operator': '*', 'target': 15}, {'cells': [[4, 2], [5, 2], [4, 3]], 'operator': '*', 'target': 8}, {'cells': [[4, 6], [5, 6]], 'operator': '*', 'target': 3}, {'cells': [[5, 1]], 'operator': '+', 'target': 6}, {'cells': [[3, 3], [3, 2], [2, 3]], 'operator': '*', 'target': 36}, {'cells': [[5, 3], [5, 4]], 'operator': '-', 'target': 3}, {'cells': [[3, 5], [2, 5], [2, 4]], 'operator': '*', 'target': 90}, {'cells': [[1, 6]], 'operator': '+', 'target': 2}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000173.png", "question": "This is a 6x6 Calcudoku puzzle. Each row and column must contain the numbers 1 to 6 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,4), (1,3), (2,3), (2,2): 90×\\nRegion at (3,2), (4,2), (5,2), (5,1): 16+\\nRegion at (2,4), (2,5), (3,4), (3,5): 19+\\nRegion at (4,5), (5,5), (5,4): 8+\\nRegion at (6,5), (6,4): 9+\\nRegion at (1,2), (1,1), (2,1), (3,1): 15+\\nRegion at (3,6), (2,6), (4,6): 8×\\nRegion at (5,6), (6,6): 30×\\nRegion at (4,1): 1+\\nRegion at (3,3), (4,3): 3-\\nRegion at (5,3), (6,3), (6,2): 8×\\nRegion at (4,4): 3+\\nRegion at (6,1): 3+\\nRegion at (1,6), (1,5): 5+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 4, 6, 1, 2, 3], [2, 5, 3, 4, 6, 1], [4, 1, 5, 6, 3, 2], [1, 6, 2, 3, 5, 4], [6, 3, 4, 2, 1, 5], [3, 2, 1, 5, 4, 6]]", "system": "{'size': 6, 'regions': [{'cells': [[1, 4], [1, 3], [2, 3], [2, 2]], 'operator': '*', 'target': 90}, {'cells': [[3, 2], [4, 2], [5, 2], [5, 1]], 'operator': '+', 'target': 16}, {'cells': [[2, 4], [2, 5], [3, 4], [3, 5]], 'operator': '+', 'target': 19}, {'cells': [[4, 5], [5, 5], [5, 4]], 'operator': '+', 'target': 8}, {'cells': [[6, 5], [6, 4]], 'operator': '+', 'target': 9}, {'cells': [[1, 2], [1, 1], [2, 1], [3, 1]], 'operator': '+', 'target': 15}, {'cells': [[3, 6], [2, 6], [4, 6]], 'operator': '*', 'target': 8}, {'cells': [[5, 6], [6, 6]], 'operator': '*', 'target': 30}, {'cells': [[4, 1]], 'operator': '+', 'target': 1}, {'cells': [[3, 3], [4, 3]], 'operator': '-', 'target': 3}, {'cells': [[5, 3], [6, 3], [6, 2]], 'operator': '*', 'target': 8}, {'cells': [[4, 4]], 'operator': '+', 'target': 3}, {'cells': [[6, 1]], 'operator': '+', 'target': 3}, {'cells': [[1, 6], [1, 5]], 'operator': '+', 'target': 5}]}", "category": "Calcudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000174.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (2,4), (1,4), (2,3): 11+\\nRegion at (2,1), (3,1), (4,1), (4,2): 23+\\nRegion at (1,5), (1,6), (2,5): 19+\\nRegion at (6,6), (7,6), (5,6): 70×\\nRegion at (5,1), (5,2): 3÷\\nRegion at (3,5), (4,5), (4,4), (4,3): 15+\\nRegion at (7,7), (7,8): 7÷\\nRegion at (8,2), (7,2): 13+\\nRegion at (3,3), (3,2), (3,4): 11+\\nRegion at (2,2), (1,2), (1,3): 4+\\nRegion at (2,8), (1,8), (2,7): 23+\\nRegion at (4,7), (3,7), (5,7): 20×\\nRegion at (5,8), (4,8), (3,8): 40×\\nRegion at (8,7), (8,8): 3-\\nRegion at (8,4), (8,5), (7,5): 15+\\nRegion at (6,5), (6,4), (6,3): 24×\\nRegion at (6,7), (6,8): 3÷\\nRegion at (8,6): 1+\\nRegion at (6,2), (6,1), (7,1), (8,1): 17+\\nRegion at (5,3), (5,4): 11+\\nRegion at (7,4), (7,3), (8,3): 18+\\nRegion at (4,6), (3,6): 5-\\nRegion at (2,6): 4+\\nRegion at (1,7): 3+\\nRegion at (1,1): 5+\\nRegion at (5,5): 8+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 2, 1, 4, 7, 6, 3, 8], [3, 1, 2, 5, 6, 4, 8, 7], [6, 7, 3, 1, 2, 8, 5, 4], [8, 6, 7, 2, 4, 3, 1, 5], [1, 3, 5, 6, 8, 7, 4, 2], [7, 4, 8, 3, 1, 5, 2, 6], [4, 5, 6, 8, 3, 2, 7, 1], [2, 8, 4, 7, 5, 1, 6, 3]]", "system": "{'size': 8, 'regions': [{'cells': [[2, 4], [1, 4], [2, 3]], 'operator': '+', 'target': 11}, {'cells': [[2, 1], [3, 1], [4, 1], [4, 2]], 'operator': '+', 'target': 23}, {'cells': [[1, 5], [1, 6], [2, 5]], 'operator': '+', 'target': 19}, {'cells': [[6, 6], [7, 6], [5, 6]], 'operator': '*', 'target': 70}, {'cells': [[5, 1], [5, 2]], 'operator': '÷', 'target': 3}, {'cells': [[3, 5], [4, 5], [4, 4], [4, 3]], 'operator': '+', 'target': 15}, {'cells': [[7, 7], [7, 8]], 'operator': '÷', 'target': 7}, {'cells': [[8, 2], [7, 2]], 'operator': '+', 'target': 13}, {'cells': [[3, 3], [3, 2], [3, 4]], 'operator': '+', 'target': 11}, {'cells': [[2, 2], [1, 2], [1, 3]], 'operator': '+', 'target': 4}, {'cells': [[2, 8], [1, 8], [2, 7]], 'operator': '+', 'target': 23}, {'cells': [[4, 7], [3, 7], [5, 7]], 'operator': '*', 'target': 20}, {'cells': [[5, 8], [4, 8], [3, 8]], 'operator': '*', 'target': 40}, {'cells': [[8, 7], [8, 8]], 'operator': '-', 'target': 3}, {'cells': [[8, 4], [8, 5], [7, 5]], 'operator': '+', 'target': 15}, {'cells': [[6, 5], [6, 4], [6, 3]], 'operator': '*', 'target': 24}, {'cells': [[6, 7], [6, 8]], 'operator': '÷', 'target': 3}, {'cells': [[8, 6]], 'operator': '+', 'target': 1}, {'cells': [[6, 2], [6, 1], [7, 1], [8, 1]], 'operator': '+', 'target': 17}, {'cells': [[5, 3], [5, 4]], 'operator': '+', 'target': 11}, {'cells': [[7, 4], [7, 3], [8, 3]], 'operator': '+', 'target': 18}, {'cells': [[4, 6], [3, 6]], 'operator': '-', 'target': 5}, {'cells': [[2, 6]], 'operator': '+', 'target': 4}, {'cells': [[1, 7]], 'operator': '+', 'target': 3}, {'cells': [[1, 1]], 'operator': '+', 'target': 5}, {'cells': [[5, 5]], 'operator': '+', 'target': 8}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000175.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,2), (3,1), (2,2): 19+\\nRegion at (6,3), (7,3), (6,4), (5,4): 20+\\nRegion at (4,6), (4,5): 11+\\nRegion at (3,5), (3,4): 5÷\\nRegion at (8,8), (8,7), (8,6): 14+\\nRegion at (7,5), (7,4), (8,4): 15+\\nRegion at (2,3), (2,4): 5-\\nRegion at (4,7), (3,7), (3,6), (2,7): 16×\\nRegion at (2,6), (2,5): 2-\\nRegion at (1,7), (1,8), (1,6), (1,5): 84×\\nRegion at (8,5): 7+\\nRegion at (1,1), (2,1): 2-\\nRegion at (8,1), (7,1), (8,2): 9+\\nRegion at (5,2), (5,1): 1-\\nRegion at (5,3), (4,3), (3,3), (4,2): 21+\\nRegion at (6,7), (5,7), (5,8), (5,6): 20+\\nRegion at (7,7), (7,6), (6,6): 23+\\nRegion at (4,8), (3,8), (2,8): 10+\\nRegion at (4,1): 6+\\nRegion at (4,4): 4+\\nRegion at (6,5), (5,5): 6÷\\nRegion at (6,2), (7,2), (6,1): 6+\\nRegion at (1,3), (1,4), (1,2): 96×\\nRegion at (8,3): 1+\\nRegion at (7,8), (6,8): 1-\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 8, 2, 6, 3, 1, 7, 4], [7, 5, 8, 3, 4, 6, 1, 2], [8, 6, 3, 1, 5, 2, 4, 7], [6, 7, 5, 4, 8, 3, 2, 1], [2, 3, 6, 7, 1, 4, 5, 8], [1, 4, 7, 2, 6, 8, 3, 5], [3, 1, 4, 5, 2, 7, 8, 6], [4, 2, 1, 8, 7, 5, 6, 3]]", "system": "{'size': 8, 'regions': [{'cells': [[3, 2], [3, 1], [2, 2]], 'operator': '+', 'target': 19}, {'cells': [[6, 3], [7, 3], [6, 4], [5, 4]], 'operator': '+', 'target': 20}, {'cells': [[4, 6], [4, 5]], 'operator': '+', 'target': 11}, {'cells': [[3, 5], [3, 4]], 'operator': '÷', 'target': 5}, {'cells': [[8, 8], [8, 7], [8, 6]], 'operator': '+', 'target': 14}, {'cells': [[7, 5], [7, 4], [8, 4]], 'operator': '+', 'target': 15}, {'cells': [[2, 3], [2, 4]], 'operator': '-', 'target': 5}, {'cells': [[4, 7], [3, 7], [3, 6], [2, 7]], 'operator': '*', 'target': 16}, {'cells': [[2, 6], [2, 5]], 'operator': '-', 'target': 2}, {'cells': [[1, 7], [1, 8], [1, 6], [1, 5]], 'operator': '*', 'target': 84}, {'cells': [[8, 5]], 'operator': '+', 'target': 7}, {'cells': [[1, 1], [2, 1]], 'operator': '-', 'target': 2}, {'cells': [[8, 1], [7, 1], [8, 2]], 'operator': '+', 'target': 9}, {'cells': [[5, 2], [5, 1]], 'operator': '-', 'target': 1}, {'cells': [[5, 3], [4, 3], [3, 3], [4, 2]], 'operator': '+', 'target': 21}, {'cells': [[6, 7], [5, 7], [5, 8], [5, 6]], 'operator': '+', 'target': 20}, {'cells': [[7, 7], [7, 6], [6, 6]], 'operator': '+', 'target': 23}, {'cells': [[4, 8], [3, 8], [2, 8]], 'operator': '+', 'target': 10}, {'cells': [[4, 1]], 'operator': '+', 'target': 6}, {'cells': [[4, 4]], 'operator': '+', 'target': 4}, {'cells': [[6, 5], [5, 5]], 'operator': '÷', 'target': 6}, {'cells': [[6, 2], [7, 2], [6, 1]], 'operator': '+', 'target': 6}, {'cells': [[1, 3], [1, 4], [1, 2]], 'operator': '*', 'target': 96}, {'cells': [[8, 3]], 'operator': '+', 'target': 1}, {'cells': [[7, 8], [6, 8]], 'operator': '-', 'target': 1}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000176.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (3,7), (4,7), (3,8): 12+\\nRegion at (6,7), (6,6), (5,6), (5,7): 21+\\nRegion at (1,3), (1,2), (1,1): 17+\\nRegion at (3,2), (3,1), (2,1): 15+\\nRegion at (8,3), (8,2), (7,2), (8,1): 11+\\nRegion at (8,6), (8,5), (7,5): 11+\\nRegion at (3,3), (4,3): 1-\\nRegion at (3,6), (4,6): 5-\\nRegion at (2,5), (1,5), (1,4): 13+\\nRegion at (1,6), (2,6), (2,7): 5+\\nRegion at (3,5), (3,4), (4,5): 30×\\nRegion at (5,5), (5,4), (6,5): 15+\\nRegion at (6,4), (7,4), (6,3), (7,3): 36×\\nRegion at (8,8), (8,7), (7,8), (7,7): 28+\\nRegion at (5,8), (6,8): 6-\\nRegion at (2,2), (2,3), (2,4): 19+\\nRegion at (1,8), (2,8), (1,7): 12+\\nRegion at (5,3), (5,2), (4,2): 20+\\nRegion at (6,2), (6,1), (7,1): 10+\\nRegion at (4,4): 6+\\nRegion at (7,6): 5+\\nRegion at (4,1), (5,1): 20×\\nRegion at (4,8): 4+\\nRegion at (8,4): 7+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 6, 8, 4, 7, 1, 5, 2], [6, 4, 7, 8, 2, 3, 1, 5], [8, 1, 4, 5, 6, 7, 2, 3], [5, 8, 3, 6, 1, 2, 7, 4], [4, 7, 5, 2, 8, 6, 3, 1], [1, 2, 6, 3, 5, 8, 4, 7], [7, 3, 2, 1, 4, 5, 6, 8], [2, 5, 1, 7, 3, 4, 8, 6]]", "system": "{'size': 8, 'regions': [{'cells': [[3, 7], [4, 7], [3, 8]], 'operator': '+', 'target': 12}, {'cells': [[6, 7], [6, 6], [5, 6], [5, 7]], 'operator': '+', 'target': 21}, {'cells': [[1, 3], [1, 2], [1, 1]], 'operator': '+', 'target': 17}, {'cells': [[3, 2], [3, 1], [2, 1]], 'operator': '+', 'target': 15}, {'cells': [[8, 3], [8, 2], [7, 2], [8, 1]], 'operator': '+', 'target': 11}, {'cells': [[8, 6], [8, 5], [7, 5]], 'operator': '+', 'target': 11}, {'cells': [[3, 3], [4, 3]], 'operator': '-', 'target': 1}, {'cells': [[3, 6], [4, 6]], 'operator': '-', 'target': 5}, {'cells': [[2, 5], [1, 5], [1, 4]], 'operator': '+', 'target': 13}, {'cells': [[1, 6], [2, 6], [2, 7]], 'operator': '+', 'target': 5}, {'cells': [[3, 5], [3, 4], [4, 5]], 'operator': '*', 'target': 30}, {'cells': [[5, 5], [5, 4], [6, 5]], 'operator': '+', 'target': 15}, {'cells': [[6, 4], [7, 4], [6, 3], [7, 3]], 'operator': '*', 'target': 36}, {'cells': [[8, 8], [8, 7], [7, 8], [7, 7]], 'operator': '+', 'target': 28}, {'cells': [[5, 8], [6, 8]], 'operator': '-', 'target': 6}, {'cells': [[2, 2], [2, 3], [2, 4]], 'operator': '+', 'target': 19}, {'cells': [[1, 8], [2, 8], [1, 7]], 'operator': '+', 'target': 12}, {'cells': [[5, 3], [5, 2], [4, 2]], 'operator': '+', 'target': 20}, {'cells': [[6, 2], [6, 1], [7, 1]], 'operator': '+', 'target': 10}, {'cells': [[4, 4]], 'operator': '+', 'target': 6}, {'cells': [[7, 6]], 'operator': '+', 'target': 5}, {'cells': [[4, 1], [5, 1]], 'operator': '*', 'target': 20}, {'cells': [[4, 8]], 'operator': '+', 'target': 4}, {'cells': [[8, 4]], 'operator': '+', 'target': 7}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000177.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (8,1), (7,1), (6,1), (6,2): 96×\\nRegion at (7,7), (8,7): 12+\\nRegion at (7,3), (8,3), (8,2): 18×\\nRegion at (7,6), (8,6), (7,5), (6,5): 11+\\nRegion at (4,7), (4,6), (4,8): 6+\\nRegion at (5,8), (6,8), (5,7), (6,7): 21+\\nRegion at (5,4), (5,5): 10×\\nRegion at (4,1), (3,1), (2,1): 12+\\nRegion at (6,4), (6,3): 4-\\nRegion at (2,6), (3,6): 2-\\nRegion at (4,2), (3,2), (2,2), (4,3): 25+\\nRegion at (7,2): 7+\\nRegion at (7,8), (8,8): 4-\\nRegion at (7,4), (8,4): 2-\\nRegion at (1,1), (1,2), (1,3): 60×\\nRegion at (1,6), (1,7): 7+\\nRegion at (4,4), (4,5), (3,5): 15+\\nRegion at (2,7), (3,7): 6-\\nRegion at (8,5): 1+\\nRegion at (1,8), (2,8): 2×\\nRegion at (2,5), (2,4), (2,3), (1,5): 21+\\nRegion at (3,8): 7+\\nRegion at (5,3), (5,2), (5,1): 56×\\nRegion at (3,3), (3,4): 3×\\nRegion at (1,4): 7+\\nRegion at (6,6), (5,6): 10+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 5, 6, 7, 8, 4, 3, 1], [3, 4, 5, 1, 7, 6, 8, 2], [5, 6, 1, 3, 4, 8, 2, 7], [4, 8, 7, 5, 6, 2, 1, 3], [7, 1, 8, 2, 5, 3, 4, 6], [1, 2, 4, 8, 3, 7, 6, 5], [8, 7, 3, 6, 2, 1, 5, 4], [6, 3, 2, 4, 1, 5, 7, 8]]", "system": "{'size': 8, 'regions': [{'cells': [[8, 1], [7, 1], [6, 1], [6, 2]], 'operator': '*', 'target': 96}, {'cells': [[7, 7], [8, 7]], 'operator': '+', 'target': 12}, {'cells': [[7, 3], [8, 3], [8, 2]], 'operator': '*', 'target': 18}, {'cells': [[7, 6], [8, 6], [7, 5], [6, 5]], 'operator': '+', 'target': 11}, {'cells': [[4, 7], [4, 6], [4, 8]], 'operator': '+', 'target': 6}, {'cells': [[5, 8], [6, 8], [5, 7], [6, 7]], 'operator': '+', 'target': 21}, {'cells': [[5, 4], [5, 5]], 'operator': '*', 'target': 10}, {'cells': [[4, 1], [3, 1], [2, 1]], 'operator': '+', 'target': 12}, {'cells': [[6, 4], [6, 3]], 'operator': '-', 'target': 4}, {'cells': [[2, 6], [3, 6]], 'operator': '-', 'target': 2}, {'cells': [[4, 2], [3, 2], [2, 2], [4, 3]], 'operator': '+', 'target': 25}, {'cells': [[7, 2]], 'operator': '+', 'target': 7}, {'cells': [[7, 8], [8, 8]], 'operator': '-', 'target': 4}, {'cells': [[7, 4], [8, 4]], 'operator': '-', 'target': 2}, {'cells': [[1, 1], [1, 2], [1, 3]], 'operator': '*', 'target': 60}, {'cells': [[1, 6], [1, 7]], 'operator': '+', 'target': 7}, {'cells': [[4, 4], [4, 5], [3, 5]], 'operator': '+', 'target': 15}, {'cells': [[2, 7], [3, 7]], 'operator': '-', 'target': 6}, {'cells': [[8, 5]], 'operator': '+', 'target': 1}, {'cells': [[1, 8], [2, 8]], 'operator': '*', 'target': 2}, {'cells': [[2, 5], [2, 4], [2, 3], [1, 5]], 'operator': '+', 'target': 21}, {'cells': [[3, 8]], 'operator': '+', 'target': 7}, {'cells': [[5, 3], [5, 2], [5, 1]], 'operator': '*', 'target': 56}, {'cells': [[3, 3], [3, 4]], 'operator': '*', 'target': 3}, {'cells': [[1, 4]], 'operator': '+', 'target': 7}, {'cells': [[6, 6], [5, 6]], 'operator': '+', 'target': 10}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000178.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (1,5), (1,4), (1,6), (2,6): 22+\\nRegion at (6,7), (6,6), (5,7): 10+\\nRegion at (8,5), (7,5): 7+\\nRegion at (5,2), (6,2), (5,1): 14+\\nRegion at (4,5), (4,4): 9+\\nRegion at (4,1), (4,2): 13+\\nRegion at (4,3), (3,3): 6÷\\nRegion at (8,4), (8,3), (8,2), (7,2): 21+\\nRegion at (3,1), (3,2), (2,2), (2,1): 10+\\nRegion at (7,6), (7,7): 1-\\nRegion at (4,6), (5,6): 24×\\nRegion at (3,8), (4,8): 9+\\nRegion at (6,1), (7,1): 14×\\nRegion at (8,7), (8,8), (8,6): 9+\\nRegion at (6,4), (7,4), (5,4), (5,3): 11+\\nRegion at (5,8), (6,8): 7+\\nRegion at (6,5), (5,5): 4-\\nRegion at (3,6), (3,7): 4-\\nRegion at (2,5), (2,4), (2,3), (3,5): 14+\\nRegion at (6,3), (7,3): 32×\\nRegion at (8,1): 8+\\nRegion at (1,1), (1,2), (1,3): 35×\\nRegion at (2,8), (1,8): 4-\\nRegion at (7,8): 5+\\nRegion at (2,7), (1,7): 21×\\nRegion at (4,7): 8+\\nRegion at (3,4): 8+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 1, 7, 6, 8, 2, 3, 4], [1, 2, 3, 5, 4, 6, 7, 8], [4, 3, 6, 8, 2, 5, 1, 7], [6, 7, 1, 4, 5, 3, 8, 2], [3, 6, 5, 2, 7, 8, 4, 1], [7, 5, 8, 1, 3, 4, 2, 6], [2, 8, 4, 3, 1, 7, 6, 5], [8, 4, 2, 7, 6, 1, 5, 3]]", "system": "{'size': 8, 'regions': [{'cells': [[1, 5], [1, 4], [1, 6], [2, 6]], 'operator': '+', 'target': 22}, {'cells': [[6, 7], [6, 6], [5, 7]], 'operator': '+', 'target': 10}, {'cells': [[8, 5], [7, 5]], 'operator': '+', 'target': 7}, {'cells': [[5, 2], [6, 2], [5, 1]], 'operator': '+', 'target': 14}, {'cells': [[4, 5], [4, 4]], 'operator': '+', 'target': 9}, {'cells': [[4, 1], [4, 2]], 'operator': '+', 'target': 13}, {'cells': [[4, 3], [3, 3]], 'operator': '÷', 'target': 6}, {'cells': [[8, 4], [8, 3], [8, 2], [7, 2]], 'operator': '+', 'target': 21}, {'cells': [[3, 1], [3, 2], [2, 2], [2, 1]], 'operator': '+', 'target': 10}, {'cells': [[7, 6], [7, 7]], 'operator': '-', 'target': 1}, {'cells': [[4, 6], [5, 6]], 'operator': '*', 'target': 24}, {'cells': [[3, 8], [4, 8]], 'operator': '+', 'target': 9}, {'cells': [[6, 1], [7, 1]], 'operator': '*', 'target': 14}, {'cells': [[8, 7], [8, 8], [8, 6]], 'operator': '+', 'target': 9}, {'cells': [[6, 4], [7, 4], [5, 4], [5, 3]], 'operator': '+', 'target': 11}, {'cells': [[5, 8], [6, 8]], 'operator': '+', 'target': 7}, {'cells': [[6, 5], [5, 5]], 'operator': '-', 'target': 4}, {'cells': [[3, 6], [3, 7]], 'operator': '-', 'target': 4}, {'cells': [[2, 5], [2, 4], [2, 3], [3, 5]], 'operator': '+', 'target': 14}, {'cells': [[6, 3], [7, 3]], 'operator': '*', 'target': 32}, {'cells': [[8, 1]], 'operator': '+', 'target': 8}, {'cells': [[1, 1], [1, 2], [1, 3]], 'operator': '*', 'target': 35}, {'cells': [[2, 8], [1, 8]], 'operator': '-', 'target': 4}, {'cells': [[7, 8]], 'operator': '+', 'target': 5}, {'cells': [[2, 7], [1, 7]], 'operator': '*', 'target': 21}, {'cells': [[4, 7]], 'operator': '+', 'target': 8}, {'cells': [[3, 4]], 'operator': '+', 'target': 8}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000179.png", "question": "This is a 8x8 Calcudoku puzzle. Each row and column must contain the numbers 1 to 8 exactly once. The grid is divided into regions, each with a target number and a specified operation.\\nThe numbers within each region must be combined using the given operation to achieve the target number.\\n\\nRegion at (7,2), (7,3): 2-\\nRegion at (4,3), (5,3): 10+\\nRegion at (6,5), (5,5), (6,6), (5,4): 18+\\nRegion at (8,2), (8,3), (8,1): 6×\\nRegion at (5,8), (6,8), (6,7), (7,8): 19+\\nRegion at (7,7), (7,6), (7,5), (8,6): 19+\\nRegion at (4,4), (3,4), (4,5): 42×\\nRegion at (2,6), (3,6): 7+\\nRegion at (2,7), (3,7): 14+\\nRegion at (6,4), (7,4): 7-\\nRegion at (8,7), (8,8): 3-\\nRegion at (1,5), (2,5), (1,4), (1,6): 24×\\nRegion at (3,1), (2,1): 6÷\\nRegion at (5,7), (5,6): 35×\\nRegion at (2,3), (1,3), (3,3), (1,2): 23+\\nRegion at (7,1), (6,1): 2-\\nRegion at (3,8), (2,8), (1,8), (4,8): 17+\\nRegion at (3,5): 5+\\nRegion at (8,4), (8,5): 48×\\nRegion at (4,1), (5,1), (4,2): 18+\\nRegion at (4,7), (4,6): 2×\\nRegion at (3,2), (2,2): 3-\\nRegion at (5,2), (6,2), (6,3): 6+\\nRegion at (1,1): 7+\\nRegion at (2,4): 5+\\nRegion at (1,7): 3+\\nPlease solve the puzzle and provide the solution as a two-dimensional array.\\n\\nAnswer with a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[7, 8, 5, 4, 6, 1, 3, 2], [6, 7, 2, 5, 1, 4, 8, 3], [1, 4, 8, 2, 5, 3, 6, 7], [8, 6, 4, 7, 3, 2, 1, 5], [4, 1, 6, 3, 2, 7, 5, 8], [5, 2, 3, 8, 7, 6, 4, 1], [3, 5, 7, 1, 4, 8, 2, 6], [2, 3, 1, 6, 8, 5, 7, 4]]", "system": "{'size': 8, 'regions': [{'cells': [[7, 2], [7, 3]], 'operator': '-', 'target': 2}, {'cells': [[4, 3], [5, 3]], 'operator': '+', 'target': 10}, {'cells': [[6, 5], [5, 5], [6, 6], [5, 4]], 'operator': '+', 'target': 18}, {'cells': [[8, 2], [8, 3], [8, 1]], 'operator': '*', 'target': 6}, {'cells': [[5, 8], [6, 8], [6, 7], [7, 8]], 'operator': '+', 'target': 19}, {'cells': [[7, 7], [7, 6], [7, 5], [8, 6]], 'operator': '+', 'target': 19}, {'cells': [[4, 4], [3, 4], [4, 5]], 'operator': '*', 'target': 42}, {'cells': [[2, 6], [3, 6]], 'operator': '+', 'target': 7}, {'cells': [[2, 7], [3, 7]], 'operator': '+', 'target': 14}, {'cells': [[6, 4], [7, 4]], 'operator': '-', 'target': 7}, {'cells': [[8, 7], [8, 8]], 'operator': '-', 'target': 3}, {'cells': [[1, 5], [2, 5], [1, 4], [1, 6]], 'operator': '*', 'target': 24}, {'cells': [[3, 1], [2, 1]], 'operator': '÷', 'target': 6}, {'cells': [[5, 7], [5, 6]], 'operator': '*', 'target': 35}, {'cells': [[2, 3], [1, 3], [3, 3], [1, 2]], 'operator': '+', 'target': 23}, {'cells': [[7, 1], [6, 1]], 'operator': '-', 'target': 2}, {'cells': [[3, 8], [2, 8], [1, 8], [4, 8]], 'operator': '+', 'target': 17}, {'cells': [[3, 5]], 'operator': '+', 'target': 5}, {'cells': [[8, 4], [8, 5]], 'operator': '*', 'target': 48}, {'cells': [[4, 1], [5, 1], [4, 2]], 'operator': '+', 'target': 18}, {'cells': [[4, 7], [4, 6]], 'operator': '*', 'target': 2}, {'cells': [[3, 2], [2, 2]], 'operator': '-', 'target': 3}, {'cells': [[5, 2], [6, 2], [6, 3]], 'operator': '+', 'target': 6}, {'cells': [[1, 1]], 'operator': '+', 'target': 7}, {'cells': [[2, 4]], 'operator': '+', 'target': 5}, {'cells': [[1, 7]], 'operator': '+', 'target': 3}]}", "category": "Calcudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'calcudoku_evaluator'}"}}
{"image": "images/000180.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 1, 0, 1], \"col_constraints\": [1, 0, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 3], [2, 1], [4, 4]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 1, 0, 1], \"col_constraints\": [1, 0, 1, 1], \"reference_solution\": [[\"T\", \"X\", \"C\", \"T\"], [\"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"C\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000181.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 2, 0, 1], \"col_constraints\": [1, 0, 2, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 1], [2, 3], [4, 3]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 2, 0, 1], \"col_constraints\": [1, 0, 2, 0], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\"], [\"C\", \"T\", \"C\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"C\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000182.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"T\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 1, 1], \"col_constraints\": [0, 1, 0, 2]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 4], [3, 2], [4, 4]]", "system": "{\"input_grid\": [[\"X\", \"T\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 1, 1], \"col_constraints\": [0, 1, 0, 2], \"reference_solution\": [[\"X\", \"T\", \"T\", \"C\"], [\"X\", \"X\", \"T\", \"X\"], [\"T\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"C\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000183.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 1, 0, 1], \"col_constraints\": [1, 1, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 4], [2, 1], [4, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 1, 0, 1], \"col_constraints\": [1, 1, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"T\", \"C\"], [\"C\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"C\", \"T\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000184.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"T\"]], \"row_constraints\": [1, 0, 1, 1], \"col_constraints\": [0, 1, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 3], [3, 4], [4, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"T\"]], \"row_constraints\": [1, 0, 1, 1], \"col_constraints\": [0, 1, 1, 1], \"reference_solution\": [[\"X\", \"X\", \"C\", \"T\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"C\"], [\"X\", \"C\", \"T\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000185.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 0, 2], \"col_constraints\": [1, 1, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 1], [4, 2], [4, 4]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 0, 2], \"col_constraints\": [1, 1, 0, 1], \"reference_solution\": [[\"C\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\"], [\"T\", \"C\", \"T\", \"C\"]]}", "category": "campsite", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000186.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 0, 1], \"col_constraints\": [0, 0, 2, 1, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 3], [3, 4], [5, 3]]", "system": "{\"input_grid\": [[\"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 0, 1], \"col_constraints\": [0, 0, 2, 1, 0], \"reference_solution\": [[\"X\", \"T\", \"C\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"C\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"C\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000187.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 1, 1, 0], \"col_constraints\": [0, 1, 0, 2, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 4], [3, 4], [4, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 1, 1, 0], \"col_constraints\": [0, 1, 0, 2, 0], \"reference_solution\": [[\"X\", \"X\", \"X\", \"C\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"C\", \"T\"], [\"X\", \"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000188.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 2, 0, 1], \"col_constraints\": [0, 1, 0, 2, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[3, 2], [3, 4], [5, 4]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 2, 0, 1], \"col_constraints\": [0, 1, 0, 2, 0], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"C\", \"T\", \"C\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"C\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000189.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [2, 0, 0, 1, 0], \"col_constraints\": [1, 0, 1, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 1], [1, 3], [4, 5]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [2, 0, 0, 1, 0], \"col_constraints\": [1, 0, 1, 0, 1], \"reference_solution\": [[\"C\", \"X\", \"C\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000190.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"T\"], [\"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [0, 1, 0, 1, 1], \"col_constraints\": [1, 1, 0, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 2], [4, 1], [5, 5]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"T\"], [\"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [0, 1, 0, 1, 1], \"col_constraints\": [1, 1, 0, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"C\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"T\"], [\"C\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"C\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000191.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 0, 1, 1], \"col_constraints\": [1, 1, 1, 0, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 2], [4, 1], [5, 3]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 0, 1, 1], \"col_constraints\": [1, 1, 1, 0, 0], \"reference_solution\": [[\"T\", \"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\"], [\"C\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"C\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000192.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 1, 1, 0, 2, 0], \"col_constraints\": [0, 0, 2, 0, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 5], [3, 3], [5, 3], [5, 6]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 1, 1, 0, 2, 0], \"col_constraints\": [0, 0, 2, 0, 1, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"C\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"C\", \"T\", \"X\", \"C\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000193.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [1, 0, 1, 0, 1, 1], \"col_constraints\": [0, 0, 0, 3, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 4], [3, 4], [5, 6], [6, 4]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [1, 0, 1, 0, 1, 1], \"col_constraints\": [0, 0, 0, 3, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"C\", \"X\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000194.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"T\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 2, 0, 1, 1, 0], \"col_constraints\": [1, 1, 0, 0, 0, 2]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 1], [2, 6], [4, 2], [5, 6]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"T\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 2, 0, 1, 1, 0], \"col_constraints\": [1, 1, 0, 0, 0, 2], \"reference_solution\": [[\"T\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"C\", \"X\", \"X\", \"X\", \"X\", \"C\"], [\"X\", \"T\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"C\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"T\", \"X\", \"X\", \"T\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000195.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 0, 0, 2, 0], \"col_constraints\": [1, 1, 0, 0, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 2], [1, 5], [5, 1], [5, 6]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 0, 0, 2, 0], \"col_constraints\": [1, 1, 0, 0, 1, 1], \"reference_solution\": [[\"T\", \"C\", \"T\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"T\"], [\"C\", \"X\", \"X\", \"X\", \"T\", \"C\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000196.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 1, 1, 1, 1], \"col_constraints\": [0, 2, 0, 1, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[3, 2], [4, 6], [5, 4], [6, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 1, 1, 1, 1], \"col_constraints\": [0, 2, 0, 1, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"T\", \"C\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"C\"], [\"X\", \"T\", \"X\", \"C\", \"X\", \"X\"], [\"T\", \"C\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000197.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 0, 2, 0, 1], \"col_constraints\": [0, 2, 0, 2, 0, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 2], [4, 2], [4, 4], [6, 4]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"]], \"row_constraints\": [1, 0, 0, 2, 0, 1], \"col_constraints\": [0, 2, 0, 2, 0, 0], \"reference_solution\": [[\"T\", \"C\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"C\", \"T\", \"C\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"C\", \"T\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000198.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 0, 2, 0, 1, 1], \"col_constraints\": [1, 0, 0, 1, 0, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[4, 4], [4, 6], [6, 7], [7, 1]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 0, 2, 0, 1, 1], \"col_constraints\": [1, 0, 0, 1, 0, 1, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"T\", \"X\"], [\"X\", \"T\", \"X\", \"C\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"C\"], [\"C\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000199.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [0, 0, 1, 1, 0, 1, 1], \"col_constraints\": [0, 1, 1, 0, 0, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[3, 2], [4, 7], [6, 6], [7, 3]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\", \"X\"]], \"row_constraints\": [0, 0, 1, 1, 0, 1, 1], \"col_constraints\": [0, 1, 1, 0, 0, 1, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"C\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"C\", \"T\", \"X\", \"T\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000200.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"T\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 2, 0, 0, 0, 1], \"col_constraints\": [1, 0, 2, 0, 0, 1, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 1], [3, 3], [3, 6], [7, 3]]", "system": "{\"input_grid\": [[\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"T\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 2, 0, 0, 0, 1], \"col_constraints\": [1, 0, 2, 0, 0, 1, 0], \"reference_solution\": [[\"C\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"C\", \"T\", \"X\", \"C\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"C\", \"T\", \"T\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000201.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 1, 0, 0, 1, 1, 0], \"col_constraints\": [1, 0, 1, 1, 0, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 3], [2, 1], [5, 7], [6, 4]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 1, 0, 0, 1, 1, 0], \"col_constraints\": [1, 0, 1, 1, 0, 0, 1], \"reference_solution\": [[\"T\", \"X\", \"C\", \"X\", \"X\", \"X\", \"X\"], [\"C\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"C\"], [\"X\", \"T\", \"X\", \"C\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000202.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 1, 1, 0, 0, 0], \"col_constraints\": [0, 1, 0, 2, 0, 1, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 2], [1, 4], [3, 6], [4, 4]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 1, 1, 0, 0, 0], \"col_constraints\": [0, 1, 0, 2, 0, 1, 0], \"reference_solution\": [[\"T\", \"C\", \"X\", \"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000203.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 0, 2, 1, 0, 1], \"col_constraints\": [0, 2, 0, 1, 0, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[4, 2], [4, 4], [5, 7], [7, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [0, 0, 0, 2, 1, 0, 1], \"col_constraints\": [0, 2, 0, 1, 0, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"C\", \"X\", \"C\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"C\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000204.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 0, 0, 0, 1, 1, 1], \"col_constraints\": [0, 1, 0, 3, 0, 1, 0, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 2], [1, 4], [6, 4], [7, 6], [8, 4]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [2, 0, 0, 0, 0, 1, 1, 1], \"col_constraints\": [0, 1, 0, 3, 0, 1, 0, 0], \"reference_solution\": [[\"T\", \"C\", \"X\", \"C\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"C\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"C\", \"X\", \"T\"], [\"T\", \"X\", \"T\", \"C\", \"X\", \"T\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000205.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"T\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [1, 0, 2, 0, 0, 1, 0, 1], \"col_constraints\": [0, 0, 0, 1, 2, 0, 2, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 5], [3, 5], [3, 7], [6, 4], [8, 7]]", "system": "{\"input_grid\": [[\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"T\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [1, 0, 2, 0, 0, 1, 0, 1], \"col_constraints\": [0, 0, 0, 1, 2, 0, 2, 0], \"reference_solution\": [[\"T\", \"X\", \"X\", \"X\", \"C\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"T\", \"C\", \"T\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\"], [\"T\", \"X\", \"X\", \"C\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"C\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000206.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 1, 0, 1, 0, 1], \"col_constraints\": [0, 0, 0, 1, 1, 3, 0, 0]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 6], [3, 6], [4, 4], [6, 6], [8, 5]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 1, 0, 1, 0, 1], \"col_constraints\": [0, 0, 0, 1, 1, 3, 0, 0], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"T\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"C\", \"T\", \"X\"], [\"T\", \"X\", \"T\", \"C\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"C\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000207.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 1, 1, 1, 0, 0, 2, 0], \"col_constraints\": [1, 0, 0, 0, 0, 2, 1, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 7], [3, 1], [4, 6], [7, 6], [7, 8]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]], \"row_constraints\": [0, 1, 1, 1, 0, 0, 2, 0], \"col_constraints\": [1, 0, 0, 0, 0, 2, 1, 1], \"reference_solution\": [[\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"C\", \"X\"], [\"C\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"T\", \"C\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"T\", \"C\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000208.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 0, 1, 0, 1, 1], \"col_constraints\": [1, 0, 1, 0, 0, 0, 2, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[1, 7], [3, 8], [5, 7], [7, 1], [8, 3]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]], \"row_constraints\": [1, 0, 1, 0, 1, 0, 1, 1], \"col_constraints\": [1, 0, 1, 0, 0, 0, 2, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"C\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"X\", \"X\", \"X\", \"T\", \"X\", \"X\", \"C\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"C\", \"X\", \"T\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"T\", \"X\", \"C\", \"X\", \"X\", \"X\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000209.png", "question": "Solve this Campsite puzzle by placing tents adjacent to trees while adhering to the game rules.\\n### Game Rules:\\n1) Each tent must be orthogonally adjacent to at least one tree (up, down, left, or right).\\n2) No tents can be adjacent to each other, even diagonally.\\n3) The number of tents in each row and column must match the given constraints.\\n\\nInitial state: {\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [0, 1, 0, 1, 1, 1, 1, 0], \"col_constraints\": [1, 1, 1, 0, 0, 1, 0, 1]}\\nX presents empty cells, T presents trees.\\n\\n### Coordinate System:\\nReturn the coordinates where tents should be placed as a list of [row, column] pairs using 1-based indexing (e.g., top-left is [1,1]). Example answer format: [[1, 3], [3, 1], [4, 3]]", "answer": "[[2, 3], [4, 6], [5, 1], [6, 8], [7, 2]]", "system": "{\"input_grid\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"X\"], [\"T\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"]], \"row_constraints\": [0, 1, 0, 1, 1, 1, 1, 0], \"col_constraints\": [1, 1, 1, 0, 0, 1, 0, 1], \"reference_solution\": [[\"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"T\", \"C\", \"X\", \"X\", \"X\", \"X\", \"X\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"], [\"X\", \"X\", \"T\", \"X\", \"X\", \"C\", \"X\", \"X\"], [\"C\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\"], [\"T\", \"X\", \"X\", \"T\", \"X\", \"X\", \"X\", \"C\"], [\"T\", \"C\", \"X\", \"X\", \"X\", \"X\", \"X\", \"T\"], [\"X\", \"X\", \"X\", \"X\", \"X\", \"T\", \"X\", \"X\"]]}", "category": "campsite", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'campsite_evaluator'}"}}
{"image": "images/000210.png", "question": "Given a list of non-negative integers [19, 13, 1, 18, 18] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "72", "system": "{'heights': [19, 13, 1, 18, 18]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000211.png", "question": "Given a list of non-negative integers [13, 10, 2, 18, 2, 13, 14, 20, 13] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "104", "system": "{'heights': [13, 10, 2, 18, 2, 13, 14, 20, 13]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000212.png", "question": "Given a list of non-negative integers [7, 15, 9, 16, 2, 6, 18, 16, 12, 17] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "120", "system": "{'heights': [7, 15, 9, 16, 2, 6, 18, 16, 12, 17]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000213.png", "question": "Given a list of non-negative integers [16, 8, 19, 13, 8, 18, 6, 16] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "112", "system": "{'heights': [16, 8, 19, 13, 8, 18, 6, 16]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000214.png", "question": "Given a list of non-negative integers [7, 7, 6, 10, 14, 7, 2] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "35", "system": "{'heights': [7, 7, 6, 10, 14, 7, 2]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000215.png", "question": "Given a list of non-negative integers [16, 14, 14, 11, 10, 10] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "50", "system": "{'heights': [16, 14, 14, 11, 10, 10]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000216.png", "question": "Given a list of non-negative integers [22, 23, 18, 30, 13, 21, 2, 16, 7, 36, 23, 19, 29, 39, 11, 34, 38, 39, 26, 29] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "464", "system": "{'heights': [22, 23, 18, 30, 13, 21, 2, 16, 7, 36, 23, 19, 29, 39, 11, 34, 38, 39, 26, 29]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000217.png", "question": "Given a list of non-negative integers [19, 3, 38, 19, 32, 28, 10, 39, 18, 38, 33, 24, 4, 33, 3, 21] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "363", "system": "{'heights': [19, 3, 38, 19, 32, 28, 10, 39, 18, 38, 33, 24, 4, 33, 3, 21]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000218.png", "question": "Given a list of non-negative integers [39, 11, 11, 2, 11, 2, 7, 3, 1, 13, 11, 2, 18, 27, 34, 13, 38] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "608", "system": "{'heights': [39, 11, 11, 2, 11, 2, 7, 3, 1, 13, 11, 2, 18, 27, 34, 13, 38]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000219.png", "question": "Given a list of non-negative integers [24, 36, 9, 36, 40, 29, 9, 33, 36, 21, 14, 39, 18, 2, 15, 27, 40, 34] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "544", "system": "{'heights': [24, 36, 9, 36, 40, 29, 9, 33, 36, 21, 14, 39, 18, 2, 15, 27, 40, 34]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000220.png", "question": "Given a list of non-negative integers [40, 28, 18, 15, 28, 33, 20, 21, 40, 16, 30, 5, 16, 20, 28, 32, 38, 28, 15] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "608", "system": "{'heights': [40, 28, 18, 15, 28, 33, 20, 21, 40, 16, 30, 5, 16, 20, 28, 32, 38, 28, 15]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000221.png", "question": "Given a list of non-negative integers [20, 17, 39, 18, 11, 28, 21, 35, 18, 25, 12, 37, 40, 21, 10, 9, 32, 12, 39] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "624", "system": "{'heights': [20, 17, 39, 18, 11, 28, 21, 35, 18, 25, 12, 37, 40, 21, 10, 9, 32, 12, 39]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000222.png", "question": "Given a list of non-negative integers [42, 12, 31, 21, 18, 8, 2, 2, 36, 53, 44, 3, 54, 20, 52, 52, 58, 9, 50, 12, 52, 47, 5, 36, 28, 25, 35, 22, 43, 48] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1218", "system": "{'heights': [42, 12, 31, 21, 18, 8, 2, 2, 36, 53, 44, 3, 54, 20, 52, 52, 58, 9, 50, 12, 52, 47, 5, 36, 28, 25, 35, 22, 43, 48]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000223.png", "question": "Given a list of non-negative integers [3, 17, 11, 17, 11, 10, 1, 36, 59, 53, 58, 11, 21, 7, 24, 46, 46, 25, 49, 15, 47, 58, 56, 45, 21, 28, 31] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "784", "system": "{'heights': [3, 17, 11, 17, 11, 10, 1, 36, 59, 53, 58, 11, 21, 7, 24, 46, 46, 25, 49, 15, 47, 58, 56, 45, 21, 28, 31]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000224.png", "question": "Given a list of non-negative integers [60, 42, 51, 32, 18, 48, 22, 39, 36, 3, 22, 26, 24, 9, 47, 51, 27, 41, 40, 59, 47, 38, 34, 28] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1121", "system": "{'heights': [60, 42, 51, 32, 18, 48, 22, 39, 36, 3, 22, 26, 24, 9, 47, 51, 27, 41, 40, 59, 47, 38, 34, 28]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000225.png", "question": "Given a list of non-negative integers [28, 19, 56, 9, 6, 2, 33, 10, 34, 31, 35, 28, 41, 8, 4, 60, 17, 37, 58, 45, 47, 14, 41, 37, 57] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1232", "system": "{'heights': [28, 19, 56, 9, 6, 2, 33, 10, 34, 31, 35, 28, 41, 8, 4, 60, 17, 37, 58, 45, 47, 14, 41, 37, 57]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000226.png", "question": "Given a list of non-negative integers [28, 14, 48, 34, 15, 46, 7, 22, 57, 47, 24, 32, 18, 53, 31, 32, 42, 10, 22, 53] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "816", "system": "{'heights': [28, 14, 48, 34, 15, 46, 7, 22, 57, 47, 24, 32, 18, 53, 31, 32, 42, 10, 22, 53]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000227.png", "question": "Given a list of non-negative integers [32, 21, 42, 30, 45, 22, 57, 12, 36, 31, 3, 5, 4, 51, 40, 49, 10, 58, 2, 15, 28, 45, 40, 23, 58] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1026", "system": "{'heights': [32, 21, 42, 30, 45, 22, 57, 12, 36, 31, 3, 5, 4, 51, 40, 49, 10, 58, 2, 15, 28, 45, 40, 23, 58]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000228.png", "question": "Given a list of non-negative integers [11, 7, 75, 6, 75, 69, 69, 52, 20, 22, 43, 23, 54, 72, 69, 80, 51, 77, 53, 57, 50, 73, 1, 52, 55, 12, 6, 32, 25, 48, 35, 16, 4, 80, 54, 52, 7, 8] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "2325", "system": "{'heights': [11, 7, 75, 6, 75, 69, 69, 52, 20, 22, 43, 23, 54, 72, 69, 80, 51, 77, 53, 57, 50, 73, 1, 52, 55, 12, 6, 32, 25, 48, 35, 16, 4, 80, 54, 52, 7, 8]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000229.png", "question": "Given a list of non-negative integers [45, 20, 50, 3, 14, 13, 36, 64, 48, 69, 17, 51, 31, 58, 45, 68, 6, 9, 68, 15, 24, 11, 77, 55, 34, 43, 60, 10, 62, 70, 26, 24, 30, 18, 11, 21, 41, 54] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1750", "system": "{'heights': [45, 20, 50, 3, 14, 13, 36, 64, 48, 69, 17, 51, 31, 58, 45, 68, 6, 9, 68, 15, 24, 11, 77, 55, 34, 43, 60, 10, 62, 70, 26, 24, 30, 18, 11, 21, 41, 54]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000230.png", "question": "Given a list of non-negative integers [44, 41, 55, 27, 73, 28, 51, 31, 60, 75, 59, 22, 61, 74, 67, 80, 29, 70, 2, 9, 11, 7, 63, 41, 35, 13, 45, 63, 50, 59, 13, 67, 5, 73, 43, 2, 27, 50] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "2117", "system": "{'heights': [44, 41, 55, 27, 73, 28, 51, 31, 60, 75, 59, 22, 61, 74, 67, 80, 29, 70, 2, 9, 11, 7, 63, 41, 35, 13, 45, 63, 50, 59, 13, 67, 5, 73, 43, 2, 27, 50]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000231.png", "question": "Given a list of non-negative integers [74, 45, 60, 47, 7, 31, 51, 70, 44, 42, 57, 30, 46, 29, 78, 51, 50, 5, 49, 33, 68, 80, 33, 43, 60, 71, 26, 78, 10, 15] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1998", "system": "{'heights': [74, 45, 60, 47, 7, 31, 51, 70, 44, 42, 57, 30, 46, 29, 78, 51, 50, 5, 49, 33, 68, 80, 33, 43, 60, 71, 26, 78, 10, 15]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000232.png", "question": "Given a list of non-negative integers [6, 68, 24, 17, 41, 8, 16, 57, 52, 1, 55, 9, 55, 39, 15, 13, 75, 71, 29, 66, 41, 72, 55, 70, 78, 8, 46, 33, 73, 64, 23] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "1836", "system": "{'heights': [6, 68, 24, 17, 41, 8, 16, 57, 52, 1, 55, 9, 55, 39, 15, 13, 75, 71, 29, 66, 41, 72, 55, 70, 78, 8, 46, 33, 73, 64, 23]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000233.png", "question": "Given a list of non-negative integers [50, 38, 49, 10, 45, 14, 33, 3, 43, 69, 4, 79, 39, 33, 18, 23, 77, 68, 60, 43, 21, 62, 56, 45, 47, 25, 57, 73, 26, 51, 40, 63, 40, 36, 59, 6, 62, 15, 80] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "2133", "system": "{'heights': [50, 38, 49, 10, 45, 14, 33, 3, 43, 69, 4, 79, 39, 33, 18, 23, 77, 68, 60, 43, 21, 62, 56, 45, 47, 25, 57, 73, 26, 51, 40, 63, 40, 36, 59, 6, 62, 15, 80]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000234.png", "question": "Given a list of non-negative integers [96, 82, 93, 16, 8, 19, 82, 52, 63, 32, 41, 67, 67, 34, 87, 62, 53, 97, 96, 61, 78, 69, 1, 60, 52, 75, 2, 8, 76, 36, 66, 84, 77, 53, 98, 96, 58, 49, 38, 4, 59, 91, 62] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "3731", "system": "{'heights': [96, 82, 93, 16, 8, 19, 82, 52, 63, 32, 41, 67, 67, 34, 87, 62, 53, 97, 96, 61, 78, 69, 1, 60, 52, 75, 2, 8, 76, 36, 66, 84, 77, 53, 98, 96, 58, 49, 38, 4, 59, 91, 62]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000235.png", "question": "Given a list of non-negative integers [20, 46, 92, 40, 10, 47, 59, 35, 59, 54, 12, 37, 12, 5, 26, 39, 22, 80, 4, 52, 1, 88, 27, 62, 41, 49, 89, 74, 87, 19, 54, 50, 100, 12, 44, 25, 74, 35, 16, 95, 27, 64, 81, 24, 64, 82, 66, 51, 61, 71, 57, 35, 18, 89, 15, 68, 58] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "4539", "system": "{'heights': [20, 46, 92, 40, 10, 47, 59, 35, 59, 54, 12, 37, 12, 5, 26, 39, 22, 80, 4, 52, 1, 88, 27, 62, 41, 49, 89, 74, 87, 19, 54, 50, 100, 12, 44, 25, 74, 35, 16, 95, 27, 64, 81, 24, 64, 82, 66, 51, 61, 71, 57, 35, 18, 89, 15, 68, 58]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000236.png", "question": "Given a list of non-negative integers [9, 73, 23, 94, 25, 77, 89, 70, 94, 8, 44, 45, 82, 7, 72, 1, 6, 88, 29, 53, 73, 3, 61, 94, 79, 52, 48, 56, 22, 22, 33, 48, 66, 39, 93, 85, 12, 37, 36, 100, 73, 74, 93, 81, 88, 2, 3, 37, 92, 53, 25] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "4140", "system": "{'heights': [9, 73, 23, 94, 25, 77, 89, 70, 94, 8, 44, 45, 82, 7, 72, 1, 6, 88, 29, 53, 73, 3, 61, 94, 79, 52, 48, 56, 22, 22, 33, 48, 66, 39, 93, 85, 12, 37, 36, 100, 73, 74, 93, 81, 88, 2, 3, 37, 92, 53, 25]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000237.png", "question": "Given a list of non-negative integers [70, 60, 61, 37, 79, 18, 26, 98, 68, 33, 99, 16, 76, 55, 65, 32, 61, 85, 25, 50, 6, 7, 67, 91, 95, 6, 85, 80, 84, 9, 11, 81, 3, 28, 30, 30, 67, 10, 8, 50, 78, 35, 24, 7, 46, 97, 92, 53, 54, 75, 78, 68, 25, 75, 72, 95, 56, 18, 98, 74, 68, 78, 41, 18, 5, 76] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "4998", "system": "{'heights': [70, 60, 61, 37, 79, 18, 26, 98, 68, 33, 99, 16, 76, 55, 65, 32, 61, 85, 25, 50, 6, 7, 67, 91, 95, 6, 85, 80, 84, 9, 11, 81, 3, 28, 30, 30, 67, 10, 8, 50, 78, 35, 24, 7, 46, 97, 92, 53, 54, 75, 78, 68, 25, 75, 72, 95, 56, 18, 98, 74, 68, 78, 41, 18, 5, 76]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000238.png", "question": "Given a list of non-negative integers [100, 65, 35, 57, 76, 4, 92, 43, 59, 58, 27, 84, 37, 99, 97, 88, 16, 81, 44, 44, 12, 89, 100, 15, 57, 19, 16, 53, 95, 58, 3, 74, 52, 3, 60, 14, 2, 25, 11, 77, 38, 62, 75, 84, 24, 46, 76, 31, 36, 93, 5, 58, 100, 41, 31, 66, 38, 34, 5, 18, 50, 87] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "5307", "system": "{'heights': [100, 65, 35, 57, 76, 4, 92, 43, 59, 58, 27, 84, 37, 99, 97, 88, 16, 81, 44, 44, 12, 89, 100, 15, 57, 19, 16, 53, 95, 58, 3, 74, 52, 3, 60, 14, 2, 25, 11, 77, 38, 62, 75, 84, 24, 46, 76, 31, 36, 93, 5, 58, 100, 41, 31, 66, 38, 34, 5, 18, 50, 87]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000239.png", "question": "Given a list of non-negative integers [32, 87, 44, 55, 45, 8, 87, 30, 21, 17, 23, 69, 63, 18, 47, 83, 48, 69, 94, 59, 71, 53, 85, 56, 78, 83, 35, 18, 8, 2, 20, 12, 86, 83, 97, 76, 77, 73, 13, 94, 93, 8, 27, 85, 48, 97, 61, 45, 45, 34, 52, 44, 21, 86, 43, 98, 47, 35, 13, 22, 4, 37, 74] where consecutive bars are adjacent with no gaps between them. Pick any two bars and form the sides of a water container, with the x-axis as the base. How much water can the biggest possible container hold?", "answer": "4698", "system": "{'heights': [32, 87, 44, 55, 45, 8, 87, 30, 21, 17, 23, 69, 63, 18, 47, 83, 48, 69, 94, 59, 71, 53, 85, 56, 78, 83, 35, 18, 8, 2, 20, 12, 86, 83, 97, 76, 77, 73, 13, 94, 93, 8, 27, 85, 48, 97, 61, 45, 45, 34, 52, 44, 21, 86, 43, 98, 47, 35, 13, 22, 4, 37, 74]}", "category": "ContainerWithMostWater", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000240.png", "question": "Given a terrain represented by the integer array [4, 4, 4, 4, 6, 7, 7]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "0", "system": "{'terrain': [4, 4, 4, 4, 6, 7, 7]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000241.png", "question": "Given a terrain represented by the integer array [2, 2, 4, 4, 4, 4, 4, 5, 5]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "0", "system": "{'terrain': [2, 2, 4, 4, 4, 4, 4, 5, 5]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000242.png", "question": "Given a terrain represented by the integer array [1, 3, 3, 2, 2, 2, 4]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "2", "system": "{'terrain': [1, 3, 3, 2, 2, 2, 4]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000243.png", "question": "Given a terrain represented by the integer array [3, 3, 4, 3, 5, 5, 7, 7, 5]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "3", "system": "{'terrain': [3, 3, 4, 3, 5, 5, 7, 7, 5]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000244.png", "question": "Given a terrain represented by the integer array [3, 3, 5, 7, 9, 7, 6, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "1", "system": "{'terrain': [3, 3, 5, 7, 9, 7, 6, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000245.png", "question": "Given a terrain represented by the integer array [1, 2, 2, 3, 3, 5, 6, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "0", "system": "{'terrain': [1, 2, 2, 3, 3, 5, 6, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000246.png", "question": "Given a terrain represented by the integer array [3, 5, 5, 5, 5, 7, 8, 8, 8, 10, 12]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "0", "system": "{'terrain': [3, 5, 5, 5, 5, 7, 8, 8, 8, 10, 12]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000247.png", "question": "Given a terrain represented by the integer array [3, 3, 5, 5, 5, 3, 5, 5, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "3", "system": "{'terrain': [3, 3, 5, 5, 5, 3, 5, 5, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000248.png", "question": "Given a terrain represented by the integer array [2, 3, 4, 4, 4, 6, 6, 6, 7, 8]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "0", "system": "{'terrain': [2, 3, 4, 4, 4, 6, 6, 6, 7, 8]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000249.png", "question": "Given a terrain represented by the integer array [1, 1, 3, 4, 4, 4, 4, 2, 4, 6, 6, 7, 8, 8, 8, 6, 8, 8, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "5", "system": "{'terrain': [1, 1, 3, 4, 4, 4, 4, 2, 4, 6, 6, 7, 8, 8, 8, 6, 8, 8, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000250.png", "question": "Given a terrain represented by the integer array [1, 1, 3, 3, 3, 4, 6, 6, 8, 8, 6, 4, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "2", "system": "{'terrain': [1, 1, 3, 3, 3, 4, 6, 6, 8, 8, 6, 4, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000251.png", "question": "Given a terrain represented by the integer array [2, 2, 2, 3, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 4, 6, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "4", "system": "{'terrain': [2, 2, 2, 3, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 4, 6, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000252.png", "question": "Given a terrain represented by the integer array [16, 26, 15, 15, 34, 12, 52, 11, 39, 25, 22, 8, 44, 24, 44, 48, 48, 7, 7, 7, 45]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "12", "system": "{'terrain': [16, 26, 15, 15, 34, 12, 52, 11, 39, 25, 22, 8, 44, 24, 44, 48, 48, 7, 7, 7, 45]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000253.png", "question": "Given a terrain represented by the integer array [26, 47, 57, 2, 53, 54, 57, 55, 4, 17, 3, 38, 33, 1, 1, 1, 1, 32, 17, 30, 54, 55, 38, 24, 33, 16, 31, 8, 32, 56]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "16", "system": "{'terrain': [26, 47, 57, 2, 53, 54, 57, 55, 4, 17, 3, 38, 33, 1, 1, 1, 1, 32, 17, 30, 54, 55, 38, 24, 33, 16, 31, 8, 32, 56]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000254.png", "question": "Given a terrain represented by the integer array [2, 22, 28, 28, 7, 37, 30, 43, 35, 51, 35, 44, 27, 27, 60, 59, 56, 59, 20, 9, 21, 4, 25, 29, 43, 47, 12]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "17", "system": "{'terrain': [2, 22, 28, 28, 7, 37, 30, 43, 35, 51, 35, 44, 27, 27, 60, 59, 56, 59, 20, 9, 21, 4, 25, 29, 43, 47, 12]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000255.png", "question": "Given a terrain represented by the integer array [45, 3, 2, 30, 30, 44, 25, 36, 22, 22, 23, 18, 14, 55, 56, 57, 56, 34, 26, 20, 43, 43, 27, 29, 22, 58]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "13", "system": "{'terrain': [45, 3, 2, 30, 30, 44, 25, 36, 22, 22, 23, 18, 14, 55, 56, 57, 56, 34, 26, 20, 43, 43, 27, 29, 22, 58]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000256.png", "question": "Given a terrain represented by the integer array [32, 32, 32, 35, 56, 2, 31, 54, 47, 12, 26, 36, 56, 21, 24, 49, 38, 50, 16, 22, 31, 34]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "10", "system": "{'terrain': [32, 32, 32, 35, 56, 2, 31, 54, 47, 12, 26, 36, 56, 21, 24, 49, 38, 50, 16, 22, 31, 34]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000257.png", "question": "Given a terrain represented by the integer array [25, 44, 13, 60, 51, 51, 51, 51, 15, 57, 37, 23, 13, 41, 16, 57, 8, 45, 18, 5, 46, 25]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "13", "system": "{'terrain': [25, 44, 13, 60, 51, 51, 51, 51, 15, 57, 37, 23, 13, 41, 16, 57, 8, 45, 18, 5, 46, 25]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000258.png", "question": "Given a terrain represented by the integer array [66, 51, 70, 40, 22, 3, 61, 71, 27, 3, 4, 34, 6, 78, 14, 38, 48, 36, 60, 55, 26, 6, 44, 39, 11, 23, 37, 16, 28, 39, 68, 57, 50, 4, 35, 9, 9, 9]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "20", "system": "{'terrain': [66, 51, 70, 40, 22, 3, 61, 71, 27, 3, 4, 34, 6, 78, 14, 38, 48, 36, 60, 55, 26, 6, 44, 39, 11, 23, 37, 16, 28, 39, 68, 57, 50, 4, 35, 9, 9, 9]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000259.png", "question": "Given a terrain represented by the integer array [9, 20, 48, 56, 73, 78, 33, 73, 3, 36, 52, 51, 72, 72, 76, 76, 35, 22, 78, 11, 23, 36, 46, 40, 78, 78, 40, 28, 66, 18, 2, 75, 19, 19, 66, 6, 6, 6, 6]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "19", "system": "{'terrain': [9, 20, 48, 56, 73, 78, 33, 73, 3, 36, 52, 51, 72, 72, 76, 76, 35, 22, 78, 11, 23, 36, 46, 40, 78, 78, 40, 28, 66, 18, 2, 75, 19, 19, 66, 6, 6, 6, 6]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000260.png", "question": "Given a terrain represented by the integer array [8, 11, 39, 36, 50, 57, 48, 64, 62, 36, 46, 30, 67, 30, 5, 77, 60, 60, 60, 16, 67, 3, 54, 65, 14, 58, 69, 25, 8, 50, 62, 44, 6, 31, 7]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "21", "system": "{'terrain': [8, 11, 39, 36, 50, 57, 48, 64, 62, 36, 46, 30, 67, 30, 5, 77, 60, 60, 60, 16, 67, 3, 54, 65, 14, 58, 69, 25, 8, 50, 62, 44, 6, 31, 7]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000261.png", "question": "Given a terrain represented by the integer array [23, 31, 27, 72, 50, 79, 42, 44, 4, 34, 58, 76, 76, 76, 12, 50, 59, 77, 59, 56, 72, 72, 72, 72, 23, 23, 23, 26, 43, 63, 10, 75]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "16", "system": "{'terrain': [23, 31, 27, 72, 50, 79, 42, 44, 4, 34, 58, 76, 76, 76, 12, 50, 59, 77, 59, 56, 72, 72, 72, 72, 23, 23, 23, 26, 43, 63, 10, 75]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000262.png", "question": "Given a terrain represented by the integer array [80, 24, 15, 21, 51, 57, 62, 22, 68, 39, 29, 49, 74, 79, 72, 66, 66, 43, 3, 24, 14, 26, 28, 28, 28, 28, 27, 34, 57, 72, 45, 25, 66, 76, 38, 32, 53, 13, 49, 48]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "18", "system": "{'terrain': [80, 24, 15, 21, 51, 57, 62, 22, 68, 39, 29, 49, 74, 79, 72, 66, 66, 43, 3, 24, 14, 26, 28, 28, 28, 28, 27, 34, 57, 72, 45, 25, 66, 76, 38, 32, 53, 13, 49, 48]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000263.png", "question": "Given a terrain represented by the integer array [64, 5, 14, 61, 71, 66, 29, 12, 12, 53, 48, 27, 59, 46, 64, 56, 42, 42, 42, 42, 80, 39, 76, 41, 32, 31, 6, 65, 49, 73, 16, 5, 30, 23, 66, 71]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "19", "system": "{'terrain': [64, 5, 14, 61, 71, 66, 29, 12, 12, 53, 48, 27, 59, 46, 64, 56, 42, 42, 42, 42, 80, 39, 76, 41, 32, 31, 6, 65, 49, 73, 16, 5, 30, 23, 66, 71]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000264.png", "question": "Given a terrain represented by the integer array [3, 10, 49, 34, 44, 60, 99, 57, 70, 22, 22, 45, 65, 26, 99, 31, 58, 69, 30, 31, 52, 81, 40, 71, 58, 98, 16, 85, 62, 4, 39, 29, 40, 17, 19, 70, 57, 69, 85, 5, 47, 60, 11, 89, 23, 49, 44, 12, 6, 88, 24, 51, 51, 2, 59, 40, 100, 31, 59, 24, 81, 88, 97]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "44", "system": "{'terrain': [3, 10, 49, 34, 44, 60, 99, 57, 70, 22, 22, 45, 65, 26, 99, 31, 58, 69, 30, 31, 52, 81, 40, 71, 58, 98, 16, 85, 62, 4, 39, 29, 40, 17, 19, 70, 57, 69, 85, 5, 47, 60, 11, 89, 23, 49, 44, 12, 6, 88, 24, 51, 51, 2, 59, 40, 100, 31, 59, 24, 81, 88, 97]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000265.png", "question": "Given a terrain represented by the integer array [16, 1, 75, 73, 6, 58, 27, 91, 61, 47, 82, 64, 64, 64, 64, 98, 98, 59, 69, 73, 20, 82, 44, 96, 5, 74, 46, 75, 97, 29, 19, 24, 62, 93, 75, 12, 80, 8, 29, 41, 86, 75, 18, 46, 46, 46, 46, 84, 83, 60, 50, 72, 20, 14, 10, 89, 43]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "32", "system": "{'terrain': [16, 1, 75, 73, 6, 58, 27, 91, 61, 47, 82, 64, 64, 64, 64, 98, 98, 59, 69, 73, 20, 82, 44, 96, 5, 74, 46, 75, 97, 29, 19, 24, 62, 93, 75, 12, 80, 8, 29, 41, 86, 75, 18, 46, 46, 46, 46, 84, 83, 60, 50, 72, 20, 14, 10, 89, 43]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000266.png", "question": "Given a terrain represented by the integer array [88, 29, 6, 50, 100, 76, 22, 73, 60, 29, 39, 32, 83, 26, 28, 20, 65, 74, 52, 10, 6, 36, 21, 4, 34, 52, 17, 86, 68, 47, 52, 52, 82, 24, 4, 75, 46, 88, 92, 100, 56, 56, 5, 85, 49, 2, 45, 3, 19, 93, 23, 35, 53, 53, 3, 69, 69, 69, 21, 21, 86]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "35", "system": "{'terrain': [88, 29, 6, 50, 100, 76, 22, 73, 60, 29, 39, 32, 83, 26, 28, 20, 65, 74, 52, 10, 6, 36, 21, 4, 34, 52, 17, 86, 68, 47, 52, 52, 82, 24, 4, 75, 46, 88, 92, 100, 56, 56, 5, 85, 49, 2, 45, 3, 19, 93, 23, 35, 53, 53, 3, 69, 69, 69, 21, 21, 86]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000267.png", "question": "Given a terrain represented by the integer array [56, 78, 40, 8, 41, 74, 55, 84, 85, 14, 12, 73, 73, 73, 93, 97, 14, 66, 34, 39, 45, 97, 64, 19, 15, 68, 68, 68, 68, 76, 67, 17, 58, 10, 76, 5, 90, 62, 95, 56, 81, 99, 8, 29, 51, 80, 6, 47, 96, 41, 8, 97, 48, 59, 39, 39, 39, 39, 11]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "31", "system": "{'terrain': [56, 78, 40, 8, 41, 74, 55, 84, 85, 14, 12, 73, 73, 73, 93, 97, 14, 66, 34, 39, 45, 97, 64, 19, 15, 68, 68, 68, 68, 76, 67, 17, 58, 10, 76, 5, 90, 62, 95, 56, 81, 99, 8, 29, 51, 80, 6, 47, 96, 41, 8, 97, 48, 59, 39, 39, 39, 39, 11]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000268.png", "question": "Given a terrain represented by the integer array [15, 86, 48, 78, 100, 79, 40, 34, 87, 12, 93, 75, 41, 63, 15, 54, 4, 29, 91, 63, 85, 85, 42, 46, 1, 68, 38, 81, 44, 49, 1, 72, 78, 92, 78, 86, 29, 29, 29, 31, 61, 62, 56, 93, 24, 32, 5, 42, 23, 57, 44, 24, 48, 38, 39]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "40", "system": "{'terrain': [15, 86, 48, 78, 100, 79, 40, 34, 87, 12, 93, 75, 41, 63, 15, 54, 4, 29, 91, 63, 85, 85, 42, 46, 1, 68, 38, 81, 44, 49, 1, 72, 78, 92, 78, 86, 29, 29, 29, 31, 61, 62, 56, 93, 24, 32, 5, 42, 23, 57, 44, 24, 48, 38, 39]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000269.png", "question": "Given a terrain represented by the integer array [68, 42, 25, 80, 75, 43, 73, 28, 77, 97, 4, 97, 52, 42, 54, 29, 79, 28, 74, 98, 97, 98, 24, 38, 50, 87, 53, 70, 57, 60, 79, 24, 67, 62, 59, 21, 21, 64, 20, 59, 38, 99, 23, 81, 10, 8, 39, 5, 60, 21, 100, 83, 8, 8, 67, 53, 92, 48, 99, 91, 90, 84, 12, 32, 52, 44]. Hill: A flat or raised area where the land right before it is lower, and the land right after it is lower too. Valley: A flat or dipped area where the land right before is higher, and the land right after is higher too. Neighboring bars with the same height count as part of the same hill/valley. Calculate the sum number of hills and valleys. Please provide with an integer.", "answer": "46", "system": "{'terrain': [68, 42, 25, 80, 75, 43, 73, 28, 77, 97, 4, 97, 52, 42, 54, 29, 79, 28, 74, 98, 97, 98, 24, 38, 50, 87, 53, 70, 57, 60, 79, 24, 67, 62, 59, 21, 21, 64, 20, 59, 38, 99, 23, 81, 10, 8, 39, 5, 60, 21, 100, 83, 8, 8, 67, 53, 92, 48, 99, 91, 90, 84, 12, 32, 52, 44]}", "category": "CountHillsAndValleys", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000270.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: CDA+FBA=GEAF Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 8, 'B': 2, 'C': 4, 'D': 5, 'E': 0, 'F': 6, 'G': 1}", "system": "{'equation': 'CDA+FBA=GEAF'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000271.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: AFD+CED=BDAD Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 8, 'B': 1, 'C': 2, 'D': 0, 'E': 3, 'F': 5}", "system": "{'equation': 'AFD+CED=BDAD'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000272.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: BEB+AED=ECAA Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 3, 'B': 7, 'C': 0, 'D': 6, 'E': 1}", "system": "{'equation': 'BEB+AED=ECAA'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000273.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: DFA+BDF=EBFC Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 7, 'C': 0, 'D': 9, 'E': 1, 'F': 6}", "system": "{'equation': 'DFA+BDF=EBFC'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000274.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: CCA+FFE=EFDB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 6, 'B': 7, 'C': 9, 'D': 2, 'E': 1, 'F': 3}", "system": "{'equation': 'CCA+FFE=EFDB'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000275.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: DAB+BEA=CDCC Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 2, 'B': 9, 'C': 1, 'D': 6, 'E': 8}", "system": "{'equation': 'DAB+BEA=CDCC'}", "category": "CryptoMath", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000276.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: BFCH+CEGA=FFDJI Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 3, 'B': 4, 'C': 7, 'D': 6, 'E': 5, 'F': 1, 'G': 0, 'H': 9, 'I': 2, 'J': 8}", "system": "{'equation': 'BFCH+CEGA=FFDJI'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000277.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: GHBG+ACDA=BGEFB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 9, 'B': 1, 'C': 6, 'D': 5, 'E': 0, 'F': 7, 'G': 2, 'H': 4}", "system": "{'equation': 'GHBG+ACDA=BGEFB'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000278.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: HBBF+CDEG=BAHBH Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 1, 'C': 6, 'D': 7, 'E': 0, 'F': 5, 'G': 3, 'H': 8}", "system": "{'equation': 'HBBF+CDEG=BAHBH'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000279.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: DGHG+EACD=GFDHB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 6, 'C': 0, 'D': 5, 'E': 7, 'F': 2, 'G': 1, 'H': 8}", "system": "{'equation': 'DGHG+EACD=GFDHB'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000280.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: EDDA+EBAC=FDBEF Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 2, 'C': 7, 'D': 0, 'E': 5, 'F': 1}", "system": "{'equation': 'EDDA+EBAC=FDBEF'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000281.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: ACDB+CGGE=ADAGF Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 1, 'B': 5, 'C': 8, 'D': 0, 'E': 4, 'F': 9, 'G': 3}", "system": "{'equation': 'ACDB+CGGE=ADAGF'}", "category": "CryptoMath", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000282.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: CAC+GGD+CAB=BFEB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 9, 'B': 1, 'C': 3, 'D': 7, 'E': 5, 'F': 4, 'G': 6}", "system": "{'equation': 'CAC+GGD+CAB=BFEB'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000283.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: DAB+FBF+FEC=CEBC Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 9, 'B': 8, 'C': 1, 'D': 5, 'E': 0, 'F': 2}", "system": "{'equation': 'DAB+FBF+FEC=CEBC'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000284.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: EBE+CBF+ABE=EEFD Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 7, 'B': 2, 'C': 3, 'D': 8, 'E': 1, 'F': 6}", "system": "{'equation': 'EBE+CBF+ABE=EEFD'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000285.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: CBB+ADA+FCD=EAHG Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 3, 'B': 8, 'C': 6, 'D': 9, 'E': 1, 'F': 2, 'G': 0, 'H': 5}", "system": "{'equation': 'CBB+ADA+FCD=EAHG'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000286.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: GAF+BGD+EHF=FBCE Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 3, 'C': 6, 'D': 0, 'E': 2, 'F': 1, 'G': 7, 'H': 5}", "system": "{'equation': 'GAF+BGD+EHF=FBCE'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000287.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: HFB+GHG+BBA=EDCD Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 0, 'B': 3, 'C': 6, 'D': 8, 'E': 1, 'F': 4, 'G': 5, 'H': 9}", "system": "{'equation': 'HFB+GHG+BBA=EDCD'}", "category": "CryptoMath", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000288.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: FEIG+DCEI+CHAH=FECIB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 8, 'B': 2, 'C': 3, 'D': 5, 'E': 0, 'F': 1, 'G': 6, 'H': 9, 'I': 7}", "system": "{'equation': 'FEIG+DCEI+CHAH=FECIB'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000289.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: FECF+EFEG+HAFE=DACBG Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 6, 'C': 5, 'D': 1, 'E': 2, 'F': 8, 'G': 7, 'H': 3}", "system": "{'equation': 'FECF+EFEG+HAFE=DACBG'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000290.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: ACCD+HDBE+CDDB=GBFAG Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 8, 'B': 7, 'C': 6, 'D': 4, 'E': 0, 'F': 5, 'G': 1, 'H': 2}", "system": "{'equation': 'ACCD+HDBE+CDDB=GBFAG'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000291.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: ECBD+CHFB+FAGH=FEGHE Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 3, 'B': 6, 'C': 8, 'D': 2, 'E': 5, 'F': 1, 'G': 9, 'H': 7}", "system": "{'equation': 'ECBD+CHFB+FAGH=FEGHE'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000292.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: GEDD+ACHE+BFAC=BIEDD Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 5, 'B': 1, 'C': 2, 'D': 0, 'E': 8, 'F': 7, 'G': 9, 'H': 4, 'I': 6}", "system": "{'equation': 'GEDD+ACHE+BFAC=BIEDD'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000293.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: BEAD+HABC+CDHG=BGAFB Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 9, 'B': 1, 'C': 6, 'D': 5, 'E': 4, 'F': 3, 'G': 0, 'H': 2}", "system": "{'equation': 'BEAD+HABC+CDHG=BGAFB'}", "category": "CryptoMath", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000294.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: HAAGG+BBEAA+ABFFG=GHHGCD Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 6, 'B': 3, 'C': 2, 'D': 8, 'E': 9, 'F': 5, 'G': 1, 'H': 4}", "system": "{'equation': 'HAAGG+BBEAA+ABFFG=GHHGCD'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000295.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: CDHHD+GIIEF+FIBFJ=HDEAEA Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 4, 'B': 0, 'C': 5, 'D': 9, 'E': 3, 'F': 7, 'G': 6, 'H': 1, 'I': 2, 'J': 8}", "system": "{'equation': 'CDHHD+GIIEF+FIBFJ=HDEAEA'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000296.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: EBCBD+IGBFF+AIBDG=AIDHHC Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 1, 'B': 2, 'C': 0, 'D': 4, 'E': 8, 'F': 7, 'G': 9, 'H': 5, 'I': 3}", "system": "{'equation': 'EBCBD+IGBFF+AIBDG=AIDHHC'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000297.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: HHGHH+DFBAB+GDHGB=EHBACH Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 7, 'B': 5, 'C': 9, 'D': 6, 'E': 1, 'F': 0, 'G': 3, 'H': 8}", "system": "{'equation': 'HHGHH+DFBAB+GDHGB=EHBACH'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000298.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: FFHEH+GFAFB+DAEFC=ABBGGH Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 1, 'B': 6, 'C': 4, 'D': 5, 'E': 8, 'F': 7, 'G': 3, 'H': 2}", "system": "{'equation': 'FFHEH+GFAFB+DAEFC=ABBGGH'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000299.png", "question": "Solve this cryptarithmetic puzzle, where each letter represents a unique digit (0-9).\\nEquation: GHBHI+EEACH+DFEEC=CBCBHG Different letters must correspond to different values, and no leading letter can be zero.\\nPlease provide your answer as a list of comma-separated \"letter\"=number pairs.\\nExample answer format: [\"A\"=5,\"B\"=3,...,\"Z\"=9].", "answer": "{'A': 1, 'B': 3, 'C': 2, 'D': 7, 'E': 8, 'F': 9, 'G': 6, 'H': 4, 'I': 0}", "system": "{'equation': 'GHBHI+EEACH+DFEEC=CBCBHG'}", "category": "CryptoMath", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'cryptomath_evaluator'}"}}
{"image": "images/000300.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 7]\\n1: [0, 2]\\n2: [1, 4, 5, 7]\\n3: [4, 6]\\n4: [2, 3]\\n5: [2, 7]\\n6: [3, 7]\\n7: [0, 2, 5, 6]\\n", "answer": "[0, 7, 6, 3, 4, 2, 7, 5, 2, 1, 0]", "system": "{'0': [1, 7], '1': [0, 2], '2': [1, 4, 5, 7], '3': [4, 6], '4': [2, 3], '5': [2, 7], '6': [3, 7], '7': [0, 2, 5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000301.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 3, 4, 7]\\n1: [0, 2]\\n2: [1, 4]\\n3: [0, 4, 6, 7]\\n4: [0, 2, 3, 6]\\n5: [6, 7]\\n6: [3, 4, 5, 7]\\n7: [0, 3, 5, 6]\\n", "answer": "[0, 7, 6, 5, 7, 3, 6, 4, 3, 0, 4, 2, 1, 0]", "system": "{'0': [1, 3, 4, 7], '1': [0, 2], '2': [1, 4], '3': [0, 4, 6, 7], '4': [0, 2, 3, 6], '5': [6, 7], '6': [3, 4, 5, 7], '7': [0, 3, 5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000302.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 3]\\n1: [0, 2]\\n2: [1, 3, 4, 5]\\n3: [0, 2, 4, 6]\\n4: [2, 3]\\n5: [2, 7]\\n6: [3, 7]\\n7: [5, 6]\\n", "answer": "[0, 3, 6, 7, 5, 2, 4, 3, 2, 1, 0]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 3, 4, 5], '3': [0, 2, 4, 6], '4': [2, 3], '5': [2, 7], '6': [3, 7], '7': [5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000303.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 5]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4, 6]\\n4: [2, 3]\\n5: [0, 7]\\n6: [3, 7]\\n7: [5, 6]\\n", "answer": "[0, 5, 7, 6, 3, 4, 2, 1, 0]", "system": "{'0': [1, 5], '1': [0, 2], '2': [1, 4], '3': [4, 6], '4': [2, 3], '5': [0, 7], '6': [3, 7], '7': [5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000304.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 5]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4, 6]\\n4: [2, 3]\\n5: [0, 7]\\n6: [3, 7]\\n7: [5, 6]\\n", "answer": "[0, 5, 7, 6, 3, 4, 2, 1, 0]", "system": "{'0': [1, 5], '1': [0, 2], '2': [1, 4], '3': [4, 6], '4': [2, 3], '5': [0, 7], '6': [3, 7], '7': [5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000305.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 3]\\n1: [0, 2, 4, 5]\\n2: [1, 3, 4, 5]\\n3: [0, 2, 4, 6]\\n4: [1, 2, 3, 5]\\n5: [1, 2, 4, 7]\\n6: [3, 7]\\n7: [5, 6]\\n", "answer": "[0, 3, 6, 7, 5, 4, 3, 2, 5, 1, 4, 2, 1, 0]", "system": "{'0': [1, 3], '1': [0, 2, 4, 5], '2': [1, 3, 4, 5], '3': [0, 2, 4, 6], '4': [1, 2, 3, 5], '5': [1, 2, 4, 7], '6': [3, 7], '7': [5, 6]}", "category": "eulerian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000306.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 7, 8]\\n2: [1, 3, 4, 6]\\n3: [2, 4, 6, 8]\\n4: [2, 3, 5, 8]\\n5: [4, 6]\\n6: [2, 3, 5, 7]\\n7: [1, 6]\\n8: [1, 3, 4, 9]\\n9: [0, 8]\\n", "answer": "[0, 9, 8, 4, 5, 6, 7, 1, 8, 3, 6, 2, 4, 3, 2, 1, 0]", "system": "{'0': [1, 9], '1': [0, 2, 7, 8], '2': [1, 3, 4, 6], '3': [2, 4, 6, 8], '4': [2, 3, 5, 8], '5': [4, 6], '6': [2, 3, 5, 7], '7': [1, 6], '8': [1, 3, 4, 9], '9': [0, 8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000307.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1]\\n1: [0, 2, 4]\\n2: [1, 3]\\n3: [2, 4, 6, 7]\\n4: [1, 3, 5, 8]\\n5: [4, 6]\\n6: [3, 5, 7]\\n7: [3, 6, 8]\\n8: [4, 7, 9]\\n9: [8]\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2, 4], '2': [1, 3], '3': [2, 4, 6, 7], '4': [1, 3, 5, 8], '5': [4, 6], '6': [3, 5, 7], '7': [3, 6, 8], '8': [4, 7, 9], '9': [8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000308.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4, 6, 7]\\n1: [0, 2, 7, 8]\\n2: [1, 3]\\n3: [2, 6]\\n4: [0, 5, 8, 9]\\n5: [4, 6]\\n6: [0, 3, 5, 7]\\n7: [0, 1, 6, 8]\\n8: [1, 4, 7, 9]\\n9: [4, 8]\\n", "answer": "[0, 7, 8, 9, 4, 8, 1, 7, 6, 5, 4, 0, 6, 3, 2, 1, 0]", "system": "{'0': [1, 4, 6, 7], '1': [0, 2, 7, 8], '2': [1, 3], '3': [2, 6], '4': [0, 5, 8, 9], '5': [4, 6], '6': [0, 3, 5, 7], '7': [0, 1, 6, 8], '8': [1, 4, 7, 9], '9': [4, 8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000309.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9]\\n1: [0, 2]\\n2: [1, 3, 7, 9]\\n3: [2, 5, 6, 8]\\n4: [5, 8]\\n5: [3, 4, 6, 8]\\n6: [3, 5, 7, 9]\\n7: [2, 6]\\n8: [3, 4, 5, 9]\\n9: [0, 2, 6, 8]\\n", "answer": "[0, 9, 8, 5, 6, 9, 2, 7, 6, 3, 8, 4, 5, 3, 2, 1, 0]", "system": "{'0': [1, 9], '1': [0, 2], '2': [1, 3, 7, 9], '3': [2, 5, 6, 8], '4': [5, 8], '5': [3, 4, 6, 8], '6': [3, 5, 7, 9], '7': [2, 6], '8': [3, 4, 5, 9], '9': [0, 2, 6, 8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000310.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 5]\\n1: [0, 2, 5, 8]\\n2: [1, 3]\\n3: [2, 4, 6, 7]\\n4: [3, 5, 8, 9]\\n5: [0, 1, 4, 6]\\n6: [3, 5, 7, 8]\\n7: [3, 6]\\n8: [1, 4, 6, 9]\\n9: [4, 8]\\n", "answer": "[0, 5, 6, 8, 9, 4, 8, 1, 5, 4, 3, 7, 6, 3, 2, 1, 0]", "system": "{'0': [1, 5], '1': [0, 2, 5, 8], '2': [1, 3], '3': [2, 4, 6, 7], '4': [3, 5, 8, 9], '5': [0, 1, 4, 6], '6': [3, 5, 7, 8], '7': [3, 6], '8': [1, 4, 6, 9], '9': [4, 8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000311.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 5, 7, 9]\\n1: [0, 2, 7, 8]\\n2: [1, 3]\\n3: [2, 6]\\n4: [5, 8]\\n5: [0, 4, 6, 9]\\n6: [3, 5, 7, 9]\\n7: [0, 1, 6, 8]\\n8: [1, 4, 7, 9]\\n9: [0, 5, 6, 8]\\n", "answer": "[0, 9, 8, 7, 6, 9, 5, 6, 3, 2, 1, 8, 4, 5, 0, 7, 1, 0]", "system": "{'0': [1, 5, 7, 9], '1': [0, 2, 7, 8], '2': [1, 3], '3': [2, 6], '4': [5, 8], '5': [0, 4, 6, 9], '6': [3, 5, 7, 9], '7': [0, 1, 6, 8], '8': [1, 4, 7, 9], '9': [0, 5, 6, 8]}", "category": "eulerian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000312.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9]\\n1: [0, 2]\\n2: [1, 3, 4, 5]\\n3: [2, 5, 6, 10]\\n4: [2, 5, 8, 11]\\n5: [2, 3, 4, 6]\\n6: [3, 5, 9, 10]\\n7: [10, 11]\\n8: [4, 9]\\n9: [0, 6, 8, 10]\\n10: [3, 6, 7, 9]\\n11: [4, 7]\\n", "answer": "[0, 9, 10, 7, 11, 4, 8, 9, 6, 10, 3, 6, 5, 4, 2, 5, 3, 2, 1, 0]", "system": "{'0': [1, 9], '1': [0, 2], '2': [1, 3, 4, 5], '3': [2, 5, 6, 10], '4': [2, 5, 8, 11], '5': [2, 3, 4, 6], '6': [3, 5, 9, 10], '7': [10, 11], '8': [4, 9], '9': [0, 6, 8, 10], '10': [3, 6, 7, 9], '11': [4, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000313.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6]\\n1: [0, 2, 8, 10]\\n2: [1, 3, 4, 5, 6, 11]\\n3: [2, 4, 6, 10]\\n4: [2, 3, 5, 8]\\n5: [2, 4, 6, 9]\\n6: [0, 2, 3, 5, 7, 8]\\n7: [6, 9, 10, 11]\\n8: [1, 4, 6, 9]\\n9: [5, 7, 8, 10]\\n10: [1, 3, 7, 9]\\n11: [2, 7]\\n", "answer": "[0, 6, 8, 9, 10, 7, 11, 2, 6, 7, 9, 5, 6, 3, 10, 1, 8, 4, 5, 2, 4, 3, 2, 1, 0]", "system": "{'0': [1, 6], '1': [0, 2, 8, 10], '2': [1, 3, 4, 5, 6, 11], '3': [2, 4, 6, 10], '4': [2, 3, 5, 8], '5': [2, 4, 6, 9], '6': [0, 2, 3, 5, 7, 8], '7': [6, 9, 10, 11], '8': [1, 4, 6, 9], '9': [5, 7, 8, 10], '10': [1, 3, 7, 9], '11': [2, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000314.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6, 9, 11]\\n1: [0, 2, 8, 10]\\n2: [1, 3, 4, 11]\\n3: [2, 5, 6, 10]\\n4: [2, 5, 8, 11]\\n5: [3, 4, 6, 9]\\n6: [0, 3, 5, 8]\\n7: [10, 11]\\n8: [1, 4, 6, 9]\\n9: [0, 5, 8, 10]\\n10: [1, 3, 7, 9]\\n11: [0, 2, 4, 7]\\n", "answer": "[0, 11, 7, 10, 9, 8, 6, 5, 9, 0, 6, 3, 10, 1, 8, 4, 11, 2, 4, 5, 3, 2, 1, 0]", "system": "{'0': [1, 6, 9, 11], '1': [0, 2, 8, 10], '2': [1, 3, 4, 11], '3': [2, 5, 6, 10], '4': [2, 5, 8, 11], '5': [3, 4, 6, 9], '6': [0, 3, 5, 8], '7': [10, 11], '8': [1, 4, 6, 9], '9': [0, 5, 8, 10], '10': [1, 3, 7, 9], '11': [0, 2, 4, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000315.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6]\\n1: [0, 2]\\n2: [1, 3, 9, 11]\\n3: [2, 5, 6, 8]\\n4: [5, 8]\\n5: [3, 4, 6, 11]\\n6: [0, 3, 5]\\n7: [9, 10, 11]\\n8: [3, 4, 9]\\n9: [2, 7, 8, 10]\\n10: [7, 9]\\n11: [2, 5, 7]\\n", "answer": "No", "system": "{'0': [1, 6], '1': [0, 2], '2': [1, 3, 9, 11], '3': [2, 5, 6, 8], '4': [5, 8], '5': [3, 4, 6, 11], '6': [0, 3, 5], '7': [9, 10, 11], '8': [3, 4, 9], '9': [2, 7, 8, 10], '10': [7, 9], '11': [2, 5, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000316.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4, 5, 7]\\n1: [0, 2, 4, 6, 7, 8]\\n2: [1, 3, 4, 6, 9, 11]\\n3: [2, 6]\\n4: [0, 1, 2, 5, 8, 9]\\n5: [0, 4, 6, 8]\\n6: [1, 2, 3, 5]\\n7: [0, 1, 10, 11]\\n8: [1, 4, 5, 9]\\n9: [2, 4, 8, 10]\\n10: [7, 9]\\n11: [2, 7]\\n", "answer": "[0, 7, 11, 2, 9, 10, 7, 1, 8, 9, 4, 8, 5, 6, 3, 2, 6, 1, 4, 5, 0, 4, 2, 1, 0]", "system": "{'0': [1, 4, 5, 7], '1': [0, 2, 4, 6, 7, 8], '2': [1, 3, 4, 6, 9, 11], '3': [2, 6], '4': [0, 1, 2, 5, 8, 9], '5': [0, 4, 6, 8], '6': [1, 2, 3, 5], '7': [0, 1, 10, 11], '8': [1, 4, 5, 9], '9': [2, 4, 8, 10], '10': [7, 9], '11': [2, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000317.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6]\\n1: [0, 2, 4, 7]\\n2: [1, 3]\\n3: [2, 6]\\n4: [1, 5, 8, 10]\\n5: [4, 6, 9, 10]\\n6: [0, 3, 5, 8, 9, 11]\\n7: [1, 8, 10, 11]\\n8: [4, 6, 7, 9]\\n9: [5, 6, 8, 10]\\n10: [4, 5, 7, 9]\\n11: [6, 7]\\n", "answer": "[0, 6, 11, 7, 10, 9, 8, 7, 1, 4, 10, 5, 9, 6, 8, 4, 5, 6, 3, 2, 1, 0]", "system": "{'0': [1, 6], '1': [0, 2, 4, 7], '2': [1, 3], '3': [2, 6], '4': [1, 5, 8, 10], '5': [4, 6, 9, 10], '6': [0, 3, 5, 8, 9, 11], '7': [1, 8, 10, 11], '8': [4, 6, 7, 9], '9': [5, 6, 8, 10], '10': [4, 5, 7, 9], '11': [6, 7]}", "category": "eulerian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000318.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9, 11, 13]\\n1: [0, 2, 6, 7, 10, 12]\\n2: [1, 3, 4, 5, 12, 13]\\n3: [2, 6]\\n4: [2, 5, 8, 11]\\n5: [2, 4, 6, 9, 11, 12]\\n6: [1, 3, 5, 10, 11, 13]\\n7: [1, 10, 11, 12]\\n8: [4, 9]\\n9: [0, 5, 8, 10]\\n10: [1, 6, 7, 9, 12, 13]\\n11: [0, 4, 5, 6, 7, 13]\\n12: [1, 2, 5, 7, 10, 13]\\n13: [0, 2, 6, 10, 11, 12]\\n", "answer": "[0, 13, 12, 10, 13, 11, 7, 12, 5, 11, 6, 13, 2, 12, 1, 10, 9, 8, 4, 11, 0, 9, 5, 6, 10, 7, 1, 6, 3, 2, 5, 4, 2, 1, 0]", "system": "{'0': [1, 9, 11, 13], '1': [0, 2, 6, 7, 10, 12], '2': [1, 3, 4, 5, 12, 13], '3': [2, 6], '4': [2, 5, 8, 11], '5': [2, 4, 6, 9, 11, 12], '6': [1, 3, 5, 10, 11, 13], '7': [1, 10, 11, 12], '8': [4, 9], '9': [0, 5, 8, 10], '10': [1, 6, 7, 9, 12, 13], '11': [0, 4, 5, 6, 7, 13], '12': [1, 2, 5, 7, 10, 13], '13': [0, 2, 6, 10, 11, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000319.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4, 6, 13]\\n1: [0, 2, 5, 7]\\n2: [1, 3, 9, 11]\\n3: [2, 6, 10, 13]\\n4: [0, 5, 8, 10]\\n5: [1, 4, 6, 9]\\n6: [0, 3, 5, 8]\\n7: [1, 8, 9, 10, 11, 12]\\n8: [4, 6, 7, 9, 12, 13]\\n9: [2, 5, 7, 8, 10, 13]\\n10: [3, 4, 7, 9, 11, 13]\\n11: [2, 7, 10, 12]\\n12: [7, 8, 11, 13]\\n13: [0, 3, 8, 9, 10, 12]\\n", "answer": "[0, 13, 12, 11, 10, 13, 9, 10, 7, 12, 8, 13, 3, 10, 4, 8, 9, 7, 11, 2, 9, 5, 6, 8, 7, 1, 5, 4, 0, 6, 3, 2, 1, 0]", "system": "{'0': [1, 4, 6, 13], '1': [0, 2, 5, 7], '2': [1, 3, 9, 11], '3': [2, 6, 10, 13], '4': [0, 5, 8, 10], '5': [1, 4, 6, 9], '6': [0, 3, 5, 8], '7': [1, 8, 9, 10, 11, 12], '8': [4, 6, 7, 9, 12, 13], '9': [2, 5, 7, 8, 10, 13], '10': [3, 4, 7, 9, 11, 13], '11': [2, 7, 10, 12], '12': [7, 8, 11, 13], '13': [0, 3, 8, 9, 10, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000320.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4, 11]\\n1: [0, 2, 6, 8, 12]\\n2: [1, 3, 4, 9, 11, 12]\\n3: [2, 4, 5, 6, 8, 13]\\n4: [0, 2, 3, 5, 8, 13]\\n5: [3, 4, 6, 11]\\n6: [1, 3, 5, 8]\\n7: [9, 10, 11, 12]\\n8: [1, 3, 4, 6, 9]\\n9: [2, 7, 8, 10, 13]\\n10: [7, 9, 13]\\n11: [0, 2, 5, 7, 12]\\n12: [1, 2, 7, 11, 13]\\n13: [3, 4, 9, 10, 12]\\n", "answer": "No", "system": "{'0': [1, 4, 11], '1': [0, 2, 6, 8, 12], '2': [1, 3, 4, 9, 11, 12], '3': [2, 4, 5, 6, 8, 13], '4': [0, 2, 3, 5, 8, 13], '5': [3, 4, 6, 11], '6': [1, 3, 5, 8], '7': [9, 10, 11, 12], '8': [1, 3, 4, 6, 9], '9': [2, 7, 8, 10, 13], '10': [7, 9, 13], '11': [0, 2, 5, 7, 12], '12': [1, 2, 7, 11, 13], '13': [3, 4, 9, 10, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000321.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1]\\n1: [0, 2, 4, 10, 12]\\n2: [1, 3, 5, 9]\\n3: [2, 6, 8]\\n4: [1, 5, 8, 10]\\n5: [2, 4, 6]\\n6: [3, 5, 7, 8]\\n7: [6, 10, 11]\\n8: [3, 4, 6, 9]\\n9: [2, 8, 10, 13]\\n10: [1, 4, 7, 9, 13]\\n11: [7]\\n12: [1, 13]\\n13: [9, 10, 12]\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2, 4, 10, 12], '2': [1, 3, 5, 9], '3': [2, 6, 8], '4': [1, 5, 8, 10], '5': [2, 4, 6], '6': [3, 5, 7, 8], '7': [6, 10, 11], '8': [3, 4, 6, 9], '9': [2, 8, 10, 13], '10': [1, 4, 7, 9, 13], '11': [7], '12': [1, 13], '13': [9, 10, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000322.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4]\\n1: [0, 2, 4, 7, 10, 12]\\n2: [1, 3, 9, 12]\\n3: [2, 4, 5, 6, 8, 13]\\n4: [0, 1, 3, 5, 8, 11]\\n5: [3, 4, 6, 9, 11, 12]\\n6: [3, 5, 7, 13]\\n7: [1, 6, 10, 11]\\n8: [3, 4, 9, 12]\\n9: [2, 5, 8, 10]\\n10: [1, 7, 9, 13]\\n11: [4, 5, 7, 12]\\n12: [1, 2, 5, 8, 11, 13]\\n13: [3, 6, 10, 12]\\n", "answer": "[0, 4, 11, 12, 13, 10, 9, 8, 12, 5, 11, 7, 10, 1, 12, 2, 9, 5, 6, 13, 3, 8, 4, 5, 3, 6, 7, 1, 4, 3, 2, 1, 0]", "system": "{'0': [1, 4], '1': [0, 2, 4, 7, 10, 12], '2': [1, 3, 9, 12], '3': [2, 4, 5, 6, 8, 13], '4': [0, 1, 3, 5, 8, 11], '5': [3, 4, 6, 9, 11, 12], '6': [3, 5, 7, 13], '7': [1, 6, 10, 11], '8': [3, 4, 9, 12], '9': [2, 5, 8, 10], '10': [1, 7, 9, 13], '11': [4, 5, 7, 12], '12': [1, 2, 5, 8, 11, 13], '13': [3, 6, 10, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000323.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 4, 6, 9, 11]\\n1: [0, 2, 4, 6, 7, 12]\\n2: [1, 3, 4, 9, 13]\\n3: [2, 4, 6, 10, 13]\\n4: [0, 1, 2, 3, 5, 8, 10]\\n5: [4, 6]\\n6: [0, 1, 3, 5, 7, 11, 13]\\n7: [1, 6, 8, 9, 10, 11, 12]\\n8: [4, 7, 9]\\n9: [0, 2, 7, 8, 10, 13]\\n10: [3, 4, 7, 9, 11, 13]\\n11: [0, 6, 7, 10, 12, 13]\\n12: [1, 7, 11, 13]\\n13: [2, 3, 6, 9, 10, 11, 12]\\n", "answer": "No", "system": "{'0': [1, 4, 6, 9, 11], '1': [0, 2, 4, 6, 7, 12], '2': [1, 3, 4, 9, 13], '3': [2, 4, 6, 10, 13], '4': [0, 1, 2, 3, 5, 8, 10], '5': [4, 6], '6': [0, 1, 3, 5, 7, 11, 13], '7': [1, 6, 8, 9, 10, 11, 12], '8': [4, 7, 9], '9': [0, 2, 7, 8, 10, 13], '10': [3, 4, 7, 9, 11, 13], '11': [0, 6, 7, 10, 12, 13], '12': [1, 7, 11, 13], '13': [2, 3, 6, 9, 10, 11, 12]}", "category": "eulerian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000324.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 5, 6, 7]\\n1: [0, 2, 6, 7, 8, 14]\\n2: [1, 3, 11, 12]\\n3: [2, 6, 13, 14]\\n4: [5, 8]\\n5: [0, 4, 6, 9, 10, 12]\\n6: [0, 1, 3, 5, 11, 15]\\n7: [0, 1, 9, 10, 11, 12]\\n8: [1, 4, 9, 14]\\n9: [5, 7, 8, 10]\\n10: [5, 7, 9, 11]\\n11: [2, 6, 7, 10, 13, 14]\\n12: [2, 5, 7, 13]\\n13: [3, 11, 12, 14]\\n14: [1, 3, 8, 11, 13, 15]\\n15: [6, 14]\\n", "answer": "[0, 7, 12, 13, 14, 15, 6, 11, 14, 8, 9, 10, 11, 13, 3, 14, 1, 8, 4, 5, 12, 2, 11, 7, 10, 5, 9, 7, 1, 6, 5, 0, 6, 3, 2, 1, 0]", "system": "{'0': [1, 5, 6, 7], '1': [0, 2, 6, 7, 8, 14], '2': [1, 3, 11, 12], '3': [2, 6, 13, 14], '4': [5, 8], '5': [0, 4, 6, 9, 10, 12], '6': [0, 1, 3, 5, 11, 15], '7': [0, 1, 9, 10, 11, 12], '8': [1, 4, 9, 14], '9': [5, 7, 8, 10], '10': [5, 7, 9, 11], '11': [2, 6, 7, 10, 13, 14], '12': [2, 5, 7, 13], '13': [3, 11, 12, 14], '14': [1, 3, 8, 11, 13, 15], '15': [6, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000325.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9, 11, 13]\\n1: [0, 2, 6, 8, 12, 14]\\n2: [1, 3, 4, 6, 9, 12]\\n3: [2, 4, 5, 6, 13, 14]\\n4: [2, 3, 5, 8, 11, 15]\\n5: [3, 4, 6, 14]\\n6: [1, 2, 3, 5]\\n7: [9, 10, 11, 12]\\n8: [1, 4, 9, 14]\\n9: [0, 2, 7, 8, 10, 14]\\n10: [7, 9]\\n11: [0, 4, 7, 14]\\n12: [1, 2, 7, 13]\\n13: [0, 3, 12, 14]\\n14: [1, 3, 5, 8, 9, 11, 13, 15]\\n15: [4, 14]\\n", "answer": "[0, 13, 14, 15, 4, 11, 14, 9, 10, 7, 12, 13, 3, 14, 8, 9, 7, 11, 0, 9, 2, 12, 1, 14, 5, 6, 3, 5, 4, 8, 1, 6, 2, 4, 3, 2, 1, 0]", "system": "{'0': [1, 9, 11, 13], '1': [0, 2, 6, 8, 12, 14], '2': [1, 3, 4, 6, 9, 12], '3': [2, 4, 5, 6, 13, 14], '4': [2, 3, 5, 8, 11, 15], '5': [3, 4, 6, 14], '6': [1, 2, 3, 5], '7': [9, 10, 11, 12], '8': [1, 4, 9, 14], '9': [0, 2, 7, 8, 10, 14], '10': [7, 9], '11': [0, 4, 7, 14], '12': [1, 2, 7, 13], '13': [0, 3, 12, 14], '14': [1, 3, 5, 8, 9, 11, 13, 15], '15': [4, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000326.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6, 9, 14]\\n1: [0, 2, 5, 8]\\n2: [1, 3, 5, 7, 9, 11, 12, 13]\\n3: [2, 4, 5, 6]\\n4: [3, 5, 8, 10, 13, 15]\\n5: [1, 2, 3, 4, 6, 9]\\n6: [0, 3, 5, 7, 8, 9, 10, 15]\\n7: [2, 6, 10, 11]\\n8: [1, 4, 6, 9, 13, 15]\\n9: [0, 2, 5, 6, 8, 10]\\n10: [4, 6, 7, 9]\\n11: [2, 7, 13, 14]\\n12: [2, 13]\\n13: [2, 4, 8, 11, 12, 14]\\n14: [0, 11, 13, 15]\\n15: [4, 6, 8, 14]\\n", "answer": "[0, 14, 15, 8, 13, 14, 11, 13, 12, 2, 13, 4, 15, 6, 10, 9, 8, 6, 9, 5, 6, 7, 11, 2, 9, 0, 6, 3, 5, 4, 10, 7, 2, 5, 1, 8, 4, 3, 2, 1, 0]", "system": "{'0': [1, 6, 9, 14], '1': [0, 2, 5, 8], '2': [1, 3, 5, 7, 9, 11, 12, 13], '3': [2, 4, 5, 6], '4': [3, 5, 8, 10, 13, 15], '5': [1, 2, 3, 4, 6, 9], '6': [0, 3, 5, 7, 8, 9, 10, 15], '7': [2, 6, 10, 11], '8': [1, 4, 6, 9, 13, 15], '9': [0, 2, 5, 6, 8, 10], '10': [4, 6, 7, 9], '11': [2, 7, 13, 14], '12': [2, 13], '13': [2, 4, 8, 11, 12, 14], '14': [0, 11, 13, 15], '15': [4, 6, 8, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000327.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 5, 8, 10, 15]\\n2: [1, 3, 4, 6, 7, 9, 11, 12]\\n3: [2, 5, 6, 14]\\n4: [2, 5, 8, 10]\\n5: [1, 3, 4, 6]\\n6: [2, 3, 5, 7, 10, 15]\\n7: [2, 6, 10, 11]\\n8: [1, 4, 9, 15]\\n9: [0, 2, 8, 10]\\n10: [1, 4, 6, 7, 9, 12]\\n11: [2, 7, 12, 14]\\n12: [2, 10, 11, 13]\\n13: [12, 14]\\n14: [3, 11, 13, 15]\\n15: [1, 6, 8, 14]\\n", "answer": "[0, 9, 10, 12, 13, 14, 15, 8, 9, 2, 12, 11, 14, 3, 6, 15, 1, 10, 7, 11, 2, 7, 6, 10, 4, 8, 1, 5, 6, 2, 4, 5, 3, 2, 1, 0]", "system": "{'0': [1, 9], '1': [0, 2, 5, 8, 10, 15], '2': [1, 3, 4, 6, 7, 9, 11, 12], '3': [2, 5, 6, 14], '4': [2, 5, 8, 10], '5': [1, 3, 4, 6], '6': [2, 3, 5, 7, 10, 15], '7': [2, 6, 10, 11], '8': [1, 4, 9, 15], '9': [0, 2, 8, 10], '10': [1, 4, 6, 7, 9, 12], '11': [2, 7, 12, 14], '12': [2, 10, 11, 13], '13': [12, 14], '14': [3, 11, 13, 15], '15': [1, 6, 8, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000328.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 11, 13, 14]\\n1: [0, 2, 8, 14]\\n2: [1, 3, 7, 9, 13, 15]\\n3: [2, 4, 6, 14]\\n4: [3, 5, 8, 15]\\n5: [4, 6, 9, 14]\\n6: [3, 5, 7, 15]\\n7: [2, 6, 10, 11]\\n8: [1, 4, 9, 14]\\n9: [2, 5, 8, 10]\\n10: [7, 9]\\n11: [0, 7, 12, 14]\\n12: [11, 13]\\n13: [0, 2, 12, 14]\\n14: [0, 1, 3, 5, 8, 11, 13, 15]\\n15: [2, 4, 6, 14]\\n", "answer": "[0, 14, 15, 6, 7, 11, 14, 13, 12, 11, 0, 13, 2, 15, 4, 8, 14, 5, 9, 10, 7, 2, 9, 8, 1, 14, 3, 6, 5, 4, 3, 2, 1, 0]", "system": "{'0': [1, 11, 13, 14], '1': [0, 2, 8, 14], '2': [1, 3, 7, 9, 13, 15], '3': [2, 4, 6, 14], '4': [3, 5, 8, 15], '5': [4, 6, 9, 14], '6': [3, 5, 7, 15], '7': [2, 6, 10, 11], '8': [1, 4, 9, 14], '9': [2, 5, 8, 10], '10': [7, 9], '11': [0, 7, 12, 14], '12': [11, 13], '13': [0, 2, 12, 14], '14': [0, 1, 3, 5, 8, 11, 13, 15], '15': [2, 4, 6, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000329.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3,0]). If not, output 'No'.0: [1, 6, 11, 13]\\n1: [0, 2, 7, 12]\\n2: [1, 3, 11, 12, 13, 15]\\n3: [2, 4, 6, 7]\\n4: [3, 5, 8, 13]\\n5: [4, 6]\\n6: [0, 3, 5, 7, 8, 10]\\n7: [1, 3, 6, 8, 9, 10, 11, 12]\\n8: [4, 6, 7, 9, 12, 15]\\n9: [7, 8, 10, 15]\\n10: [6, 7, 9, 12, 13, 14]\\n11: [0, 2, 7, 14]\\n12: [1, 2, 7, 8, 10, 13]\\n13: [0, 2, 4, 10, 12, 14]\\n14: [10, 11, 13, 15]\\n15: [2, 8, 9, 14]\\n", "answer": "[0, 13, 14, 15, 9, 10, 14, 11, 7, 12, 13, 10, 12, 8, 15, 2, 13, 4, 8, 9, 7, 10, 6, 8, 7, 6, 5, 4, 3, 7, 1, 12, 2, 11, 0, 6, 3, 2, 1, 0]", "system": "{'0': [1, 6, 11, 13], '1': [0, 2, 7, 12], '2': [1, 3, 11, 12, 13, 15], '3': [2, 4, 6, 7], '4': [3, 5, 8, 13], '5': [4, 6], '6': [0, 3, 5, 7, 8, 10], '7': [1, 3, 6, 8, 9, 10, 11, 12], '8': [4, 6, 7, 9, 12, 15], '9': [7, 8, 10, 15], '10': [6, 7, 9, 12, 13, 14], '11': [0, 2, 7, 14], '12': [1, 2, 7, 8, 10, 13], '13': [0, 2, 4, 10, 12, 14], '14': [10, 11, 13, 15], '15': [2, 8, 9, 14]}", "category": "eulerian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_cycle_evaluator'}"}}
{"image": "images/000330.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 5]\\n1: [0, 2]\\n2: [1, 3, 4]\\n3: [2, 4]\\n4: [0, 2, 3, 5]\\n5: [0, 4]\\n", "answer": "[0, 5, 4, 3, 2, 4, 0, 1, 2, 0]", "system": "{'0': [1, 4, 5], '1': [0, 2], '2': [1, 3, 4], '3': [2, 4], '4': [0, 2, 3, 5], '5': [0, 4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000331.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4]\\n4: [2, 3, 5]\\n5: [4]\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2], '2': [1, 4], '3': [4], '4': [2, 3, 5], '5': [4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000332.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1]\\n1: [0, 2, 3]\\n2: [1, 3, 4]\\n3: [1, 2, 4]\\n4: [2, 3, 5]\\n5: [4]\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2, 3], '2': [1, 3, 4], '3': [1, 2, 4], '4': [2, 3, 5], '5': [4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000333.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 5]\\n1: [0, 2, 4, 5]\\n2: [1, 4]\\n3: [4]\\n4: [1, 2, 3, 5]\\n5: [0, 1, 4]\\n", "answer": "[3, 4, 5, 1, 4, 2, 1, 0, 5, 3]", "system": "{'0': [1, 5], '1': [0, 2, 4, 5], '2': [1, 4], '3': [4], '4': [1, 2, 3, 5], '5': [0, 1, 4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000334.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1]\\n1: [0, 2, 4]\\n2: [1, 4, 5]\\n3: [4]\\n4: [1, 2, 3, 5]\\n5: [2, 4]\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2, 4], '2': [1, 4, 5], '3': [4], '4': [1, 2, 3, 5], '5': [2, 4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000335.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 5]\\n1: [0, 2]\\n2: [1, 3, 4]\\n3: [2, 4]\\n4: [0, 2, 3, 5]\\n5: [0, 4]\\n", "answer": "[0, 5, 4, 3, 2, 4, 0, 1, 2, 0]", "system": "{'0': [1, 4, 5], '1': [0, 2], '2': [1, 3, 4], '3': [2, 4], '4': [0, 2, 3, 5], '5': [0, 4]}", "category": "eulerian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000336.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4]\\n1: [0, 2, 6]\\n2: [1, 4, 5]\\n3: [4, 6, 7]\\n4: [0, 2, 3]\\n5: [2, 7]\\n6: [1, 3, 7]\\n7: [3, 5, 6]\\n", "answer": "No", "system": "{'0': [1, 4], '1': [0, 2, 6], '2': [1, 4, 5], '3': [4, 6, 7], '4': [0, 2, 3], '5': [2, 7], '6': [1, 3, 7], '7': [3, 5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000337.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 7]\\n1: [0, 2]\\n2: [1, 4, 5, 7]\\n3: [4, 6]\\n4: [2, 3, 6]\\n5: [2, 7]\\n6: [3, 4, 7]\\n7: [0, 2, 5, 6]\\n", "answer": "[4, 6, 7, 5, 2, 7, 0, 1, 2, 4, 3, 6, 4]", "system": "{'0': [1, 7], '1': [0, 2], '2': [1, 4, 5, 7], '3': [4, 6], '4': [2, 3, 6], '5': [2, 7], '6': [3, 4, 7], '7': [0, 2, 5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000338.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 5]\\n1: [0, 2]\\n2: [1, 3, 4, 7]\\n3: [2, 4, 6]\\n4: [2, 3]\\n5: [0, 7]\\n6: [3, 7]\\n7: [2, 5, 6]\\n", "answer": "[3, 6, 7, 5, 0, 1, 2, 4, 3, 2, 7, 3]", "system": "{'0': [1, 5], '1': [0, 2], '2': [1, 3, 4, 7], '3': [2, 4, 6], '4': [2, 3], '5': [0, 7], '6': [3, 7], '7': [2, 5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000339.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 5]\\n1: [0, 2, 6]\\n2: [1, 4, 7]\\n3: [4, 6]\\n4: [0, 2, 3]\\n5: [0, 7]\\n6: [1, 3, 7]\\n7: [2, 5, 6]\\n", "answer": "No", "system": "{'0': [1, 4, 5], '1': [0, 2, 6], '2': [1, 4, 7], '3': [4, 6], '4': [0, 2, 3], '5': [0, 7], '6': [1, 3, 7], '7': [2, 5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000340.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1]\\n1: [0, 2]\\n2: [1, 4, 5, 7]\\n3: [4, 6]\\n4: [2, 3, 7]\\n5: [2, 7]\\n6: [3, 7]\\n7: [2, 4, 5, 6]\\n", "answer": "[0, 1, 2, 7, 6, 3, 4, 7, 5, 2, 4, 0]", "system": "{'0': [1], '1': [0, 2], '2': [1, 4, 5, 7], '3': [4, 6], '4': [2, 3, 7], '5': [2, 7], '6': [3, 7], '7': [2, 4, 5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000341.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 5]\\n1: [0, 2, 6]\\n2: [1, 3, 4]\\n3: [2, 4, 6]\\n4: [0, 2, 3, 5]\\n5: [0, 4, 7]\\n6: [1, 3, 7]\\n7: [5, 6]\\n", "answer": "No", "system": "{'0': [1, 4, 5], '1': [0, 2, 6], '2': [1, 3, 4], '3': [2, 4, 6], '4': [0, 2, 3, 5], '5': [0, 4, 7], '6': [1, 3, 7], '7': [5, 6]}", "category": "eulerian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000342.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 6]\\n2: [1, 3]\\n3: [2, 5, 6]\\n4: [5, 8, 9]\\n5: [3, 4, 6]\\n6: [1, 3, 5, 7]\\n7: [6, 9]\\n8: [4, 9]\\n9: [0, 4, 7, 8]\\n", "answer": "No", "system": "{'0': [1, 9], '1': [0, 2, 6], '2': [1, 3], '3': [2, 5, 6], '4': [5, 8, 9], '5': [3, 4, 6], '6': [1, 3, 5, 7], '7': [6, 9], '8': [4, 9], '9': [0, 4, 7, 8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000343.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4]\\n1: [0, 2]\\n2: [1, 3]\\n3: [2, 4, 6, 8]\\n4: [0, 3, 5, 8]\\n5: [4, 6]\\n6: [3, 5, 7, 8]\\n7: [6, 8]\\n8: [3, 4, 6, 7, 9]\\n9: [8]\\n", "answer": "[8, 7, 6, 8, 4, 5, 6, 3, 4, 0, 1, 2, 3, 8, 9, 8]", "system": "{'0': [1, 4], '1': [0, 2], '2': [1, 3], '3': [2, 4, 6, 8], '4': [0, 3, 5, 8], '5': [4, 6], '6': [3, 5, 7, 8], '7': [6, 8], '8': [3, 4, 6, 7, 9], '9': [8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000344.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 7]\\n2: [1, 3, 4, 7]\\n3: [2, 6]\\n4: [2, 5, 8, 9]\\n5: [4, 6]\\n6: [3, 5, 7, 9]\\n7: [1, 2, 6]\\n8: [4, 9]\\n9: [0, 4, 6, 8]\\n", "answer": "[1, 7, 6, 9, 8, 4, 9, 0, 1, 2, 4, 5, 6, 3, 2, 7, 1]", "system": "{'0': [1, 9], '1': [0, 2, 7], '2': [1, 3, 4, 7], '3': [2, 6], '4': [2, 5, 8, 9], '5': [4, 6], '6': [3, 5, 7, 9], '7': [1, 2, 6], '8': [4, 9], '9': [0, 4, 6, 8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000345.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 7]\\n1: [0, 2, 7]\\n2: [1, 3, 6, 7]\\n3: [2, 6, 7]\\n4: [5, 8]\\n5: [4, 6]\\n6: [2, 3, 5, 7]\\n7: [0, 1, 2, 3, 6, 9]\\n8: [4, 9]\\n9: [7, 8]\\n", "answer": "[1, 7, 9, 8, 4, 5, 6, 7, 3, 6, 2, 7, 0, 1, 2, 3, 1]", "system": "{'0': [1, 7], '1': [0, 2, 7], '2': [1, 3, 6, 7], '3': [2, 6, 7], '4': [5, 8], '5': [4, 6], '6': [2, 3, 5, 7], '7': [0, 1, 2, 3, 6, 9], '8': [4, 9], '9': [7, 8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000346.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1]\\n1: [0, 2, 6, 7]\\n2: [1, 3]\\n3: [2, 6]\\n4: [5, 8]\\n5: [4, 6]\\n6: [1, 3, 5, 7]\\n7: [1, 6]\\n8: [4, 9]\\n9: [8]\\n", "answer": "[0, 1, 7, 6, 3, 2, 1, 6, 5, 4, 8, 9, 0]", "system": "{'0': [1], '1': [0, 2, 6, 7], '2': [1, 3], '3': [2, 6], '4': [5, 8], '5': [4, 6], '6': [1, 3, 5, 7], '7': [1, 6], '8': [4, 9], '9': [8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000347.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 5]\\n2: [1, 3]\\n3: [2, 6, 8]\\n4: [5, 8, 9]\\n5: [1, 4, 6]\\n6: [3, 5, 7]\\n7: [6, 8]\\n8: [3, 4, 7, 9]\\n9: [0, 4, 8]\\n", "answer": "No", "system": "{'0': [1, 9], '1': [0, 2, 5], '2': [1, 3], '3': [2, 6, 8], '4': [5, 8, 9], '5': [1, 4, 6], '6': [3, 5, 7], '7': [6, 8], '8': [3, 4, 7, 9], '9': [0, 4, 8]}", "category": "eulerian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000348.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 6]\\n1: [0, 2, 5, 10]\\n2: [1, 3]\\n3: [2, 4, 5, 6, 7, 8]\\n4: [3, 5, 8, 11]\\n5: [1, 3, 4, 6, 10, 11]\\n6: [0, 3, 5]\\n7: [3, 8, 10, 11]\\n8: [3, 4, 7, 9]\\n9: [8, 10]\\n10: [1, 5, 7, 9, 11]\\n11: [4, 5, 7, 10]\\n", "answer": "[6, 5, 11, 10, 9, 8, 7, 11, 4, 8, 3, 7, 10, 5, 4, 3, 6, 0, 1, 5, 3, 2, 1, 10, 6]", "system": "{'0': [1, 6], '1': [0, 2, 5, 10], '2': [1, 3], '3': [2, 4, 5, 6, 7, 8], '4': [3, 5, 8, 11], '5': [1, 3, 4, 6, 10, 11], '6': [0, 3, 5], '7': [3, 8, 10, 11], '8': [3, 4, 7, 9], '9': [8, 10], '10': [1, 5, 7, 9, 11], '11': [4, 5, 7, 10]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000349.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 11]\\n1: [0, 2]\\n2: [1, 3, 4, 9]\\n3: [2, 5, 6, 7]\\n4: [2, 5, 8]\\n5: [3, 4, 6, 9]\\n6: [3, 5]\\n7: [3, 8, 10, 11]\\n8: [4, 7, 9]\\n9: [2, 5, 8, 10]\\n10: [7, 9]\\n11: [0, 7]\\n", "answer": "[4, 8, 9, 10, 7, 11, 0, 1, 2, 9, 5, 6, 3, 5, 4, 2, 3, 7, 8, 4]", "system": "{'0': [1, 11], '1': [0, 2], '2': [1, 3, 4, 9], '3': [2, 5, 6, 7], '4': [2, 5, 8], '5': [3, 4, 6, 9], '6': [3, 5], '7': [3, 8, 10, 11], '8': [4, 7, 9], '9': [2, 5, 8, 10], '10': [7, 9], '11': [0, 7]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000350.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 5, 6, 9]\\n1: [0, 2, 4, 6, 8, 10]\\n2: [1, 3, 7, 9]\\n3: [2, 6, 8, 10]\\n4: [1, 5, 8, 10]\\n5: [0, 4, 6, 9, 10, 11]\\n6: [0, 1, 3, 5]\\n7: [2, 9, 10, 11]\\n8: [1, 3, 4, 9]\\n9: [0, 2, 5, 7, 8, 10]\\n10: [1, 3, 4, 5, 7, 9]\\n11: [5, 7]\\n", "answer": "[0, 9, 10, 7, 11, 5, 10, 4, 8, 9, 7, 2, 9, 5, 6, 3, 10, 1, 8, 3, 2, 1, 6, 0, 5, 4, 1, 0, 0]", "system": "{'0': [1, 5, 6, 9], '1': [0, 2, 4, 6, 8, 10], '2': [1, 3, 7, 9], '3': [2, 6, 8, 10], '4': [1, 5, 8, 10], '5': [0, 4, 6, 9, 10, 11], '6': [0, 1, 3, 5], '7': [2, 9, 10, 11], '8': [1, 3, 4, 9], '9': [0, 2, 5, 7, 8, 10], '10': [1, 3, 4, 5, 7, 9], '11': [5, 7]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000351.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 5, 6, 7, 9, 11]\\n1: [0, 2, 5, 7]\\n2: [1, 3, 6, 11]\\n3: [2, 6, 7, 8]\\n4: [5, 8, 10, 11]\\n5: [0, 1, 4, 6, 11]\\n6: [0, 2, 3, 5, 8, 10]\\n7: [0, 1, 3, 9, 10, 11]\\n8: [3, 4, 6, 9]\\n9: [0, 7, 8, 10]\\n10: [4, 6, 7, 9]\\n11: [0, 2, 4, 5, 7]\\n", "answer": "[5, 11, 7, 10, 9, 8, 6, 10, 4, 11, 2, 6, 5, 4, 8, 3, 7, 9, 0, 7, 1, 5, 0, 6, 3, 2, 1, 0, 11, 5]", "system": "{'0': [1, 5, 6, 7, 9, 11], '1': [0, 2, 5, 7], '2': [1, 3, 6, 11], '3': [2, 6, 7, 8], '4': [5, 8, 10, 11], '5': [0, 1, 4, 6, 11], '6': [0, 2, 3, 5, 8, 10], '7': [0, 1, 3, 9, 10, 11], '8': [3, 4, 6, 9], '9': [0, 7, 8, 10], '10': [4, 6, 7, 9], '11': [0, 2, 4, 5, 7]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000352.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 6, 7, 11]\\n1: [0, 2, 7, 8]\\n2: [1, 3, 5, 6]\\n3: [2, 6, 8]\\n4: [5, 8]\\n5: [2, 4, 6, 10]\\n6: [0, 2, 3, 5, 7, 10]\\n7: [0, 1, 6, 8, 10, 11]\\n8: [1, 3, 4, 7, 9]\\n9: [8, 10]\\n10: [5, 6, 7, 9]\\n11: [0, 7]\\n", "answer": "[3, 8, 9, 10, 7, 11, 0, 7, 8, 4, 5, 10, 6, 7, 1, 2, 6, 5, 2, 3, 6, 0, 1, 8, 3]", "system": "{'0': [1, 6, 7, 11], '1': [0, 2, 7, 8], '2': [1, 3, 5, 6], '3': [2, 6, 8], '4': [5, 8], '5': [2, 4, 6, 10], '6': [0, 2, 3, 5, 7, 10], '7': [0, 1, 6, 8, 10, 11], '8': [1, 3, 4, 7, 9], '9': [8, 10], '10': [5, 6, 7, 9], '11': [0, 7]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000353.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9]\\n1: [0, 2, 5, 8, 10]\\n2: [1, 3]\\n3: [2, 6, 8, 10]\\n4: [5, 8, 11]\\n5: [1, 4, 6, 8]\\n6: [3, 5]\\n7: [8, 9, 10, 11]\\n8: [1, 3, 4, 5, 7, 9]\\n9: [0, 7, 8, 10]\\n10: [1, 3, 7, 9]\\n11: [4, 7]\\n", "answer": "[1, 10, 9, 8, 7, 11, 4, 8, 5, 6, 3, 10, 7, 9, 0, 1, 8, 3, 2, 1, 5, 4, 1]", "system": "{'0': [1, 9], '1': [0, 2, 5, 8, 10], '2': [1, 3], '3': [2, 6, 8, 10], '4': [5, 8, 11], '5': [1, 4, 6, 8], '6': [3, 5], '7': [8, 9, 10, 11], '8': [1, 3, 4, 5, 7, 9], '9': [0, 7, 8, 10], '10': [1, 3, 7, 9], '11': [4, 7]}", "category": "eulerian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000354.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 5, 7, 11]\\n1: [0, 2, 14, 15]\\n2: [1, 3, 11, 12, 13, 15]\\n3: [2, 6, 7, 8, 13]\\n4: [5, 8]\\n5: [0, 4, 6, 9, 10, 12, 14]\\n6: [3, 5, 7, 11, 13, 15]\\n7: [0, 3, 6, 9, 10, 11, 12, 14]\\n8: [3, 4, 9, 15]\\n9: [5, 7, 8, 10]\\n10: [5, 7, 9, 13]\\n11: [0, 2, 6, 7, 14, 15]\\n12: [2, 5, 7, 13]\\n13: [2, 3, 6, 10, 12, 14]\\n14: [1, 5, 7, 11, 13, 15]\\n15: [1, 2, 6, 8, 11, 14]\\n", "answer": "[3, 13, 14, 15, 11, 14, 7, 12, 13, 10, 9, 8, 15, 6, 13, 2, 15, 1, 14, 5, 12, 2, 11, 7, 10, 5, 9, 7, 6, 11, 0, 7, 3, 8, 4, 5, 6, 3, 2, 1, 0, 5, 3]", "system": "{'0': [1, 5, 7, 11], '1': [0, 2, 14, 15], '2': [1, 3, 11, 12, 13, 15], '3': [2, 6, 7, 8, 13], '4': [5, 8], '5': [0, 4, 6, 9, 10, 12, 14], '6': [3, 5, 7, 11, 13, 15], '7': [0, 3, 6, 9, 10, 11, 12, 14], '8': [3, 4, 9, 15], '9': [5, 7, 8, 10], '10': [5, 7, 9, 13], '11': [0, 2, 6, 7, 14, 15], '12': [2, 5, 7, 13], '13': [2, 3, 6, 10, 12, 14], '14': [1, 5, 7, 11, 13, 15], '15': [1, 2, 6, 8, 11, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000355.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 6, 7, 11]\\n1: [0, 2, 8, 12]\\n2: [1, 3, 5, 7, 12, 13]\\n3: [2, 6, 8, 13, 14]\\n4: [5, 8, 11, 13]\\n5: [2, 4, 6, 11, 12, 14]\\n6: [0, 3, 5]\\n7: [0, 2, 9, 10, 11, 12]\\n8: [1, 3, 4, 9, 13, 14]\\n9: [7, 8, 10, 12]\\n10: [7, 9]\\n11: [0, 4, 5, 7, 14, 15]\\n12: [1, 2, 5, 7, 9, 13]\\n13: [2, 3, 4, 8, 12, 14]\\n14: [3, 5, 8, 11, 13, 15]\\n15: [11, 14]\\n", "answer": "[3, 14, 15, 11, 14, 13, 12, 9, 10, 7, 12, 5, 14, 8, 13, 4, 11, 7, 9, 8, 4, 5, 11, 0, 7, 2, 13, 3, 8, 1, 12, 2, 5, 6, 3, 2, 1, 0, 6, 3]", "system": "{'0': [1, 6, 7, 11], '1': [0, 2, 8, 12], '2': [1, 3, 5, 7, 12, 13], '3': [2, 6, 8, 13, 14], '4': [5, 8, 11, 13], '5': [2, 4, 6, 11, 12, 14], '6': [0, 3, 5], '7': [0, 2, 9, 10, 11, 12], '8': [1, 3, 4, 9, 13, 14], '9': [7, 8, 10, 12], '10': [7, 9], '11': [0, 4, 5, 7, 14, 15], '12': [1, 2, 5, 7, 9, 13], '13': [2, 3, 4, 8, 12, 14], '14': [3, 5, 8, 11, 13, 15], '15': [11, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000356.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9, 11, 13]\\n1: [0, 2, 8, 10]\\n2: [1, 3, 7, 15]\\n3: [2, 5, 6, 7]\\n4: [5, 8, 9, 10, 11, 13]\\n5: [3, 4, 6, 14]\\n6: [3, 5, 15]\\n7: [2, 3, 8, 10, 11]\\n8: [1, 4, 7, 9, 13, 14]\\n9: [0, 4, 8, 10]\\n10: [1, 4, 7, 9, 14, 15]\\n11: [0, 4, 7, 12, 13, 14]\\n12: [11, 13]\\n13: [0, 4, 8, 11, 12, 14]\\n14: [5, 8, 10, 11, 13, 15]\\n15: [2, 6, 10, 14]\\n", "answer": "[6, 15, 14, 13, 12, 11, 14, 10, 15, 2, 7, 11, 13, 8, 14, 5, 6, 3, 7, 10, 9, 8, 4, 13, 0, 11, 4, 10, 1, 2, 3, 5, 4, 9, 0, 1, 8, 7, 6]", "system": "{'0': [1, 9, 11, 13], '1': [0, 2, 8, 10], '2': [1, 3, 7, 15], '3': [2, 5, 6, 7], '4': [5, 8, 9, 10, 11, 13], '5': [3, 4, 6, 14], '6': [3, 5, 15], '7': [2, 3, 8, 10, 11], '8': [1, 4, 7, 9, 13, 14], '9': [0, 4, 8, 10], '10': [1, 4, 7, 9, 14, 15], '11': [0, 4, 7, 12, 13, 14], '12': [11, 13], '13': [0, 4, 8, 11, 12, 14], '14': [5, 8, 10, 11, 13, 15], '15': [2, 6, 10, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000357.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 6, 9]\\n1: [0, 2, 4, 8, 10, 15]\\n2: [1, 3, 4, 12]\\n3: [2, 5, 6, 10, 13, 14]\\n4: [0, 1, 2, 5, 8, 9, 10, 13]\\n5: [3, 4, 6, 12]\\n6: [0, 3, 5, 9]\\n7: [10, 11]\\n8: [1, 4, 9, 13, 14, 15]\\n9: [0, 4, 6, 8, 10]\\n10: [1, 3, 4, 7, 9, 11, 13, 14]\\n11: [7, 10, 12, 14]\\n12: [2, 5, 11, 13]\\n13: [3, 4, 8, 10, 12, 14]\\n14: [3, 8, 10, 11, 13, 15]\\n15: [1, 8, 14]\\n", "answer": "[9, 10, 14, 15, 8, 14, 13, 12, 11, 14, 3, 13, 10, 11, 7, 10, 4, 13, 8, 9, 6, 5, 12, 2, 4, 9, 0, 6, 3, 10, 1, 8, 4, 5, 3, 2, 1, 4, 0, 1, 15, 9]", "system": "{'0': [1, 4, 6, 9], '1': [0, 2, 4, 8, 10, 15], '2': [1, 3, 4, 12], '3': [2, 5, 6, 10, 13, 14], '4': [0, 1, 2, 5, 8, 9, 10, 13], '5': [3, 4, 6, 12], '6': [0, 3, 5, 9], '7': [10, 11], '8': [1, 4, 9, 13, 14, 15], '9': [0, 4, 6, 8, 10], '10': [1, 3, 4, 7, 9, 11, 13, 14], '11': [7, 10, 12, 14], '12': [2, 5, 11, 13], '13': [3, 4, 8, 10, 12, 14], '14': [3, 8, 10, 11, 13, 15], '15': [1, 8, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000358.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 4, 7, 11, 13]\\n1: [0, 2, 10, 14]\\n2: [1, 3, 11, 15]\\n3: [2, 6, 8, 14]\\n4: [0, 5, 8, 15]\\n5: [4, 6, 9, 14]\\n6: [3, 5, 7, 8, 9, 10, 11, 13]\\n7: [0, 6, 10, 11, 12, 14]\\n8: [3, 4, 6, 9]\\n9: [5, 6, 8, 10, 12, 15]\\n10: [1, 6, 7, 9, 11, 14]\\n11: [0, 2, 6, 7, 10, 12, 14]\\n12: [7, 9, 11, 13]\\n13: [0, 6, 12, 14]\\n14: [1, 3, 5, 7, 10, 11, 13, 15]\\n15: [2, 4, 9, 14]\\n", "answer": "[0, 13, 14, 15, 9, 12, 13, 6, 11, 14, 10, 11, 12, 7, 14, 5, 9, 10, 7, 11, 2, 15, 4, 8, 9, 6, 10, 1, 14, 3, 8, 6, 7, 0, 4, 5, 6, 3, 2, 1, 0, 11, 0]", "system": "{'0': [1, 4, 7, 11, 13], '1': [0, 2, 10, 14], '2': [1, 3, 11, 15], '3': [2, 6, 8, 14], '4': [0, 5, 8, 15], '5': [4, 6, 9, 14], '6': [3, 5, 7, 8, 9, 10, 11, 13], '7': [0, 6, 10, 11, 12, 14], '8': [3, 4, 6, 9], '9': [5, 6, 8, 10, 12, 15], '10': [1, 6, 7, 9, 11, 14], '11': [0, 2, 6, 7, 10, 12, 14], '12': [7, 9, 11, 13], '13': [0, 6, 12, 14], '14': [1, 3, 5, 7, 10, 11, 13, 15], '15': [2, 4, 9, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000359.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is an Eulerian path. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.0: [1, 9, 11, 14]\\n1: [0, 2, 4, 7, 10, 15]\\n2: [1, 3, 12, 13, 15]\\n3: [2, 4, 5, 6]\\n4: [1, 3, 5, 8]\\n5: [3, 4, 6, 11, 12, 14]\\n6: [3, 5, 7, 11]\\n7: [1, 6, 10, 11]\\n8: [4, 9, 14, 15]\\n9: [0, 8, 10, 12]\\n10: [1, 7, 9, 13]\\n11: [0, 5, 6, 7, 14]\\n12: [2, 5, 9, 13]\\n13: [2, 10, 12, 14]\\n14: [0, 5, 8, 11, 13, 15]\\n15: [1, 2, 8, 14]\\n", "answer": "[2, 15, 14, 13, 12, 9, 10, 13, 2, 12, 5, 14, 11, 7, 10, 1, 15, 8, 14, 0, 11, 6, 7, 1, 4, 8, 9, 0, 1, 2, 3, 6, 5, 4, 3, 5, 11, 2]", "system": "{'0': [1, 9, 11, 14], '1': [0, 2, 4, 7, 10, 15], '2': [1, 3, 12, 13, 15], '3': [2, 4, 5, 6], '4': [1, 3, 5, 8], '5': [3, 4, 6, 11, 12, 14], '6': [3, 5, 7, 11], '7': [1, 6, 10, 11], '8': [4, 9, 14, 15], '9': [0, 8, 10, 12], '10': [1, 7, 9, 13], '11': [0, 5, 6, 7, 14], '12': [2, 5, 9, 13], '13': [2, 10, 12, 14], '14': [0, 5, 8, 11, 13, 15], '15': [1, 2, 8, 14]}", "category": "eulerian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulerian_path_evaluator'}"}}
{"image": "images/000360.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n | | \\nA1|C3|B2\\nC2|B1|A3\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B3|A2|C1\\nA1|C3|B2\\nC2|B1|A3", "system": " | | \\nA1|C3|B2\\nC2|B1|A3", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000361.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nB2|A1|C3\\nA3| | \\nC1| |A2\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B2|A1|C3\\nA3|C2|B1\\nC1|B3|A2", "system": "B2|A1|C3\\nA3| | \\nC1| |A2", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000362.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nC2|A1| \\nA3|B2| \\nB1| |A2\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "C2|A1|B3\\nA3|B2|C1\\nB1|C3|A2", "system": "C2|A1| \\nA3|B2| \\nB1| |A2", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000363.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nB3|A1| \\n | |B1\\nC1|B2|A3\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B3|A1|C2\\nA2|C3|B1\\nC1|B2|A3", "system": "B3|A1| \\n | |B1\\nC1|B2|A3", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000364.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nC2| |A1\\n |C1|B2\\n |A2|C3\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "C2|B3|A1\\nA3|C1|B2\\nB1|A2|C3", "system": "C2| |A1\\n |C1|B2\\n |A2|C3", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000365.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |C2| \\nC3| |A2\\nB2|A3|C1\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "A1|C2|B3\\nC3|B1|A2\\nB2|A3|C1", "system": " |C2| \\nC3| |A2\\nB2|A3|C1", "category": "eulero", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000366.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nA4|C2| |B3\\n | | |A1\\nD3| |A2|C4\\n |A3|B4| \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "A4|C2|D1|B3\\nB2|D4|C3|A1\\nD3|B1|A2|C4\\nC1|A3|B4|D2", "system": "A4|C2| |B3\\n | | |A1\\nD3| |A2|C4\\n |A3|B4| ", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000367.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD2|C3|A1| \\nC4|D1| |A2\\n |A4| |D3\\n |B2| | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D2|C3|A1|B4\\nC4|D1|B3|A2\\nB1|A4|C2|D3\\nA3|B2|D4|C1", "system": "D2|C3|A1| \\nC4|D1| |A2\\n |A4| |D3\\n |B2| | ", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000368.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD4|A2| | \\nB2| | | \\n |D1|B4|C2\\n |B3|D2|A4\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D4|A2|C3|B1\\nB2|C4|A1|D3\\nA3|D1|B4|C2\\nC1|B3|D2|A4", "system": "D4|A2| | \\nB2| | | \\n |D1|B4|C2\\n |B3|D2|A4", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000369.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |C4|B2|A1\\nA2| |C3| \\nB4|A3| | \\nC1|D2| | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D3|C4|B2|A1\\nA2|B1|C3|D4\\nB4|A3|D1|C2\\nC1|D2|A4|B3", "system": " |C4|B2|A1\\nA2| |C3| \\nB4|A3| | \\nC1|D2| | ", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000370.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nA4|C1| |D3\\nD2|B3| |A1\\n | |A3| \\n |A2| |B4\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "A4|C1|B2|D3\\nD2|B3|C4|A1\\nB1|D4|A3|C2\\nC3|A2|D1|B4", "system": "A4|C1| |D3\\nD2|B3| |A1\\n | |A3| \\n |A2| |B4", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000371.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD4|A2|C1| \\n |C4|A3|D1\\n | |B4| \\n |B1| |A4\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D4|A2|C1|B3\\nB2|C4|A3|D1\\nA1|D3|B4|C2\\nC3|B1|D2|A4", "system": "D4|A2|C1| \\n |C4|A3|D1\\n | |B4| \\n |B1| |A4", "category": "eulero", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000372.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nE3|C2|A1| | \\n |D4|E2|A3| \\n | |C4| | \\n |E1| |D2| \\nB2|A5|D3|C1| \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "E3|C2|A1|B4|D5\\nC5|D4|E2|A3|B1\\nD1|B3|C4|E5|A2\\nA4|E1|B5|D2|C3\\nB2|A5|D3|C1|E4", "system": "E3|C2|A1| | \\n |D4|E2|A3| \\n | |C4| | \\n |E1| |D2| \\nB2|A5|D3|C1| ", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000373.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nE5|C1| | |A2\\n | | |D2| \\nB4|A3|E2|C5| \\n |B2| | |C4\\n | |B1|A4|E3\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "E5|C1|D4|B3|A2\\nA1|E4|C3|D2|B5\\nB4|A3|E2|C5|D1\\nD3|B2|A5|E1|C4\\nC2|D5|B1|A4|E3", "system": "E5|C1| | |A2\\n | | |D2| \\nB4|A3|E2|C5| \\n |B2| | |C4\\n | |B1|A4|E3", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000374.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nB4|D1|C2| | \\nD2| | | | \\nC5| |E1| | \\nA1|E2|B3| |D5\\nE3| |D4|A2| \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B4|D1|C2|E5|A3\\nD2|C3|A5|B1|E4\\nC5|A4|E1|D3|B2\\nA1|E2|B3|C4|D5\\nE3|B5|D4|A2|C1", "system": "B4|D1|C2| | \\nD2| | | | \\nC5| |E1| | \\nA1|E2|B3| |D5\\nE3| |D4|A2| ", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000375.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nB1| |C2|D5|E3\\nD2| | | |C4\\nA3| |D4|E2| \\nE4|B2| | | \\n |D3|E1| | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B1|A4|C2|D5|E3\\nD2|E5|B3|A1|C4\\nA3|C1|D4|E2|B5\\nE4|B2|A5|C3|D1\\nC5|D3|E1|B4|A2", "system": "B1| |C2|D5|E3\\nD2| | | |C4\\nA3| |D4|E2| \\nE4|B2| | | \\n |D3|E1| | ", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000376.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nA3|B4|C1|D2|E5\\n |E3| | |C4\\n |C2| | | \\nC5| |B3| | \\nD4|A5| | |B1\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "A3|B4|C1|D2|E5\\nB2|E3|D5|A1|C4\\nE1|C2|A4|B5|D3\\nC5|D1|B3|E4|A2\\nD4|A5|E2|C3|B1", "system": "A3|B4|C1|D2|E5\\n |E3| | |C4\\n |C2| | | \\nC5| |B3| | \\nD4|A5| | |B1", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000377.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD1| | |C4|A2\\nE5| | | |B1\\nC2|A1| | |E4\\n | | |E1|C5\\n |E2|C1| |D3\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D1|B5|E3|C4|A2\\nE5|C3|A4|D2|B1\\nC2|A1|D5|B3|E4\\nA3|D4|B2|E1|C5\\nB4|E2|C1|A5|D3", "system": "D1| | |C4|A2\\nE5| | | |B1\\nC2|A1| | |E4\\n | | |E1|C5\\n |E2|C1| |D3", "category": "eulero", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000378.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |C5|D3| |E7| |F6\\n |F7| |C6| |B1| \\nC7| | |F3| | | \\nF4| |A7|E2|B6| |G5\\n | | | |A3| |B7\\nD6| |F1| |C2| |A4\\n | | | | | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B2|C5|D3|A1|E7|G4|F6\\nA5|F7|G2|C6|D4|B1|E3\\nC7|E4|B5|F3|G1|A6|D2\\nF4|D1|A7|E2|B6|C3|G5\\nE1|G6|C4|D5|A3|F2|B7\\nD6|B3|F1|G7|C2|E5|A4\\nG3|A2|E6|B4|F5|D7|C1", "system": " |C5|D3| |E7| |F6\\n |F7| |C6| |B1| \\nC7| | |F3| | | \\nF4| |A7|E2|B6| |G5\\n | | | |A3| |B7\\nD6| |F1| |C2| |A4\\n | | | | | | ", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000379.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |C3|G7| | |A1| \\n |F6| | | | | \\n | |E3|B7| |G6| \\n | | | |F5| | \\nC1|G5| |D3|A7|E2| \\nF3| |A2| | |C5| \\n | |B5| |G3|F7|D2\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B4|C3|G7|F2|D6|A1|E5\\nG2|F6|D1|A5|E4|B3|C7\\nD5|A4|E3|B7|C2|G6|F1\\nE7|B2|C6|G1|F5|D4|A3\\nC1|G5|F4|D3|A7|E2|B6\\nF3|D7|A2|E6|B1|C5|G4\\nA6|E1|B5|C4|G3|F7|D2", "system": " |C3|G7| | |A1| \\n |F6| | | | | \\n | |E3|B7| |G6| \\n | | | |F5| | \\nC1|G5| |D3|A7|E2| \\nF3| |A2| | |C5| \\n | |B5| |G3|F7|D2", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000380.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |B3|C7| | |G2|E1\\n | | | | |E5|D3\\n | |A1| | | |B6\\n | |G3|E7| |B4|C2\\n |G7| | | | |F5\\nG6|E4| | | | | \\nE2| | |C3|F7|A6| \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D5|B3|C7|F6|A4|G2|E1\\nB7|C6|F4|A2|G1|E5|D3\\nC4|F2|A1|G5|E3|D7|B6\\nF1|A5|G3|E7|D6|B4|C2\\nA3|G7|E6|D4|B2|C1|F5\\nG6|E4|D2|B1|C5|F3|A7\\nE2|D1|B5|C3|F7|A6|G4", "system": " |B3|C7| | |G2|E1\\n | | | | |E5|D3\\n | |A1| | | |B6\\n | |G3|E7| |B4|C2\\n |G7| | | | |F5\\nG6|E4| | | | | \\nE2| | |C3|F7|A6| ", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000381.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nG3|B6| | |F2|C4|E5\\nF1|C2| | | | | \\n |D3| |F7| | |G4\\nC7| |G2| |D5| | \\n |F4|C5| | | |D1\\n | |B1| |A4| | \\n | |F3| | |G1| \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "G3|B6|D7|A1|F2|C4|E5\\nF1|C2|E4|G5|B3|D6|A7\\nB5|D3|A6|F7|C1|E2|G4\\nC7|E1|G2|B4|D5|A3|F6\\nA2|F4|C5|E3|G6|B7|D1\\nE6|G7|B1|D2|A4|F5|C3\\nD4|A5|F3|C6|E7|G1|B2", "system": "G3|B6| | |F2|C4|E5\\nF1|C2| | | | | \\n |D3| |F7| | |G4\\nC7| |G2| |D5| | \\n |F4|C5| | | |D1\\n | |B1| |A4| | \\n | |F3| | |G1| ", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000382.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n | |F3|G6| |E5| \\nF6| |A5| | | |C3\\n | |B7| |C6| | \\n | | | |G2| | \\n |F2| |A7| |B6|D4\\nG7| |E6| |D5|C2| \\nE4|B5| | |F7| | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D1|C7|F3|G6|A4|E5|B2\\nF6|G4|A5|E2|B1|D7|C3\\nA2|E1|B7|D3|C6|F4|G5\\nB3|D6|C4|F5|G2|A1|E7\\nC5|F2|G1|A7|E3|B6|D4\\nG7|A3|E6|B4|D5|C2|F1\\nE4|B5|D2|C1|F7|G3|A6", "system": " | |F3|G6| |E5| \\nF6| |A5| | | |C3\\n | |B7| |C6| | \\n | | | |G2| | \\n |F2| |A7| |B6|D4\\nG7| |E6| |D5|C2| \\nE4|B5| | |F7| | ", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000383.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD4|E6| | | |B1| \\n | | |F6| |G2| \\nA2| | |B7| | | \\nF7|B4| |D3|E2| | \\n |F3|B2|G5| |E7| \\n | |D7|E4| |C3| \\nG3|D2| | | | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D4|E6|A3|C2|F5|B1|G7\\nE1|A7|C4|F6|B3|G2|D5\\nA2|C5|F1|B7|G4|D6|E3\\nF7|B4|G6|D3|E2|A5|C1\\nC6|F3|B2|G5|D1|E7|A4\\nB5|G1|D7|E4|A6|C3|F2\\nG3|D2|E5|A1|C7|F4|B6", "system": "D4|E6| | | |B1| \\n | | |F6| |G2| \\nA2| | |B7| | | \\nF7|B4| |D3|E2| | \\n |F3|B2|G5| |E7| \\n | |D7|E4| |C3| \\nG3|D2| | | | | ", "category": "eulero", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000384.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nF2|A6| | | | | | \\n |F8|C2| | | |D5| \\n | | | | |D6| |B8\\n | | |F1| | |B2|G6\\nG8| | |D2| | | | \\n |G2|D8| |A1| |C4|E3\\nH4|D3|G1|B5| | | | \\n | |B4| | | | |F7\\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "F2|A6|E7|C8|G5|B1|H3|D4\\nA7|F8|C2|E6|B3|G4|D5|H1\\nE5|C1|F3|A4|H2|D6|G7|B8\\nC3|E4|A5|F1|D7|H8|B2|G6\\nG8|B7|H6|D2|F4|A3|E1|C5\\nB6|G2|D8|H7|A1|F5|C4|E3\\nH4|D3|G1|B5|E8|C7|F6|A2\\nD1|H5|B4|G3|C6|E2|A8|F7", "system": "F2|A6| | | | | | \\n |F8|C2| | | |D5| \\n | | | | |D6| |B8\\n | | |F1| | |B2|G6\\nG8| | |D2| | | | \\n |G2|D8| |A1| |C4|E3\\nH4|D3|G1|B5| | | | \\n | |B4| | | | |F7", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000385.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n | | | | | |B1| \\n | |D5| |H1|F8| | \\nC2| |E4|A5| | |D3|H6\\n |C5| |G7| |A2| | \\n | | |D1| | |A6|G3\\nH4|D8|G2|B3| | | |C1\\n | | |H2| | | | \\nD6| | |E8| | | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "G8|A4|H7|F6|D2|C3|B1|E5\\nA3|G6|D5|C4|H1|F8|E2|B7\\nC2|F7|E4|A5|B8|G1|D3|H6\\nF1|C5|B6|G7|E3|A2|H8|D4\\nE7|B2|C8|D1|F4|H5|A6|G3\\nH4|D8|G2|B3|A7|E6|F5|C1\\nB5|E1|F3|H2|C6|D7|G4|A8\\nD6|H3|A1|E8|G5|B4|C7|F2", "system": " | | | | | |B1| \\n | |D5| |H1|F8| | \\nC2| |E4|A5| | |D3|H6\\n |C5| |G7| |A2| | \\n | | |D1| | |A6|G3\\nH4|D8|G2|B3| | | |C1\\n | | |H2| | | | \\nD6| | |E8| | | | ", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000386.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nB8| | | | | |H6| \\n | | | |E7|G1|D8| \\n | |C8| | | | | \\nC4|A3| |B5| |H7|E2| \\n | | |G2| |F4| | \\nH5|G6|D3|E4| |C2|B7| \\n |D2| | |A4| |C3| \\n | | | |B2| | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "B8|F7|A2|C1|G5|E3|H6|D4\\nA6|C5|B4|F3|E7|G1|D8|H2\\nF2|B1|C8|A7|H3|D5|G4|E6\\nC4|A3|F6|B5|D1|H7|E2|G8\\nD7|E8|H1|G2|C6|F4|A5|B3\\nH5|G6|D3|E4|F8|C2|B7|A1\\nE1|D2|G7|H8|A4|B6|C3|F5\\nG3|H4|E5|D6|B2|A8|F1|C7", "system": "B8| | | | | |H6| \\n | | | |E7|G1|D8| \\n | |C8| | | | | \\nC4|A3| |B5| |H7|E2| \\n | | |G2| |F4| | \\nH5|G6|D3|E4| |C2|B7| \\n |D2| | |A4| |C3| \\n | | | |B2| | | ", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000387.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |B5|A7| |F3|H2| |D1\\nB2|E3| | |H5| | |G7\\nA5|C4|E8|B7|G2| |F1| \\n | |B6| | | | | \\n | | | | | | |C2\\n | | |G3|B8| | | \\n |D7| | | |C6| | \\n |G1| |F2| | | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "E4|B5|A7|C8|F3|H2|G6|D1\\nB2|E3|C1|A6|H5|F4|D8|G7\\nA5|C4|E8|B7|G2|D3|F1|H6\\nC3|A2|B6|E1|D4|G5|H7|F8\\nF7|H8|G4|D5|E6|B1|A3|C2\\nH1|F6|D2|G3|B8|E7|C5|A4\\nG8|D7|F5|H4|A1|C6|E2|B3\\nD6|G1|H3|F2|C7|A8|B4|E5", "system": " |B5|A7| |F3|H2| |D1\\nB2|E3| | |H5| | |G7\\nA5|C4|E8|B7|G2| |F1| \\n | |B6| | | | | \\n | | | | | | |C2\\n | | |G3|B8| | | \\n |D7| | | |C6| | \\n |G1| |F2| | | | ", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000388.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\nD3| |C1| | |F8| | \\n | | | |F4|B6| | \\n |G8|D4| | | | |F7\\n | |A2|D8|H1|E7|F3| \\n | | |H3| | | | \\n | | |E1| |D2|G6|C4\\n | | | |C7| | | \\nH8|E2| | |G5|C3| | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "D3|A5|C1|G7|B2|F8|E4|H6\\nA1|D7|G3|C5|F4|B6|H2|E8\\nC2|G8|D4|A6|E3|H5|B1|F7\\nG4|C6|A2|D8|H1|E7|F3|B5\\nB7|F1|E5|H3|D6|A4|C8|G2\\nF5|B3|H7|E1|A8|D2|G6|C4\\nE6|H4|B8|F2|C7|G1|D5|A3\\nH8|E2|F6|B4|G5|C3|A7|D1", "system": "D3| |C1| | |F8| | \\n | | | |F4|B6| | \\n |G8|D4| | | | |F7\\n | |A2|D8|H1|E7|F3| \\n | | |H3| | | | \\n | | |E1| |D2|G6|C4\\n | | | |C7| | | \\nH8|E2| | |G5|C3| | ", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000389.png", "question": "\\nYour task is to solve the Eulero puzzle, based on the rules and the current puzzle state shown below.\\n\\n### Goal:\\nFill all empty cells such that the following rules are satisfied:\\n\\n### Global Rules:\\n1. Each cell contains a **letter-number pair** (like A1).\\n2. Each **letter** appears **exactly once** in every row and every column.\\n3. Each **number** appears **exactly once** in every row and every column.\\n4. Each **letter-number pair** is **unique across the entire grid** (i.e., no duplicate pairs anywhere).\\n5. For an N×N grid, the letters used are the first N letters of the alphabet (A=1, B=2, ..., up to the N-th letter), and the numbers used are from 1 to N.\\n\\n### Current Puzzle State:\\nThe puzzle is displayed below:\\n |B2|H7| | | |D5| \\n | | | |C5|E4|F1| \\nH1| |G5|B4| |F2| |C6\\n | |B1| |F7| |C3|E2\\nE6|C7| | | | | | \\nC2| | | | |G1| | \\n | | | | | |G2|B3\\n | | |E5|A2| | | \\n\\n### Output Format:\\nEach row should be represented as a single line of letter-number pairs, separated by `|` (without spaces).\\nEach row must be on a new line using `\\n` to separate them.\\n\\n**For example**:\\nA1|B2|C3\\nB3|C1|A2\\nC2|A3|B1  \\n", "answer": "G3|B2|H7|A6|E1|C8|D5|F4\\nB7|G6|A3|H2|C5|E4|F1|D8\\nH1|A8|G5|B4|D3|F2|E7|C6\\nA5|H4|B1|G8|F7|D6|C3|E2\\nE6|C7|D2|F3|G4|B5|H8|A1\\nC2|E3|F6|D7|B8|G1|A4|H5\\nD4|F5|E8|C1|H6|A7|G2|B3\\nF8|D1|C4|E5|A2|H3|B6|G7", "system": " |B2|H7| | | |D5| \\n | | | |C5|E4|F1| \\nH1| |G5|B4| |F2| |C6\\n | |B1| |F7| |C3|E2\\nE6|C7| | | | | | \\nC2| | | | |G1| | \\n | | | | | |G2|B3\\n | | |E5|A2| | | ", "category": "eulero", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'eulero_evaluator'}"}}
{"image": "images/000390.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _\\n3 4 2 _\\n_ 3 4 _\\n_ _ _ 4\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (1,1) (vertical)\\n2. Cell (1,0) > Cell (2,0) (vertical)\\n3. Cell (2,0) < Cell (3,0) (vertical)\\n4. Cell (2,2) > Cell (3,2) (vertical)\\n5. Cell (2,3) < Cell (3,3) (vertical)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[4, 2, 1, 3], [3, 4, 2, 1], [1, 3, 4, 2], [2, 1, 3, 4]]", "system": "{\"grid\": [[0, 0, 0, 0], [3, 4, 2, 0], [0, 3, 4, 0], [0, 0, 0, 4]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \"<\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000391.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n3 _ _ 1\\n_ 3 _ _\\n_ 1 _ 4\\n4 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) > Cell (1,1) (vertical)\\n2. Cell (1,0) < Cell (2,0) (vertical)\\n3. Cell (1,2) > Cell (1,3) (horizontal)\\n4. Cell (2,1) < Cell (2,2) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[3, 4, 2, 1], [1, 3, 4, 2], [2, 1, 3, 4], [4, 2, 1, 3]]", "system": "{\"grid\": [[3, 0, 0, 1], [0, 3, 0, 0], [0, 1, 0, 4], [4, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \"<\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000392.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n4 _ _ _\\n2 _ 3 _\\n1 _ _ _\\n3 4 _ _\\n\\n### Inequality constraints:\\n1. Cell (0,2) < Cell (0,3) (horizontal)\\n2. Cell (2,1) < Cell (2,2) (horizontal)\\n3. Cell (2,1) < Cell (3,1) (vertical)\\n4. Cell (2,2) > Cell (2,3) (horizontal)\\n5. Cell (2,2) > Cell (3,2) (vertical)\\n6. Cell (2,3) > Cell (3,3) (vertical)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[4, 2, 1, 3], [2, 1, 3, 4], [1, 3, 4, 2], [3, 4, 2, 1]]", "system": "{\"grid\": [[4, 0, 0, 0], [2, 0, 3, 0], [1, 0, 0, 0], [3, 4, 0, 0]], \"inequalities\": [{\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000393.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 1\\n1 _ _ 4\\n3 4 1 _\\n_ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) > Cell (1,1) (vertical)\\n2. Cell (0,3) < Cell (1,3) (vertical)\\n3. Cell (1,1) < Cell (1,2) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[2, 3, 4, 1], [1, 2, 3, 4], [3, 4, 1, 2], [4, 1, 2, 3]]", "system": "{\"grid\": [[0, 0, 0, 1], [1, 0, 0, 4], [3, 4, 1, 0], [0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000394.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n2 _ _ _\\n_ 2 _ _\\n1 4 _ 2\\n4 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (1,1) (vertical)\\n2. Cell (0,2) > Cell (1,2) (vertical)\\n3. Cell (1,0) > Cell (1,1) (horizontal)\\n4. Cell (1,3) > Cell (2,3) (vertical)\\n5. Cell (2,0) < Cell (3,0) (vertical)\\n6. Cell (2,2) > Cell (2,3) (horizontal)\\n7. Cell (2,2) > Cell (3,2) (vertical)\\n8. Cell (3,0) > Cell (3,1) (horizontal)\\n9. Cell (3,2) > Cell (3,3) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[2, 1, 4, 3], [3, 2, 1, 4], [1, 4, 3, 2], [4, 3, 2, 1]]", "system": "{\"grid\": [[2, 0, 0, 0], [0, 2, 0, 0], [1, 4, 0, 2], [4, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \">\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000395.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 4×4 grid.\\n2. Fill each cell with a number from 1 to 4.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n4 _ _ 3\\n_ 3 _ _\\n_ _ 3 _\\n3 _ _ 1\\n\\n### Inequality constraints:\\n1. Cell (0,2) < Cell (1,2) (vertical)\\n2. Cell (1,3) < Cell (2,3) (vertical)\\n3. Cell (2,0) < Cell (3,0) (vertical)\\n4. Cell (2,1) < Cell (3,1) (vertical)\\n5. Cell (2,2) < Cell (2,3) (horizontal)\\n6. Cell (2,3) > Cell (3,3) (vertical)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row4]]", "answer": "[[4, 2, 1, 3], [1, 3, 4, 2], [2, 1, 3, 4], [3, 4, 2, 1]]", "system": "{\"grid\": [[4, 0, 0, 3], [0, 3, 0, 0], [0, 0, 3, 0], [3, 0, 0, 1]], \"inequalities\": [{\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}], \"size\": 4}", "category": "futoshiki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000396.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _\\n_ _ 5 1 _\\n1 _ _ 4 5\\n_ 1 2 _ _\\n2 _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,2) < Cell (0,3) (horizontal)\\n3. Cell (0,4) > Cell (1,4) (vertical)\\n4. Cell (1,3) < Cell (2,3) (vertical)\\n5. Cell (1,4) < Cell (2,4) (vertical)\\n6. Cell (2,1) > Cell (3,1) (vertical)\\n7. Cell (2,2) > Cell (3,2) (vertical)\\n8. Cell (2,4) > Cell (3,4) (vertical)\\n9. Cell (3,0) > Cell (4,0) (vertical)\\n10. Cell (3,2) < Cell (4,2) (vertical)\\n11. Cell (3,3) < Cell (3,4) (horizontal)\\n12. Cell (3,3) < Cell (4,3) (vertical)\\n13. Cell (4,0) < Cell (4,1) (horizontal)\\n14. Cell (4,1) < Cell (4,2) (horizontal)\\n15. Cell (4,2) < Cell (4,3) (horizontal)\\n16. Cell (4,3) > Cell (4,4) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[4, 5, 1, 2, 3], [3, 4, 5, 1, 2], [1, 2, 3, 4, 5], [5, 1, 2, 3, 4], [2, 3, 4, 5, 1]]", "system": "{\"grid\": [[0, 0, 0, 0, 0], [0, 0, 5, 1, 0], [1, 0, 0, 4, 5], [0, 1, 2, 0, 0], [2, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \">\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000397.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 3 _ _\\n_ _ _ 1 _\\n3 _ _ 4 2\\n_ _ _ 3 _\\n5 1 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (0,2) (horizontal)\\n2. Cell (0,2) < Cell (0,3) (horizontal)\\n3. Cell (1,0) < Cell (2,0) (vertical)\\n4. Cell (1,1) < Cell (1,2) (horizontal)\\n5. Cell (2,0) < Cell (2,1) (horizontal)\\n6. Cell (2,0) > Cell (3,0) (vertical)\\n7. Cell (2,1) > Cell (2,2) (horizontal)\\n8. Cell (2,2) < Cell (2,3) (horizontal)\\n9. Cell (2,3) > Cell (3,3) (vertical)\\n10. Cell (3,3) < Cell (3,4) (horizontal)\\n11. Cell (3,3) > Cell (4,3) (vertical)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[4, 2, 3, 5, 1], [2, 3, 5, 1, 4], [3, 5, 1, 4, 2], [1, 4, 2, 3, 5], [5, 1, 4, 2, 3]]", "system": "{\"grid\": [[0, 0, 3, 0, 0], [0, 0, 0, 1, 0], [3, 0, 0, 4, 2], [0, 0, 0, 3, 0], [5, 1, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \">\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000398.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _\\n_ 3 _ _ _\\n3 _ _ _ 4\\n_ _ 4 3 _\\n5 _ _ 1 2\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,3) > Cell (0,4) (horizontal)\\n3. Cell (0,3) > Cell (1,3) (vertical)\\n4. Cell (1,1) > Cell (1,2) (horizontal)\\n5. Cell (1,1) > Cell (2,1) (vertical)\\n6. Cell (3,0) < Cell (4,0) (vertical)\\n7. Cell (3,1) > Cell (3,2) (horizontal)\\n8. Cell (3,1) > Cell (4,1) (vertical)\\n9. Cell (3,3) > Cell (3,4) (horizontal)\\n10. Cell (4,1) > Cell (4,2) (horizontal)\\n11. Cell (4,3) < Cell (4,4) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[1, 2, 5, 4, 3], [4, 3, 1, 2, 5], [3, 1, 2, 5, 4], [2, 5, 4, 3, 1], [5, 4, 3, 1, 2]]", "system": "{\"grid\": [[0, 0, 0, 0, 0], [0, 3, 0, 0, 0], [3, 0, 0, 0, 4], [0, 0, 4, 3, 0], [5, 0, 0, 1, 2]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000399.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _\\n_ _ _ 3 2\\n_ 4 _ 2 _\\n_ 3 _ 1 _\\n_ 2 1 _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (0,2) (horizontal)\\n2. Cell (1,0) < Cell (1,1) (horizontal)\\n3. Cell (1,0) < Cell (2,0) (vertical)\\n4. Cell (1,1) > Cell (2,1) (vertical)\\n5. Cell (1,2) > Cell (1,3) (horizontal)\\n6. Cell (1,2) > Cell (2,2) (vertical)\\n7. Cell (1,3) > Cell (1,4) (horizontal)\\n8. Cell (2,1) > Cell (2,2) (horizontal)\\n9. Cell (2,1) > Cell (3,1) (vertical)\\n10. Cell (2,2) > Cell (2,3) (horizontal)\\n11. Cell (2,3) > Cell (2,4) (horizontal)\\n12. Cell (3,1) > Cell (3,2) (horizontal)\\n13. Cell (3,3) < Cell (4,3) (vertical)\\n14. Cell (4,0) > Cell (4,1) (horizontal)\\n15. Cell (4,2) < Cell (4,3) (horizontal)\\n16. Cell (4,3) > Cell (4,4) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[2, 1, 5, 4, 3], [1, 5, 4, 3, 2], [5, 4, 3, 2, 1], [4, 3, 2, 1, 5], [3, 2, 1, 5, 4]]", "system": "{\"grid\": [[0, 0, 0, 0, 0], [0, 0, 0, 3, 2], [0, 4, 0, 2, 0], [0, 3, 0, 1, 0], [0, 2, 1, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \">\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000400.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _\\n_ 2 _ _ 1\\n_ 4 _ _ 5\\n3 _ _ 2 _\\n_ 5 2 _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (1,0) (vertical)\\n2. Cell (0,1) > Cell (1,1) (vertical)\\n3. Cell (0,2) < Cell (0,3) (horizontal)\\n4. Cell (0,3) > Cell (1,3) (vertical)\\n5. Cell (0,4) > Cell (1,4) (vertical)\\n6. Cell (1,0) > Cell (2,0) (vertical)\\n7. Cell (1,1) < Cell (2,1) (vertical)\\n8. Cell (1,3) > Cell (1,4) (horizontal)\\n9. Cell (2,1) > Cell (2,2) (horizontal)\\n10. Cell (2,3) < Cell (2,4) (horizontal)\\n11. Cell (3,1) < Cell (4,1) (vertical)\\n12. Cell (3,4) > Cell (4,4) (vertical)\\n13. Cell (4,1) > Cell (4,2) (horizontal)\\n14. Cell (4,2) < Cell (4,3) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[4, 3, 1, 5, 2], [5, 2, 4, 3, 1], [2, 4, 3, 1, 5], [3, 1, 5, 2, 4], [1, 5, 2, 4, 3]]", "system": "{\"grid\": [[0, 0, 0, 0, 0], [0, 2, 0, 0, 1], [0, 4, 0, 0, 5], [3, 0, 0, 2, 0], [0, 5, 2, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000401.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 5×5 grid.\\n2. Fill each cell with a number from 1 to 5.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 2 _\\n5 2 _ _ _\\n4 5 _ 3 _\\n_ _ _ _ 2\\n_ _ 1 _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (1,0) (vertical)\\n2. Cell (0,3) < Cell (0,4) (horizontal)\\n3. Cell (1,0) > Cell (1,1) (horizontal)\\n4. Cell (1,0) > Cell (2,0) (vertical)\\n5. Cell (2,1) > Cell (2,2) (horizontal)\\n6. Cell (2,2) < Cell (2,3) (horizontal)\\n7. Cell (2,2) < Cell (3,2) (vertical)\\n8. Cell (3,0) > Cell (3,1) (horizontal)\\n9. Cell (3,0) > Cell (4,0) (vertical)\\n10. Cell (3,1) < Cell (3,2) (horizontal)\\n11. Cell (3,2) < Cell (3,3) (horizontal)\\n12. Cell (3,2) > Cell (4,2) (vertical)\\n13. Cell (3,3) > Cell (4,3) (vertical)\\n14. Cell (4,1) > Cell (4,2) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row5]]", "answer": "[[1, 4, 5, 2, 3], [5, 2, 3, 1, 4], [4, 5, 2, 3, 1], [3, 1, 4, 5, 2], [2, 3, 1, 4, 5]]", "system": "{\"grid\": [[0, 0, 0, 2, 0], [5, 2, 0, 0, 0], [4, 5, 0, 3, 0], [0, 0, 0, 0, 2], [0, 0, 1, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \">\"}], \"size\": 5}", "category": "futoshiki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000402.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n5 _ _ _ 1 _\\n_ 4 _ 3 _ _\\n_ 6 _ _ _ _\\n_ _ _ _ _ _\\n_ 3 _ _ 6 4\\n_ _ _ _ 4 _\\n\\n### Inequality constraints:\\n1. Cell (0,2) > Cell (1,2) (vertical)\\n2. Cell (0,3) > Cell (0,4) (horizontal)\\n3. Cell (1,1) > Cell (1,2) (horizontal)\\n4. Cell (1,1) < Cell (2,1) (vertical)\\n5. Cell (1,2) < Cell (1,3) (horizontal)\\n6. Cell (1,2) < Cell (2,2) (vertical)\\n7. Cell (1,5) < Cell (2,5) (vertical)\\n8. Cell (2,0) < Cell (2,1) (horizontal)\\n9. Cell (2,3) < Cell (2,4) (horizontal)\\n10. Cell (2,3) < Cell (3,3) (vertical)\\n11. Cell (3,0) > Cell (3,1) (horizontal)\\n12. Cell (3,1) < Cell (3,2) (horizontal)\\n13. Cell (3,1) < Cell (4,1) (vertical)\\n14. Cell (3,2) < Cell (3,3) (horizontal)\\n15. Cell (4,0) < Cell (5,0) (vertical)\\n16. Cell (4,3) < Cell (5,3) (vertical)\\n17. Cell (4,4) > Cell (4,5) (horizontal)\\n18. Cell (5,0) < Cell (5,1) (horizontal)\\n19. Cell (5,3) > Cell (5,4) (horizontal)\\n20. Cell (5,4) > Cell (5,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[5, 2, 6, 4, 1, 3], [6, 4, 1, 3, 5, 2], [2, 6, 4, 1, 3, 5], [4, 1, 3, 5, 2, 6], [1, 3, 5, 2, 6, 4], [3, 5, 2, 6, 4, 1]]", "system": "{\"grid\": [[5, 0, 0, 0, 1, 0], [0, 4, 0, 3, 0, 0], [0, 6, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 3, 0, 0, 6, 4], [0, 0, 0, 0, 4, 0]], \"inequalities\": [{\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 5], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000403.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 3 _ _ _\\n_ _ _ _ 5 _\\n5 _ _ _ _ _\\n1 _ _ _ _ _\\n_ 1 2 _ _ _\\n3 4 _ 1 _ _\\n\\n### Inequality constraints:\\n1. Cell (0,2) > Cell (1,2) (vertical)\\n2. Cell (0,4) > Cell (0,5) (horizontal)\\n3. Cell (1,0) < Cell (1,1) (horizontal)\\n4. Cell (1,2) < Cell (1,3) (horizontal)\\n5. Cell (1,3) < Cell (1,4) (horizontal)\\n6. Cell (2,0) > Cell (3,0) (vertical)\\n7. Cell (2,2) < Cell (2,3) (horizontal)\\n8. Cell (2,3) > Cell (3,3) (vertical)\\n9. Cell (2,4) < Cell (2,5) (horizontal)\\n10. Cell (3,0) < Cell (3,1) (horizontal)\\n11. Cell (3,0) < Cell (4,0) (vertical)\\n12. Cell (3,1) < Cell (3,2) (horizontal)\\n13. Cell (3,4) < Cell (3,5) (horizontal)\\n14. Cell (3,4) > Cell (4,4) (vertical)\\n15. Cell (3,5) > Cell (4,5) (vertical)\\n16. Cell (4,1) < Cell (5,1) (vertical)\\n17. Cell (4,2) < Cell (5,2) (vertical)\\n18. Cell (4,3) > Cell (5,3) (vertical)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[2, 5, 3, 4, 6, 1], [4, 6, 1, 2, 5, 3], [5, 3, 4, 6, 1, 2], [1, 2, 5, 3, 4, 6], [6, 1, 2, 5, 3, 4], [3, 4, 6, 1, 2, 5]]", "system": "{\"grid\": [[0, 0, 3, 0, 0, 0], [0, 0, 0, 0, 5, 0], [5, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 1, 2, 0, 0, 0], [3, 4, 0, 1, 0, 0]], \"inequalities\": [{\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \">\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000404.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 1 _ _ _\\n_ _ _ _ _ _\\n_ _ 2 _ _ _\\n_ 4 _ 3 _ 5\\n_ 6 _ _ 5 _\\n3 _ _ _ _ 6\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,2) < Cell (1,2) (vertical)\\n3. Cell (0,3) < Cell (1,3) (vertical)\\n4. Cell (0,4) > Cell (0,5) (horizontal)\\n5. Cell (0,5) > Cell (1,5) (vertical)\\n6. Cell (1,0) > Cell (1,1) (horizontal)\\n7. Cell (1,1) < Cell (1,2) (horizontal)\\n8. Cell (1,2) > Cell (2,2) (vertical)\\n9. Cell (1,3) > Cell (1,4) (horizontal)\\n10. Cell (1,4) > Cell (1,5) (horizontal)\\n11. Cell (1,4) > Cell (2,4) (vertical)\\n12. Cell (2,0) > Cell (2,1) (horizontal)\\n13. Cell (2,1) < Cell (3,1) (vertical)\\n14. Cell (2,2) < Cell (3,2) (vertical)\\n15. Cell (2,4) < Cell (3,4) (vertical)\\n16. Cell (3,0) < Cell (4,0) (vertical)\\n17. Cell (3,2) > Cell (4,2) (vertical)\\n18. Cell (4,0) < Cell (4,1) (horizontal)\\n19. Cell (4,0) > Cell (5,0) (vertical)\\n20. Cell (4,2) < Cell (5,2) (vertical)\\n21. Cell (5,2) > Cell (5,3) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[2, 5, 1, 4, 6, 3], [5, 1, 4, 6, 3, 2], [6, 3, 2, 5, 1, 4], [1, 4, 6, 3, 2, 5], [4, 6, 3, 2, 5, 1], [3, 2, 5, 1, 4, 6]]", "system": "{\"grid\": [[0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0], [0, 4, 0, 3, 0, 5], [0, 6, 0, 0, 5, 0], [3, 0, 0, 0, 0, 6]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \">\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000405.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 1 _ _\\n_ _ _ _ _ _\\n_ _ 3 _ _ _\\n_ _ _ 2 _ 5\\n_ _ 5 _ _ _\\n_ 2 1 5 _ 3\\n\\n### Inequality constraints:\\n1. Cell (0,1) > Cell (0,2) (horizontal)\\n2. Cell (0,1) > Cell (1,1) (vertical)\\n3. Cell (0,2) > Cell (0,3) (horizontal)\\n4. Cell (0,3) < Cell (0,4) (horizontal)\\n5. Cell (0,4) > Cell (0,5) (horizontal)\\n6. Cell (0,5) > Cell (1,5) (vertical)\\n7. Cell (1,4) > Cell (1,5) (horizontal)\\n8. Cell (2,0) > Cell (3,0) (vertical)\\n9. Cell (2,1) > Cell (3,1) (vertical)\\n10. Cell (2,3) > Cell (2,4) (horizontal)\\n11. Cell (2,4) > Cell (2,5) (horizontal)\\n12. Cell (3,1) < Cell (3,2) (horizontal)\\n13. Cell (3,5) < Cell (4,5) (vertical)\\n14. Cell (4,1) < Cell (5,1) (vertical)\\n15. Cell (4,3) > Cell (4,4) (horizontal)\\n16. Cell (4,3) < Cell (5,3) (vertical)\\n17. Cell (4,4) < Cell (5,4) (vertical)\\n18. Cell (5,4) > Cell (5,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[3, 6, 2, 1, 5, 4], [1, 5, 4, 3, 6, 2], [5, 4, 3, 6, 2, 1], [4, 3, 6, 2, 1, 5], [2, 1, 5, 4, 3, 6], [6, 2, 1, 5, 4, 3]]", "system": "{\"grid\": [[0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0], [0, 0, 0, 2, 0, 5], [0, 0, 5, 0, 0, 0], [0, 2, 1, 5, 0, 3]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \">\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000406.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _ _\\n_ _ _ _ 1 _\\n_ 2 3 _ 4 _\\n_ 3 _ 4 _ _\\n4 _ _ _ 3 _\\n_ _ 5 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) > Cell (0,1) (horizontal)\\n2. Cell (0,2) < Cell (0,3) (horizontal)\\n3. Cell (1,0) < Cell (1,1) (horizontal)\\n4. Cell (1,1) > Cell (2,1) (vertical)\\n5. Cell (1,3) > Cell (1,4) (horizontal)\\n6. Cell (1,4) < Cell (1,5) (horizontal)\\n7. Cell (2,0) > Cell (2,1) (horizontal)\\n8. Cell (2,2) > Cell (2,3) (horizontal)\\n9. Cell (2,4) < Cell (3,4) (vertical)\\n10. Cell (3,0) < Cell (3,1) (horizontal)\\n11. Cell (3,4) < Cell (3,5) (horizontal)\\n12. Cell (3,4) > Cell (4,4) (vertical)\\n13. Cell (4,3) < Cell (4,4) (horizontal)\\n14. Cell (4,3) < Cell (5,3) (vertical)\\n15. Cell (4,4) > Cell (4,5) (horizontal)\\n16. Cell (5,1) < Cell (5,2) (horizontal)\\n17. Cell (5,4) < Cell (5,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[3, 1, 4, 5, 6, 2], [5, 6, 2, 3, 1, 4], [6, 2, 3, 1, 4, 5], [2, 3, 1, 4, 5, 6], [4, 5, 6, 2, 3, 1], [1, 4, 5, 6, 2, 3]]", "system": "{\"grid\": [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0], [0, 2, 3, 0, 4, 0], [0, 3, 0, 4, 0, 0], [4, 0, 0, 0, 3, 0], [0, 0, 5, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \"<\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000407.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 6×6 grid.\\n2. Fill each cell with a number from 1 to 6.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n6 5 _ _ 3 2\\n_ _ _ 6 5 _\\n_ 1 _ _ _ _\\n_ _ _ _ _ _\\n_ _ 6 _ _ _\\n_ _ _ _ 2 _\\n\\n### Inequality constraints:\\n1. Cell (0,0) > Cell (0,1) (horizontal)\\n2. Cell (0,1) > Cell (0,2) (horizontal)\\n3. Cell (0,1) > Cell (1,1) (vertical)\\n4. Cell (0,2) > Cell (1,2) (vertical)\\n5. Cell (0,3) < Cell (0,4) (horizontal)\\n6. Cell (0,4) > Cell (0,5) (horizontal)\\n7. Cell (0,5) < Cell (1,5) (vertical)\\n8. Cell (1,0) < Cell (1,1) (horizontal)\\n9. Cell (1,2) < Cell (1,3) (horizontal)\\n10. Cell (1,3) > Cell (1,4) (horizontal)\\n11. Cell (1,4) < Cell (2,4) (vertical)\\n12. Cell (1,5) < Cell (2,5) (vertical)\\n13. Cell (2,0) > Cell (2,1) (horizontal)\\n14. Cell (2,1) < Cell (3,1) (vertical)\\n15. Cell (2,2) > Cell (2,3) (horizontal)\\n16. Cell (2,3) < Cell (2,4) (horizontal)\\n17. Cell (2,4) > Cell (3,4) (vertical)\\n18. Cell (2,5) > Cell (3,5) (vertical)\\n19. Cell (3,0) < Cell (3,1) (horizontal)\\n20. Cell (3,0) < Cell (4,0) (vertical)\\n21. Cell (3,4) < Cell (4,4) (vertical)\\n22. Cell (4,0) > Cell (4,1) (horizontal)\\n23. Cell (4,0) < Cell (5,0) (vertical)\\n24. Cell (4,1) < Cell (5,1) (vertical)\\n25. Cell (4,4) > Cell (4,5) (horizontal)\\n26. Cell (4,4) > Cell (5,4) (vertical)\\n27. Cell (4,5) < Cell (5,5) (vertical)\\n28. Cell (5,0) > Cell (5,1) (horizontal)\\n29. Cell (5,1) > Cell (5,2) (horizontal)\\n30. Cell (5,3) > Cell (5,4) (horizontal)\\n31. Cell (5,4) < Cell (5,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row6]]", "answer": "[[6, 5, 4, 1, 3, 2], [1, 3, 2, 6, 5, 4], [4, 1, 3, 2, 6, 5], [2, 6, 5, 4, 1, 3], [3, 2, 6, 5, 4, 1], [5, 4, 1, 3, 2, 6]]", "system": "{\"grid\": [[6, 5, 0, 0, 3, 2], [0, 0, 0, 6, 5, 0], [0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 2, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \">\"}, {\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \">\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [1, 5], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [2, 5], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \">\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \"<\"}], \"size\": 6}", "category": "futoshiki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000408.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _ _ _\\n2 7 4 3 _ _ _\\n_ _ _ _ _ _ _\\n_ _ _ 5 _ _ _\\n_ 4 3 _ _ _ 2\\n_ _ _ _ _ _ 3\\n_ _ _ _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,3) > Cell (1,3) (vertical)\\n2. Cell (0,4) < Cell (0,5) (horizontal)\\n3. Cell (0,4) > Cell (1,4) (vertical)\\n4. Cell (0,5) > Cell (1,5) (vertical)\\n5. Cell (1,0) < Cell (2,0) (vertical)\\n6. Cell (1,1) > Cell (2,1) (vertical)\\n7. Cell (1,3) > Cell (1,4) (horizontal)\\n8. Cell (1,4) < Cell (1,5) (horizontal)\\n9. Cell (1,4) < Cell (2,4) (vertical)\\n10. Cell (1,5) > Cell (2,5) (vertical)\\n11. Cell (1,6) > Cell (2,6) (vertical)\\n12. Cell (2,1) > Cell (3,1) (vertical)\\n13. Cell (2,3) > Cell (3,3) (vertical)\\n14. Cell (2,5) > Cell (3,5) (vertical)\\n15. Cell (2,6) < Cell (3,6) (vertical)\\n16. Cell (3,3) < Cell (3,4) (horizontal)\\n17. Cell (3,5) < Cell (3,6) (horizontal)\\n18. Cell (3,5) < Cell (4,5) (vertical)\\n19. Cell (4,0) > Cell (4,1) (horizontal)\\n20. Cell (4,1) < Cell (5,1) (vertical)\\n21. Cell (4,2) > Cell (4,3) (horizontal)\\n22. Cell (4,3) < Cell (4,4) (horizontal)\\n23. Cell (4,3) < Cell (5,3) (vertical)\\n24. Cell (4,4) < Cell (5,4) (vertical)\\n25. Cell (5,0) < Cell (5,1) (horizontal)\\n26. Cell (5,0) < Cell (6,0) (vertical)\\n27. Cell (5,2) > Cell (5,3) (horizontal)\\n28. Cell (5,2) < Cell (6,2) (vertical)\\n29. Cell (5,3) < Cell (5,4) (horizontal)\\n30. Cell (5,4) > Cell (5,5) (horizontal)\\n31. Cell (5,4) > Cell (6,4) (vertical)\\n32. Cell (5,5) > Cell (5,6) (horizontal)\\n33. Cell (5,5) > Cell (6,5) (vertical)\\n34. Cell (5,6) < Cell (6,6) (vertical)\\n35. Cell (6,2) > Cell (6,3) (horizontal)\\n36. Cell (6,4) > Cell (6,5) (horizontal)\\n37. Cell (6,5) < Cell (6,6) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[3, 1, 5, 6, 2, 7, 4], [2, 7, 4, 3, 1, 5, 6], [5, 6, 2, 7, 4, 3, 1], [4, 3, 1, 5, 6, 2, 7], [7, 4, 3, 1, 5, 6, 2], [1, 5, 6, 2, 7, 4, 3], [6, 2, 7, 4, 3, 1, 5]]", "system": "{\"grid\": [[0, 0, 0, 0, 0, 0, 0], [2, 7, 4, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 5, 0, 0, 0], [0, 4, 3, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [1, 5], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [2, 5], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [3, 6], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \">\"}, {\"cell1\": [5, 5], \"cell2\": [6, 5], \"symbol\": \">\"}, {\"cell1\": [5, 6], \"cell2\": [6, 6], \"symbol\": \"<\"}, {\"cell1\": [6, 2], \"cell2\": [6, 3], \"symbol\": \">\"}, {\"cell1\": [6, 4], \"cell2\": [6, 5], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \"<\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000409.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _ 2 _\\n_ _ _ _ _ 4 _\\n_ _ 4 5 _ _ _\\n_ _ _ _ _ _ _\\n5 _ 3 _ 1 _ _\\n_ 7 _ 6 _ _ _\\n_ _ _ _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,3) < Cell (0,4) (horizontal)\\n2. Cell (0,4) > Cell (0,5) (horizontal)\\n3. Cell (0,6) < Cell (1,6) (vertical)\\n4. Cell (1,0) > Cell (2,0) (vertical)\\n5. Cell (1,1) < Cell (1,2) (horizontal)\\n6. Cell (1,1) < Cell (2,1) (vertical)\\n7. Cell (1,3) < Cell (2,3) (vertical)\\n8. Cell (1,4) > Cell (2,4) (vertical)\\n9. Cell (1,5) < Cell (1,6) (horizontal)\\n10. Cell (1,6) < Cell (2,6) (vertical)\\n11. Cell (2,1) > Cell (2,2) (horizontal)\\n12. Cell (2,3) > Cell (2,4) (horizontal)\\n13. Cell (2,4) < Cell (3,4) (vertical)\\n14. Cell (3,1) > Cell (3,2) (horizontal)\\n15. Cell (3,2) < Cell (4,2) (vertical)\\n16. Cell (3,3) < Cell (3,4) (horizontal)\\n17. Cell (3,3) < Cell (4,3) (vertical)\\n18. Cell (3,4) > Cell (3,5) (horizontal)\\n19. Cell (3,6) > Cell (4,6) (vertical)\\n20. Cell (4,0) > Cell (5,0) (vertical)\\n21. Cell (4,1) < Cell (4,2) (horizontal)\\n22. Cell (4,2) > Cell (5,2) (vertical)\\n23. Cell (4,4) < Cell (5,4) (vertical)\\n24. Cell (5,1) > Cell (6,1) (vertical)\\n25. Cell (5,5) > Cell (5,6) (horizontal)\\n26. Cell (6,0) > Cell (6,1) (horizontal)\\n27. Cell (6,5) > Cell (6,6) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[7, 1, 6, 4, 5, 2, 3], [2, 3, 7, 1, 6, 4, 5], [1, 6, 4, 5, 2, 3, 7], [4, 5, 2, 3, 7, 1, 6], [5, 2, 3, 7, 1, 6, 4], [3, 7, 1, 6, 4, 5, 2], [6, 4, 5, 2, 3, 7, 1]]", "system": "{\"grid\": [[0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 4, 0], [0, 0, 4, 5, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [5, 0, 3, 0, 1, 0, 0], [0, 7, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [1, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [1, 5], \"cell2\": [1, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [4, 6], \"symbol\": \">\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 1], \"cell2\": [6, 1], \"symbol\": \">\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \">\"}, {\"cell1\": [6, 0], \"cell2\": [6, 1], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000410.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 2 5 _ _\\n_ _ _ _ _ _ _\\n_ _ _ _ _ 2 _\\n_ 5 _ _ _ _ 4\\n_ _ _ _ _ _ _\\n_ _ _ _ 1 _ _\\n5 _ 6 _ _ _ 2\\n\\n### Inequality constraints:\\n1. Cell (0,0) > Cell (0,1) (horizontal)\\n2. Cell (0,0) > Cell (1,0) (vertical)\\n3. Cell (0,1) < Cell (0,2) (horizontal)\\n4. Cell (0,2) < Cell (1,2) (vertical)\\n5. Cell (0,5) < Cell (1,5) (vertical)\\n6. Cell (1,0) > Cell (2,0) (vertical)\\n7. Cell (1,1) < Cell (1,2) (horizontal)\\n8. Cell (1,2) > Cell (1,3) (horizontal)\\n9. Cell (1,5) > Cell (1,6) (horizontal)\\n10. Cell (2,1) < Cell (2,2) (horizontal)\\n11. Cell (2,2) > Cell (2,3) (horizontal)\\n12. Cell (2,4) > Cell (2,5) (horizontal)\\n13. Cell (3,0) < Cell (4,0) (vertical)\\n14. Cell (3,1) > Cell (3,2) (horizontal)\\n15. Cell (3,2) < Cell (3,3) (horizontal)\\n16. Cell (3,3) > Cell (4,3) (vertical)\\n17. Cell (3,4) > Cell (3,5) (horizontal)\\n18. Cell (3,5) < Cell (4,5) (vertical)\\n19. Cell (4,0) > Cell (5,0) (vertical)\\n20. Cell (4,1) > Cell (4,2) (horizontal)\\n21. Cell (4,2) > Cell (5,2) (vertical)\\n22. Cell (4,3) > Cell (4,4) (horizontal)\\n23. Cell (4,3) < Cell (5,3) (vertical)\\n24. Cell (4,4) < Cell (4,5) (horizontal)\\n25. Cell (4,5) > Cell (4,6) (horizontal)\\n26. Cell (4,5) < Cell (5,5) (vertical)\\n27. Cell (5,0) < Cell (6,0) (vertical)\\n28. Cell (5,1) > Cell (5,2) (horizontal)\\n29. Cell (5,2) < Cell (5,3) (horizontal)\\n30. Cell (5,3) > Cell (5,4) (horizontal)\\n31. Cell (6,1) < Cell (6,2) (horizontal)\\n32. Cell (6,3) > Cell (6,4) (horizontal)\\n33. Cell (6,5) > Cell (6,6) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[7, 3, 4, 2, 5, 1, 6], [4, 2, 5, 1, 6, 7, 3], [1, 6, 7, 3, 4, 2, 5], [2, 5, 1, 6, 7, 3, 4], [6, 7, 3, 4, 2, 5, 1], [3, 4, 2, 5, 1, 6, 7], [5, 1, 6, 7, 3, 4, 2]]", "system": "{\"grid\": [[0, 0, 0, 2, 5, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0], [0, 5, 0, 0, 0, 0, 4], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [5, 0, 6, 0, 0, 0, 2]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \">\"}, {\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \">\"}, {\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 5], \"cell2\": [1, 6], \"symbol\": \">\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \"<\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \">\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 5], \"cell2\": [4, 6], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \"<\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [6, 1], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [6, 3], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000411.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 4 _ 3 _ 2\\n_ 4 _ _ _ _ _\\n3 _ _ _ _ _ _\\n_ _ _ _ _ _ _\\n_ _ _ _ _ _ _\\n5 _ 7 _ 6 _ _\\n_ _ _ _ _ _ 7\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (0,2) (horizontal)\\n2. Cell (0,1) < Cell (1,1) (vertical)\\n3. Cell (0,2) < Cell (1,2) (vertical)\\n4. Cell (0,3) > Cell (0,4) (horizontal)\\n5. Cell (0,3) > Cell (1,3) (vertical)\\n6. Cell (0,4) < Cell (0,5) (horizontal)\\n7. Cell (0,4) < Cell (1,4) (vertical)\\n8. Cell (0,5) > Cell (0,6) (horizontal)\\n9. Cell (0,5) > Cell (1,5) (vertical)\\n10. Cell (1,0) < Cell (1,1) (horizontal)\\n11. Cell (1,0) < Cell (2,0) (vertical)\\n12. Cell (1,1) < Cell (2,1) (vertical)\\n13. Cell (1,2) > Cell (1,3) (horizontal)\\n14. Cell (1,4) > Cell (1,5) (horizontal)\\n15. Cell (1,4) > Cell (2,4) (vertical)\\n16. Cell (2,0) < Cell (3,0) (vertical)\\n17. Cell (2,5) < Cell (2,6) (horizontal)\\n18. Cell (2,5) < Cell (3,5) (vertical)\\n19. Cell (2,6) > Cell (3,6) (vertical)\\n20. Cell (3,0) > Cell (3,1) (horizontal)\\n21. Cell (3,1) < Cell (4,1) (vertical)\\n22. Cell (3,2) > Cell (4,2) (vertical)\\n23. Cell (3,3) < Cell (4,3) (vertical)\\n24. Cell (3,4) > Cell (4,4) (vertical)\\n25. Cell (3,6) > Cell (4,6) (vertical)\\n26. Cell (4,0) < Cell (4,1) (horizontal)\\n27. Cell (4,0) < Cell (5,0) (vertical)\\n28. Cell (4,1) > Cell (4,2) (horizontal)\\n29. Cell (4,2) < Cell (4,3) (horizontal)\\n30. Cell (4,4) < Cell (4,5) (horizontal)\\n31. Cell (4,5) > Cell (5,5) (vertical)\\n32. Cell (4,6) < Cell (5,6) (vertical)\\n33. Cell (5,0) > Cell (6,0) (vertical)\\n34. Cell (5,1) < Cell (5,2) (horizontal)\\n35. Cell (5,3) < Cell (6,3) (vertical)\\n36. Cell (5,4) > Cell (5,5) (horizontal)\\n37. Cell (5,5) < Cell (5,6) (horizontal)\\n38. Cell (6,4) > Cell (6,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[6, 1, 4, 5, 3, 7, 2], [1, 4, 5, 3, 7, 2, 6], [3, 7, 2, 6, 1, 4, 5], [7, 2, 6, 1, 4, 5, 3], [4, 5, 3, 7, 2, 6, 1], [5, 3, 7, 2, 6, 1, 4], [2, 6, 1, 4, 5, 3, 7]]", "system": "{\"grid\": [[0, 0, 4, 0, 3, 0, 2], [0, 4, 0, 0, 0, 0, 0], [3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [5, 0, 7, 0, 6, 0, 0], [0, 0, 0, 0, 0, 0, 7]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 5], \"cell2\": [0, 6], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 5], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [2, 5], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [4, 6], \"symbol\": \">\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [4, 6], \"cell2\": [5, 6], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \">\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [6, 3], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \"<\"}, {\"cell1\": [6, 4], \"cell2\": [6, 5], \"symbol\": \">\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000412.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 6 _ _ 5 _\\n_ _ _ _ _ _ _\\n_ _ _ 1 _ _ 6\\n_ _ 1 _ _ _ 2\\n_ _ _ _ _ 7 5\\n_ _ _ _ _ _ 3\\n_ _ _ _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,2) > Cell (0,3) (horizontal)\\n3. Cell (0,3) < Cell (1,3) (vertical)\\n4. Cell (0,6) < Cell (1,6) (vertical)\\n5. Cell (1,1) < Cell (1,2) (horizontal)\\n6. Cell (1,1) < Cell (2,1) (vertical)\\n7. Cell (1,2) > Cell (2,2) (vertical)\\n8. Cell (1,3) > Cell (1,4) (horizontal)\\n9. Cell (1,3) > Cell (2,3) (vertical)\\n10. Cell (2,0) < Cell (2,1) (horizontal)\\n11. Cell (2,1) > Cell (3,1) (vertical)\\n12. Cell (2,2) > Cell (2,3) (horizontal)\\n13. Cell (2,3) < Cell (2,4) (horizontal)\\n14. Cell (2,3) < Cell (3,3) (vertical)\\n15. Cell (2,4) < Cell (2,5) (horizontal)\\n16. Cell (2,4) < Cell (3,4) (vertical)\\n17. Cell (2,6) > Cell (3,6) (vertical)\\n18. Cell (3,2) < Cell (3,3) (horizontal)\\n19. Cell (4,0) < Cell (4,1) (horizontal)\\n20. Cell (4,0) < Cell (5,0) (vertical)\\n21. Cell (4,2) > Cell (5,2) (vertical)\\n22. Cell (4,4) < Cell (5,4) (vertical)\\n23. Cell (5,0) < Cell (6,0) (vertical)\\n24. Cell (5,2) < Cell (5,3) (horizontal)\\n25. Cell (5,3) > Cell (6,3) (vertical)\\n26. Cell (5,4) > Cell (5,5) (horizontal)\\n27. Cell (5,4) < Cell (6,4) (vertical)\\n28. Cell (5,6) < Cell (6,6) (vertical)\\n29. Cell (6,1) < Cell (6,2) (horizontal)\\n30. Cell (6,5) < Cell (6,6) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[3, 4, 6, 2, 7, 5, 1], [6, 2, 7, 5, 1, 3, 4], [2, 7, 5, 1, 3, 4, 6], [7, 5, 1, 3, 4, 6, 2], [1, 3, 4, 6, 2, 7, 5], [4, 6, 2, 7, 5, 1, 3], [5, 1, 3, 4, 6, 2, 7]]", "system": "{\"grid\": [[0, 0, 6, 0, 0, 5, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 6], [0, 0, 1, 0, 0, 0, 2], [0, 0, 0, 0, 0, 7, 5], [0, 0, 0, 0, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [0, 6], \"cell2\": [1, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [6, 3], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 6], \"cell2\": [6, 6], \"symbol\": \"<\"}, {\"cell1\": [6, 1], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \"<\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000413.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 7×7 grid.\\n2. Fill each cell with a number from 1 to 7.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ 4 _ _ _ _ _\\n_ _ 5 _ _ _ _\\n2 5 _ _ _ _ _\\n_ _ _ 2 _ _ _\\n_ _ _ 5 _ _ 6\\n4 _ _ _ _ _ _\\n_ _ _ 6 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,0) < Cell (1,0) (vertical)\\n3. Cell (0,1) > Cell (1,1) (vertical)\\n4. Cell (0,3) > Cell (1,3) (vertical)\\n5. Cell (0,4) > Cell (0,5) (horizontal)\\n6. Cell (0,4) > Cell (1,4) (vertical)\\n7. Cell (0,6) > Cell (1,6) (vertical)\\n8. Cell (1,0) > Cell (1,1) (horizontal)\\n9. Cell (1,1) < Cell (1,2) (horizontal)\\n10. Cell (1,3) < Cell (2,3) (vertical)\\n11. Cell (1,4) < Cell (2,4) (vertical)\\n12. Cell (2,1) > Cell (3,1) (vertical)\\n13. Cell (2,2) < Cell (2,3) (horizontal)\\n14. Cell (2,3) < Cell (2,4) (horizontal)\\n15. Cell (2,3) > Cell (3,3) (vertical)\\n16. Cell (2,4) > Cell (2,5) (horizontal)\\n17. Cell (2,4) > Cell (3,4) (vertical)\\n18. Cell (2,5) < Cell (2,6) (horizontal)\\n19. Cell (3,2) > Cell (4,2) (vertical)\\n20. Cell (3,3) < Cell (3,4) (horizontal)\\n21. Cell (3,4) > Cell (4,4) (vertical)\\n22. Cell (3,6) < Cell (4,6) (vertical)\\n23. Cell (4,0) < Cell (4,1) (horizontal)\\n24. Cell (4,1) > Cell (5,1) (vertical)\\n25. Cell (4,3) < Cell (5,3) (vertical)\\n26. Cell (4,4) < Cell (4,5) (horizontal)\\n27. Cell (4,4) < Cell (5,4) (vertical)\\n28. Cell (4,6) > Cell (5,6) (vertical)\\n29. Cell (5,1) > Cell (5,2) (horizontal)\\n30. Cell (5,4) < Cell (6,4) (vertical)\\n31. Cell (5,5) > Cell (5,6) (horizontal)\\n32. Cell (6,0) > Cell (6,1) (horizontal)\\n33. Cell (6,2) < Cell (6,3) (horizontal)\\n34. Cell (6,5) > Cell (6,6) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row7]]", "answer": "[[1, 4, 6, 3, 7, 2, 5], [7, 2, 5, 1, 4, 6, 3], [2, 5, 1, 4, 6, 3, 7], [6, 3, 7, 2, 5, 1, 4], [3, 7, 2, 5, 1, 4, 6], [4, 6, 3, 7, 2, 5, 1], [5, 1, 4, 6, 3, 7, 2]]", "system": "{\"grid\": [[0, 4, 0, 0, 0, 0, 0], [0, 0, 5, 0, 0, 0, 0], [2, 5, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 5, 0, 0, 6], [4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 6, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [1, 6], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [2, 5], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [4, 6], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 6], \"cell2\": [5, 6], \"symbol\": \">\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \">\"}, {\"cell1\": [6, 0], \"cell2\": [6, 1], \"symbol\": \">\"}, {\"cell1\": [6, 2], \"cell2\": [6, 3], \"symbol\": \"<\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}], \"size\": 7}", "category": "futoshiki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000414.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ 6 _ _ _ _ _\\n1 _ _ _ _ _ _ _\\n_ _ _ 8 7 _ _ 5\\n_ _ _ _ _ 2 _ _\\n5 3 _ _ _ _ _ _\\n_ _ _ _ _ _ _ _\\n_ _ 5 _ 2 _ _ 7\\n_ _ _ _ 6 _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) > Cell (0,1) (horizontal)\\n2. Cell (0,1) > Cell (0,2) (horizontal)\\n3. Cell (0,5) > Cell (0,6) (horizontal)\\n4. Cell (0,6) < Cell (1,6) (vertical)\\n5. Cell (0,7) < Cell (1,7) (vertical)\\n6. Cell (1,0) < Cell (1,1) (horizontal)\\n7. Cell (1,2) > Cell (1,3) (horizontal)\\n8. Cell (1,3) > Cell (1,4) (horizontal)\\n9. Cell (1,5) < Cell (2,5) (vertical)\\n10. Cell (1,6) > Cell (1,7) (horizontal)\\n11. Cell (1,6) < Cell (2,6) (vertical)\\n12. Cell (1,7) < Cell (2,7) (vertical)\\n13. Cell (2,0) < Cell (3,0) (vertical)\\n14. Cell (2,1) < Cell (3,1) (vertical)\\n15. Cell (2,3) > Cell (3,3) (vertical)\\n16. Cell (2,4) > Cell (2,5) (horizontal)\\n17. Cell (2,5) > Cell (2,6) (horizontal)\\n18. Cell (2,7) < Cell (3,7) (vertical)\\n19. Cell (3,0) > Cell (3,1) (horizontal)\\n20. Cell (3,0) > Cell (4,0) (vertical)\\n21. Cell (3,1) > Cell (3,2) (horizontal)\\n22. Cell (3,1) > Cell (4,1) (vertical)\\n23. Cell (3,2) < Cell (3,3) (horizontal)\\n24. Cell (3,2) > Cell (4,2) (vertical)\\n25. Cell (3,4) > Cell (3,5) (horizontal)\\n26. Cell (3,4) < Cell (4,4) (vertical)\\n27. Cell (3,5) > Cell (3,6) (horizontal)\\n28. Cell (3,6) < Cell (4,6) (vertical)\\n29. Cell (4,1) < Cell (5,1) (vertical)\\n30. Cell (4,3) < Cell (4,4) (horizontal)\\n31. Cell (4,4) > Cell (4,5) (horizontal)\\n32. Cell (4,5) > Cell (4,6) (horizontal)\\n33. Cell (4,6) < Cell (5,6) (vertical)\\n34. Cell (4,7) < Cell (5,7) (vertical)\\n35. Cell (5,1) > Cell (6,1) (vertical)\\n36. Cell (5,2) > Cell (5,3) (horizontal)\\n37. Cell (5,2) < Cell (6,2) (vertical)\\n38. Cell (5,3) > Cell (5,4) (horizontal)\\n39. Cell (5,4) < Cell (6,4) (vertical)\\n40. Cell (5,5) > Cell (5,6) (horizontal)\\n41. Cell (5,6) > Cell (5,7) (horizontal)\\n42. Cell (5,6) < Cell (6,6) (vertical)\\n43. Cell (6,1) < Cell (6,2) (horizontal)\\n44. Cell (6,3) > Cell (6,4) (horizontal)\\n45. Cell (6,3) < Cell (7,3) (vertical)\\n46. Cell (6,5) < Cell (7,5) (vertical)\\n47. Cell (6,6) > Cell (6,7) (horizontal)\\n48. Cell (6,7) > Cell (7,7) (vertical)\\n49. Cell (7,2) > Cell (7,3) (horizontal)\\n50. Cell (7,4) > Cell (7,5) (horizontal)\\n51. Cell (7,5) < Cell (7,6) (horizontal)\\n52. Cell (7,6) > Cell (7,7) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[8, 7, 6, 4, 5, 3, 2, 1], [1, 8, 7, 6, 4, 5, 3, 2], [3, 2, 1, 8, 7, 6, 4, 5], [7, 6, 4, 5, 3, 2, 1, 8], [5, 3, 2, 1, 8, 7, 6, 4], [4, 5, 3, 2, 1, 8, 7, 6], [6, 4, 5, 3, 2, 1, 8, 7], [2, 1, 8, 7, 6, 4, 5, 3]]", "system": "{\"grid\": [[0, 0, 6, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 8, 7, 0, 0, 5], [0, 0, 0, 0, 0, 2, 0, 0], [5, 3, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 5, 0, 2, 0, 0, 7], [0, 0, 0, 0, 6, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \">\"}, {\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [0, 6], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [1, 6], \"symbol\": \"<\"}, {\"cell1\": [0, 7], \"cell2\": [1, 7], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 5], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [1, 7], \"symbol\": \">\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 7], \"cell2\": [2, 7], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [2, 5], \"cell2\": [2, 6], \"symbol\": \">\"}, {\"cell1\": [2, 7], \"cell2\": [3, 7], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \">\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [4, 6], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [4, 6], \"symbol\": \">\"}, {\"cell1\": [4, 6], \"cell2\": [5, 6], \"symbol\": \"<\"}, {\"cell1\": [4, 7], \"cell2\": [5, 7], \"symbol\": \"<\"}, {\"cell1\": [5, 1], \"cell2\": [6, 1], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \">\"}, {\"cell1\": [5, 6], \"cell2\": [5, 7], \"symbol\": \">\"}, {\"cell1\": [5, 6], \"cell2\": [6, 6], \"symbol\": \"<\"}, {\"cell1\": [6, 1], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [6, 3], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \"<\"}, {\"cell1\": [6, 5], \"cell2\": [7, 5], \"symbol\": \"<\"}, {\"cell1\": [6, 6], \"cell2\": [6, 7], \"symbol\": \">\"}, {\"cell1\": [6, 7], \"cell2\": [7, 7], \"symbol\": \">\"}, {\"cell1\": [7, 2], \"cell2\": [7, 3], \"symbol\": \">\"}, {\"cell1\": [7, 4], \"cell2\": [7, 5], \"symbol\": \">\"}, {\"cell1\": [7, 5], \"cell2\": [7, 6], \"symbol\": \"<\"}, {\"cell1\": [7, 6], \"cell2\": [7, 7], \"symbol\": \">\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000415.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ 3 1 _ _\\n_ _ _ _ _ _ _ _\\n_ _ _ _ _ _ 8 _\\n7 _ _ 8 _ _ _ _\\n5 _ _ _ _ _ _ _\\n_ 2 _ _ _ _ _ 7\\n_ 5 _ _ _ _ 4 _\\n_ _ _ _ 8 _ _ 3\\n\\n### Inequality constraints:\\n1. Cell (0,3) > Cell (1,3) (vertical)\\n2. Cell (0,4) > Cell (0,5) (horizontal)\\n3. Cell (0,6) > Cell (0,7) (horizontal)\\n4. Cell (0,7) < Cell (1,7) (vertical)\\n5. Cell (1,0) < Cell (2,0) (vertical)\\n6. Cell (1,1) < Cell (1,2) (horizontal)\\n7. Cell (1,1) < Cell (2,1) (vertical)\\n8. Cell (1,2) > Cell (1,3) (horizontal)\\n9. Cell (1,2) > Cell (2,2) (vertical)\\n10. Cell (1,3) > Cell (1,4) (horizontal)\\n11. Cell (1,3) < Cell (2,3) (vertical)\\n12. Cell (1,6) < Cell (1,7) (horizontal)\\n13. Cell (1,6) < Cell (2,6) (vertical)\\n14. Cell (2,0) < Cell (3,0) (vertical)\\n15. Cell (2,1) > Cell (2,2) (horizontal)\\n16. Cell (2,3) > Cell (2,4) (horizontal)\\n17. Cell (2,3) < Cell (3,3) (vertical)\\n18. Cell (2,4) > Cell (2,5) (horizontal)\\n19. Cell (2,5) < Cell (3,5) (vertical)\\n20. Cell (2,6) > Cell (3,6) (vertical)\\n21. Cell (3,0) > Cell (3,1) (horizontal)\\n22. Cell (3,0) > Cell (4,0) (vertical)\\n23. Cell (3,1) < Cell (4,1) (vertical)\\n24. Cell (3,2) < Cell (4,2) (vertical)\\n25. Cell (3,3) > Cell (3,4) (horizontal)\\n26. Cell (3,4) < Cell (3,5) (horizontal)\\n27. Cell (3,4) < Cell (4,4) (vertical)\\n28. Cell (3,5) > Cell (4,5) (vertical)\\n29. Cell (3,6) > Cell (3,7) (horizontal)\\n30. Cell (4,2) > Cell (4,3) (horizontal)\\n31. Cell (4,3) < Cell (4,4) (horizontal)\\n32. Cell (4,3) < Cell (5,3) (vertical)\\n33. Cell (4,4) > Cell (5,4) (vertical)\\n34. Cell (4,5) > Cell (4,6) (horizontal)\\n35. Cell (4,5) > Cell (5,5) (vertical)\\n36. Cell (4,6) < Cell (4,7) (horizontal)\\n37. Cell (5,0) > Cell (5,1) (horizontal)\\n38. Cell (5,0) < Cell (6,0) (vertical)\\n39. Cell (5,1) < Cell (5,2) (horizontal)\\n40. Cell (5,2) > Cell (6,2) (vertical)\\n41. Cell (5,3) < Cell (5,4) (horizontal)\\n42. Cell (5,3) > Cell (6,3) (vertical)\\n43. Cell (5,4) > Cell (5,5) (horizontal)\\n44. Cell (5,4) > Cell (6,4) (vertical)\\n45. Cell (6,2) > Cell (7,2) (vertical)\\n46. Cell (6,3) > Cell (6,4) (horizontal)\\n47. Cell (6,3) > Cell (7,3) (vertical)\\n48. Cell (6,5) > Cell (6,6) (horizontal)\\n49. Cell (6,5) > Cell (7,5) (vertical)\\n50. Cell (7,1) > Cell (7,2) (horizontal)\\n51. Cell (7,3) < Cell (7,4) (horizontal)\\n52. Cell (7,4) > Cell (7,5) (horizontal)\\n53. Cell (7,6) > Cell (7,7) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[2, 8, 5, 6, 3, 1, 7, 4], [3, 1, 7, 4, 2, 8, 5, 6], [6, 3, 1, 7, 4, 2, 8, 5], [7, 4, 2, 8, 5, 6, 3, 1], [5, 6, 3, 1, 7, 4, 2, 8], [4, 2, 8, 5, 6, 3, 1, 7], [8, 5, 6, 3, 1, 7, 4, 2], [1, 7, 4, 2, 8, 5, 6, 3]]", "system": "{\"grid\": [[0, 0, 0, 0, 3, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 8, 0], [7, 0, 0, 8, 0, 0, 0, 0], [5, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 7], [0, 5, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 8, 0, 0, 3]], \"inequalities\": [{\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [0, 7], \"symbol\": \">\"}, {\"cell1\": [0, 7], \"cell2\": [1, 7], \"symbol\": \"<\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [1, 7], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 1], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \">\"}, {\"cell1\": [2, 5], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [3, 7], \"symbol\": \">\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [4, 6], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [4, 6], \"cell2\": [4, 7], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \">\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \"<\"}, {\"cell1\": [5, 1], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [6, 2], \"symbol\": \">\"}, {\"cell1\": [5, 3], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 3], \"cell2\": [6, 3], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [6, 2], \"cell2\": [7, 2], \"symbol\": \">\"}, {\"cell1\": [6, 3], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [7, 5], \"symbol\": \">\"}, {\"cell1\": [7, 1], \"cell2\": [7, 2], \"symbol\": \">\"}, {\"cell1\": [7, 3], \"cell2\": [7, 4], \"symbol\": \"<\"}, {\"cell1\": [7, 4], \"cell2\": [7, 5], \"symbol\": \">\"}, {\"cell1\": [7, 6], \"cell2\": [7, 7], \"symbol\": \">\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000416.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 6 8 _ _ 2\\n_ _ _ _ _ _ _ _\\n_ 2 _ 5 4 6 _ _\\n_ _ _ _ _ 5 _ _\\n_ 4 _ _ _ _ _ _\\n_ _ _ 1 _ _ _ 4\\n_ _ _ _ 6 _ _ _\\n_ _ _ _ _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,0) < Cell (1,0) (vertical)\\n3. Cell (0,2) < Cell (0,3) (horizontal)\\n4. Cell (0,3) < Cell (0,4) (horizontal)\\n5. Cell (0,4) > Cell (0,5) (horizontal)\\n6. Cell (0,5) > Cell (0,6) (horizontal)\\n7. Cell (1,0) > Cell (2,0) (vertical)\\n8. Cell (1,3) > Cell (1,4) (horizontal)\\n9. Cell (1,4) < Cell (1,5) (horizontal)\\n10. Cell (1,6) < Cell (1,7) (horizontal)\\n11. Cell (2,0) < Cell (2,1) (horizontal)\\n12. Cell (2,0) < Cell (3,0) (vertical)\\n13. Cell (2,2) > Cell (3,2) (vertical)\\n14. Cell (2,4) < Cell (2,5) (horizontal)\\n15. Cell (2,4) > Cell (3,4) (vertical)\\n16. Cell (2,6) > Cell (2,7) (horizontal)\\n17. Cell (2,7) > Cell (3,7) (vertical)\\n18. Cell (3,1) > Cell (3,2) (horizontal)\\n19. Cell (3,2) < Cell (4,2) (vertical)\\n20. Cell (3,3) < Cell (3,4) (horizontal)\\n21. Cell (3,3) < Cell (4,3) (vertical)\\n22. Cell (3,4) < Cell (3,5) (horizontal)\\n23. Cell (3,5) > Cell (3,6) (horizontal)\\n24. Cell (3,5) > Cell (4,5) (vertical)\\n25. Cell (3,6) < Cell (3,7) (horizontal)\\n26. Cell (4,0) > Cell (4,1) (horizontal)\\n27. Cell (4,1) < Cell (5,1) (vertical)\\n28. Cell (4,2) < Cell (4,3) (horizontal)\\n29. Cell (4,2) < Cell (5,2) (vertical)\\n30. Cell (4,3) > Cell (4,4) (horizontal)\\n31. Cell (4,5) < Cell (5,5) (vertical)\\n32. Cell (4,7) < Cell (5,7) (vertical)\\n33. Cell (5,0) < Cell (5,1) (horizontal)\\n34. Cell (5,1) > Cell (6,1) (vertical)\\n35. Cell (5,2) > Cell (5,3) (horizontal)\\n36. Cell (5,6) > Cell (5,7) (horizontal)\\n37. Cell (5,7) > Cell (6,7) (vertical)\\n38. Cell (6,3) > Cell (7,3) (vertical)\\n39. Cell (6,5) > Cell (6,6) (horizontal)\\n40. Cell (6,6) > Cell (7,6) (vertical)\\n41. Cell (7,1) < Cell (7,2) (horizontal)\\n42. Cell (7,4) > Cell (7,5) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[3, 5, 4, 6, 8, 7, 1, 2], [4, 6, 8, 7, 1, 2, 3, 5], [1, 2, 3, 5, 4, 6, 8, 7], [8, 7, 1, 2, 3, 5, 4, 6], [5, 4, 6, 8, 7, 1, 2, 3], [6, 8, 7, 1, 2, 3, 5, 4], [2, 3, 5, 4, 6, 8, 7, 1], [7, 1, 2, 3, 5, 4, 6, 8]]", "system": "{\"grid\": [[0, 0, 0, 6, 8, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 5, 4, 6, 0, 0], [0, 0, 0, 0, 0, 5, 0, 0], [0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 4], [0, 0, 0, 0, 6, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \">\"}, {\"cell1\": [0, 5], \"cell2\": [0, 6], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [1, 7], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 0], \"cell2\": [3, 0], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [2, 6], \"cell2\": [2, 7], \"symbol\": \">\"}, {\"cell1\": [2, 7], \"cell2\": [3, 7], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [3, 6], \"cell2\": [3, 7], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \"<\"}, {\"cell1\": [4, 7], \"cell2\": [5, 7], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [5, 1], \"cell2\": [6, 1], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \">\"}, {\"cell1\": [5, 6], \"cell2\": [5, 7], \"symbol\": \">\"}, {\"cell1\": [5, 7], \"cell2\": [6, 7], \"symbol\": \">\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}, {\"cell1\": [6, 6], \"cell2\": [7, 6], \"symbol\": \">\"}, {\"cell1\": [7, 1], \"cell2\": [7, 2], \"symbol\": \"<\"}, {\"cell1\": [7, 4], \"cell2\": [7, 5], \"symbol\": \">\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000417.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _ _ _ _\\n_ _ _ _ _ _ 4 _\\n_ _ _ _ _ 7 _ _\\n_ _ 5 8 1 _ 6 7\\n_ _ _ _ _ _ _ 8\\n_ _ _ _ _ _ _ _\\n4 _ _ 3 _ 5 _ _\\n_ _ _ _ _ _ 2 _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (0,1) (horizontal)\\n2. Cell (0,0) < Cell (1,0) (vertical)\\n3. Cell (0,1) < Cell (0,2) (horizontal)\\n4. Cell (0,1) > Cell (1,1) (vertical)\\n5. Cell (0,2) > Cell (0,3) (horizontal)\\n6. Cell (0,2) > Cell (1,2) (vertical)\\n7. Cell (0,3) < Cell (0,4) (horizontal)\\n8. Cell (0,4) < Cell (0,5) (horizontal)\\n9. Cell (0,5) < Cell (0,6) (horizontal)\\n10. Cell (0,5) > Cell (1,5) (vertical)\\n11. Cell (0,6) > Cell (0,7) (horizontal)\\n12. Cell (1,1) > Cell (1,2) (horizontal)\\n13. Cell (1,2) > Cell (2,2) (vertical)\\n14. Cell (1,3) < Cell (1,4) (horizontal)\\n15. Cell (1,3) > Cell (2,3) (vertical)\\n16. Cell (1,4) > Cell (2,4) (vertical)\\n17. Cell (1,6) > Cell (2,6) (vertical)\\n18. Cell (2,0) < Cell (2,1) (horizontal)\\n19. Cell (2,2) < Cell (2,3) (horizontal)\\n20. Cell (2,2) < Cell (3,2) (vertical)\\n21. Cell (2,5) > Cell (2,6) (horizontal)\\n22. Cell (2,6) < Cell (3,6) (vertical)\\n23. Cell (3,0) > Cell (3,1) (horizontal)\\n24. Cell (3,0) > Cell (4,0) (vertical)\\n25. Cell (3,2) < Cell (3,3) (horizontal)\\n26. Cell (3,3) > Cell (3,4) (horizontal)\\n27. Cell (3,3) > Cell (4,3) (vertical)\\n28. Cell (3,4) < Cell (3,5) (horizontal)\\n29. Cell (3,4) < Cell (4,4) (vertical)\\n30. Cell (3,5) < Cell (3,6) (horizontal)\\n31. Cell (3,6) < Cell (3,7) (horizontal)\\n32. Cell (3,7) < Cell (4,7) (vertical)\\n33. Cell (4,0) < Cell (5,0) (vertical)\\n34. Cell (4,3) > Cell (5,3) (vertical)\\n35. Cell (4,5) < Cell (5,5) (vertical)\\n36. Cell (5,2) < Cell (6,2) (vertical)\\n37. Cell (5,4) > Cell (6,4) (vertical)\\n38. Cell (5,6) < Cell (6,6) (vertical)\\n39. Cell (6,0) < Cell (7,0) (vertical)\\n40. Cell (6,1) < Cell (6,2) (horizontal)\\n41. Cell (6,2) > Cell (6,3) (horizontal)\\n42. Cell (6,3) < Cell (7,3) (vertical)\\n43. Cell (6,6) > Cell (7,6) (vertical)\\n44. Cell (7,1) < Cell (7,2) (horizontal)\\n45. Cell (7,5) > Cell (7,6) (horizontal)\\n46. Cell (7,6) < Cell (7,7) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[2, 5, 8, 1, 4, 6, 7, 3], [7, 3, 2, 5, 8, 1, 4, 6], [5, 8, 1, 4, 6, 7, 3, 2], [3, 2, 5, 8, 1, 4, 6, 7], [1, 4, 6, 7, 3, 2, 5, 8], [6, 7, 3, 2, 5, 8, 1, 4], [4, 6, 7, 3, 2, 5, 8, 1], [8, 1, 4, 6, 7, 3, 2, 5]]", "system": "{\"grid\": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 4, 0], [0, 0, 0, 0, 0, 7, 0, 0], [0, 0, 5, 8, 1, 0, 6, 7], [0, 0, 0, 0, 0, 0, 0, 8], [0, 0, 0, 0, 0, 0, 0, 0], [4, 0, 0, 3, 0, 5, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [0, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 1], \"cell2\": [0, 2], \"symbol\": \"<\"}, {\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [0, 3], \"symbol\": \">\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [0, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \"<\"}, {\"cell1\": [0, 5], \"cell2\": [0, 6], \"symbol\": \"<\"}, {\"cell1\": [0, 5], \"cell2\": [1, 5], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [0, 7], \"symbol\": \">\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [1, 2], \"cell2\": [2, 2], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \">\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \">\"}, {\"cell1\": [2, 0], \"cell2\": [2, 1], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 5], \"cell2\": [2, 6], \"symbol\": \">\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \"<\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [3, 3], \"cell2\": [3, 4], \"symbol\": \">\"}, {\"cell1\": [3, 3], \"cell2\": [4, 3], \"symbol\": \">\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [3, 6], \"symbol\": \"<\"}, {\"cell1\": [3, 6], \"cell2\": [3, 7], \"symbol\": \"<\"}, {\"cell1\": [3, 7], \"cell2\": [4, 7], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [5, 6], \"cell2\": [6, 6], \"symbol\": \"<\"}, {\"cell1\": [6, 0], \"cell2\": [7, 0], \"symbol\": \"<\"}, {\"cell1\": [6, 1], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [6, 2], \"cell2\": [6, 3], \"symbol\": \">\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \"<\"}, {\"cell1\": [6, 6], \"cell2\": [7, 6], \"symbol\": \">\"}, {\"cell1\": [7, 1], \"cell2\": [7, 2], \"symbol\": \"<\"}, {\"cell1\": [7, 5], \"cell2\": [7, 6], \"symbol\": \">\"}, {\"cell1\": [7, 6], \"cell2\": [7, 7], \"symbol\": \"<\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000418.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ 7 _ _ _ _\\n_ _ 3 _ _ _ 7 _\\n1 _ _ _ _ _ _ _\\n7 _ 2 _ _ _ _ _\\n_ _ _ _ _ _ 2 _\\n_ _ _ _ _ _ 4 5\\n_ 3 _ _ _ _ _ _\\n_ 6 7 _ _ _ _ _\\n\\n### Inequality constraints:\\n1. Cell (0,1) < Cell (1,1) (vertical)\\n2. Cell (0,2) > Cell (1,2) (vertical)\\n3. Cell (0,3) > Cell (1,3) (vertical)\\n4. Cell (1,0) > Cell (2,0) (vertical)\\n5. Cell (1,2) < Cell (1,3) (horizontal)\\n6. Cell (1,3) < Cell (1,4) (horizontal)\\n7. Cell (1,4) < Cell (1,5) (horizontal)\\n8. Cell (1,4) > Cell (2,4) (vertical)\\n9. Cell (1,5) < Cell (1,6) (horizontal)\\n10. Cell (1,6) > Cell (1,7) (horizontal)\\n11. Cell (1,7) < Cell (2,7) (vertical)\\n12. Cell (2,4) < Cell (2,5) (horizontal)\\n13. Cell (2,6) > Cell (3,6) (vertical)\\n14. Cell (2,7) > Cell (3,7) (vertical)\\n15. Cell (3,0) > Cell (3,1) (horizontal)\\n16. Cell (3,0) > Cell (4,0) (vertical)\\n17. Cell (3,1) < Cell (3,2) (horizontal)\\n18. Cell (3,2) < Cell (4,2) (vertical)\\n19. Cell (3,4) < Cell (3,5) (horizontal)\\n20. Cell (3,5) > Cell (4,5) (vertical)\\n21. Cell (3,7) < Cell (4,7) (vertical)\\n22. Cell (4,0) < Cell (4,1) (horizontal)\\n23. Cell (4,2) > Cell (5,2) (vertical)\\n24. Cell (4,3) < Cell (4,4) (horizontal)\\n25. Cell (4,3) > Cell (5,3) (vertical)\\n26. Cell (4,4) > Cell (4,5) (horizontal)\\n27. Cell (4,4) < Cell (5,4) (vertical)\\n28. Cell (4,6) < Cell (4,7) (horizontal)\\n29. Cell (5,4) > Cell (5,5) (horizontal)\\n30. Cell (5,4) > Cell (6,4) (vertical)\\n31. Cell (5,5) < Cell (6,5) (vertical)\\n32. Cell (5,6) < Cell (5,7) (horizontal)\\n33. Cell (5,6) > Cell (6,6) (vertical)\\n34. Cell (6,0) > Cell (7,0) (vertical)\\n35. Cell (6,1) < Cell (7,1) (vertical)\\n36. Cell (6,2) < Cell (6,3) (horizontal)\\n37. Cell (6,3) < Cell (6,4) (horizontal)\\n38. Cell (6,3) > Cell (7,3) (vertical)\\n39. Cell (6,4) > Cell (7,4) (vertical)\\n40. Cell (6,5) < Cell (7,5) (vertical)\\n41. Cell (6,6) < Cell (7,6) (vertical)\\n42. Cell (7,1) < Cell (7,2) (horizontal)\\n43. Cell (7,5) > Cell (7,6) (horizontal)\\n44. Cell (7,6) < Cell (7,7) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[4, 5, 6, 7, 1, 2, 8, 3], [2, 8, 3, 4, 5, 6, 7, 1], [1, 2, 8, 3, 4, 5, 6, 7], [7, 1, 2, 8, 3, 4, 5, 6], [3, 4, 5, 6, 7, 1, 2, 8], [6, 7, 1, 2, 8, 3, 4, 5], [8, 3, 4, 5, 6, 7, 1, 2], [5, 6, 7, 1, 2, 8, 3, 4]]", "system": "{\"grid\": [[0, 0, 0, 7, 0, 0, 0, 0], [0, 0, 3, 0, 0, 0, 7, 0], [1, 0, 0, 0, 0, 0, 0, 0], [7, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 4, 5], [0, 3, 0, 0, 0, 0, 0, 0], [0, 6, 7, 0, 0, 0, 0, 0]], \"inequalities\": [{\"cell1\": [0, 1], \"cell2\": [1, 1], \"symbol\": \"<\"}, {\"cell1\": [0, 2], \"cell2\": [1, 2], \"symbol\": \">\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [1, 0], \"cell2\": [2, 0], \"symbol\": \">\"}, {\"cell1\": [1, 2], \"cell2\": [1, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 3], \"cell2\": [1, 4], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [1, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [1, 5], \"cell2\": [1, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [1, 7], \"symbol\": \">\"}, {\"cell1\": [1, 7], \"cell2\": [2, 7], \"symbol\": \"<\"}, {\"cell1\": [2, 4], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [2, 6], \"cell2\": [3, 6], \"symbol\": \">\"}, {\"cell1\": [2, 7], \"cell2\": [3, 7], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [4, 0], \"symbol\": \">\"}, {\"cell1\": [3, 1], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [4, 2], \"symbol\": \"<\"}, {\"cell1\": [3, 4], \"cell2\": [3, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [3, 7], \"cell2\": [4, 7], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [5, 2], \"symbol\": \">\"}, {\"cell1\": [4, 3], \"cell2\": [4, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 3], \"cell2\": [5, 3], \"symbol\": \">\"}, {\"cell1\": [4, 4], \"cell2\": [4, 5], \"symbol\": \">\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \"<\"}, {\"cell1\": [4, 6], \"cell2\": [4, 7], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \">\"}, {\"cell1\": [5, 5], \"cell2\": [6, 5], \"symbol\": \"<\"}, {\"cell1\": [5, 6], \"cell2\": [5, 7], \"symbol\": \"<\"}, {\"cell1\": [5, 6], \"cell2\": [6, 6], \"symbol\": \">\"}, {\"cell1\": [6, 0], \"cell2\": [7, 0], \"symbol\": \">\"}, {\"cell1\": [6, 1], \"cell2\": [7, 1], \"symbol\": \"<\"}, {\"cell1\": [6, 2], \"cell2\": [6, 3], \"symbol\": \"<\"}, {\"cell1\": [6, 3], \"cell2\": [6, 4], \"symbol\": \"<\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \">\"}, {\"cell1\": [6, 4], \"cell2\": [7, 4], \"symbol\": \">\"}, {\"cell1\": [6, 5], \"cell2\": [7, 5], \"symbol\": \"<\"}, {\"cell1\": [6, 6], \"cell2\": [7, 6], \"symbol\": \"<\"}, {\"cell1\": [7, 1], \"cell2\": [7, 2], \"symbol\": \"<\"}, {\"cell1\": [7, 5], \"cell2\": [7, 6], \"symbol\": \">\"}, {\"cell1\": [7, 6], \"cell2\": [7, 7], \"symbol\": \"<\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000419.png", "question": "You are given a Futoshiki puzzle with the following initial state. Your task is to solve the puzzle and provide the answer in a structured format.\\n\\n### Game Rules:\\n1. The puzzle is a 8×8 grid.\\n2. Fill each cell with a number from 1 to 8.\\n3. Each number must appear exactly once in each row and each column (no repetition).\\n4. Inequality symbols between cells (either '<' or '>') must be satisfied:\\n   - A horizontal constraint (i,j) < (i,j+1) means the left cell must be less than the right.\\n   - A vertical constraint (i,j) < (i+1,j) means the top cell must be less than the bottom.\\n\\n \\n### Coordinate System: \\n Top-left corner is (0,0) Using (row,col) as the coordinate system \\n ### Initial State:\\nGrid (_ for empty cells):\\n_ _ _ _ _ 6 _ 2\\n_ 4 _ _ _ _ _ _\\n_ _ _ _ 2 _ _ _\\n_ _ _ _ 5 _ _ 3\\n_ _ 7 8 _ _ _ _\\n_ _ _ _ _ _ _ _\\n1 _ _ _ _ _ _ _\\n6 _ _ 7 _ _ 5 _\\n\\n### Inequality constraints:\\n1. Cell (0,0) < Cell (1,0) (vertical)\\n2. Cell (0,3) > Cell (1,3) (vertical)\\n3. Cell (0,4) < Cell (0,5) (horizontal)\\n4. Cell (0,4) < Cell (1,4) (vertical)\\n5. Cell (0,5) > Cell (0,6) (horizontal)\\n6. Cell (0,6) > Cell (1,6) (vertical)\\n7. Cell (0,7) < Cell (1,7) (vertical)\\n8. Cell (1,1) < Cell (1,2) (horizontal)\\n9. Cell (1,1) > Cell (2,1) (vertical)\\n10. Cell (1,3) < Cell (2,3) (vertical)\\n11. Cell (1,4) > Cell (2,4) (vertical)\\n12. Cell (1,5) < Cell (2,5) (vertical)\\n13. Cell (1,6) < Cell (2,6) (vertical)\\n14. Cell (1,7) > Cell (2,7) (vertical)\\n15. Cell (2,2) < Cell (3,2) (vertical)\\n16. Cell (2,3) < Cell (3,3) (vertical)\\n17. Cell (2,5) > Cell (3,5) (vertical)\\n18. Cell (2,7) > Cell (3,7) (vertical)\\n19. Cell (3,0) < Cell (3,1) (horizontal)\\n20. Cell (3,2) > Cell (3,3) (horizontal)\\n21. Cell (3,5) < Cell (4,5) (vertical)\\n22. Cell (3,7) < Cell (4,7) (vertical)\\n23. Cell (4,0) > Cell (4,1) (horizontal)\\n24. Cell (4,0) < Cell (5,0) (vertical)\\n25. Cell (4,1) < Cell (5,1) (vertical)\\n26. Cell (4,2) < Cell (4,3) (horizontal)\\n27. Cell (4,4) > Cell (5,4) (vertical)\\n28. Cell (4,5) > Cell (5,5) (vertical)\\n29. Cell (5,0) < Cell (5,1) (horizontal)\\n30. Cell (5,0) > Cell (6,0) (vertical)\\n31. Cell (5,2) < Cell (5,3) (horizontal)\\n32. Cell (5,2) < Cell (6,2) (vertical)\\n33. Cell (5,4) > Cell (5,5) (horizontal)\\n34. Cell (5,4) < Cell (6,4) (vertical)\\n35. Cell (5,5) < Cell (5,6) (horizontal)\\n36. Cell (5,5) < Cell (6,5) (vertical)\\n37. Cell (6,0) < Cell (6,1) (horizontal)\\n38. Cell (6,0) < Cell (7,0) (vertical)\\n39. Cell (6,3) < Cell (7,3) (vertical)\\n40. Cell (6,5) > Cell (6,6) (horizontal)\\n41. Cell (6,6) < Cell (6,7) (horizontal)\\n42. Cell (7,1) > Cell (7,2) (horizontal)\\n43. Cell (7,2) < Cell (7,3) (horizontal)\\n44. Cell (7,6) > Cell (7,7) (horizontal)\\n\\n### Answer format:\\n\"answer\": [[row1], [row2], ..., [row8]]", "answer": "[[7, 8, 4, 5, 1, 6, 3, 2], [8, 4, 5, 1, 6, 3, 2, 7], [5, 1, 6, 3, 2, 7, 8, 4], [2, 7, 8, 4, 5, 1, 6, 3], [3, 2, 7, 8, 4, 5, 1, 6], [4, 5, 1, 6, 3, 2, 7, 8], [1, 6, 3, 2, 7, 8, 4, 5], [6, 3, 2, 7, 8, 4, 5, 1]]", "system": "{\"grid\": [[0, 0, 0, 0, 0, 6, 0, 2], [0, 4, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 5, 0, 0, 3], [0, 0, 7, 8, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [6, 0, 0, 7, 0, 0, 5, 0]], \"inequalities\": [{\"cell1\": [0, 0], \"cell2\": [1, 0], \"symbol\": \"<\"}, {\"cell1\": [0, 3], \"cell2\": [1, 3], \"symbol\": \">\"}, {\"cell1\": [0, 4], \"cell2\": [0, 5], \"symbol\": \"<\"}, {\"cell1\": [0, 4], \"cell2\": [1, 4], \"symbol\": \"<\"}, {\"cell1\": [0, 5], \"cell2\": [0, 6], \"symbol\": \">\"}, {\"cell1\": [0, 6], \"cell2\": [1, 6], \"symbol\": \">\"}, {\"cell1\": [0, 7], \"cell2\": [1, 7], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [1, 2], \"symbol\": \"<\"}, {\"cell1\": [1, 1], \"cell2\": [2, 1], \"symbol\": \">\"}, {\"cell1\": [1, 3], \"cell2\": [2, 3], \"symbol\": \"<\"}, {\"cell1\": [1, 4], \"cell2\": [2, 4], \"symbol\": \">\"}, {\"cell1\": [1, 5], \"cell2\": [2, 5], \"symbol\": \"<\"}, {\"cell1\": [1, 6], \"cell2\": [2, 6], \"symbol\": \"<\"}, {\"cell1\": [1, 7], \"cell2\": [2, 7], \"symbol\": \">\"}, {\"cell1\": [2, 2], \"cell2\": [3, 2], \"symbol\": \"<\"}, {\"cell1\": [2, 3], \"cell2\": [3, 3], \"symbol\": \"<\"}, {\"cell1\": [2, 5], \"cell2\": [3, 5], \"symbol\": \">\"}, {\"cell1\": [2, 7], \"cell2\": [3, 7], \"symbol\": \">\"}, {\"cell1\": [3, 0], \"cell2\": [3, 1], \"symbol\": \"<\"}, {\"cell1\": [3, 2], \"cell2\": [3, 3], \"symbol\": \">\"}, {\"cell1\": [3, 5], \"cell2\": [4, 5], \"symbol\": \"<\"}, {\"cell1\": [3, 7], \"cell2\": [4, 7], \"symbol\": \"<\"}, {\"cell1\": [4, 0], \"cell2\": [4, 1], \"symbol\": \">\"}, {\"cell1\": [4, 0], \"cell2\": [5, 0], \"symbol\": \"<\"}, {\"cell1\": [4, 1], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [4, 2], \"cell2\": [4, 3], \"symbol\": \"<\"}, {\"cell1\": [4, 4], \"cell2\": [5, 4], \"symbol\": \">\"}, {\"cell1\": [4, 5], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 0], \"cell2\": [5, 1], \"symbol\": \"<\"}, {\"cell1\": [5, 0], \"cell2\": [6, 0], \"symbol\": \">\"}, {\"cell1\": [5, 2], \"cell2\": [5, 3], \"symbol\": \"<\"}, {\"cell1\": [5, 2], \"cell2\": [6, 2], \"symbol\": \"<\"}, {\"cell1\": [5, 4], \"cell2\": [5, 5], \"symbol\": \">\"}, {\"cell1\": [5, 4], \"cell2\": [6, 4], \"symbol\": \"<\"}, {\"cell1\": [5, 5], \"cell2\": [5, 6], \"symbol\": \"<\"}, {\"cell1\": [5, 5], \"cell2\": [6, 5], \"symbol\": \"<\"}, {\"cell1\": [6, 0], \"cell2\": [6, 1], \"symbol\": \"<\"}, {\"cell1\": [6, 0], \"cell2\": [7, 0], \"symbol\": \"<\"}, {\"cell1\": [6, 3], \"cell2\": [7, 3], \"symbol\": \"<\"}, {\"cell1\": [6, 5], \"cell2\": [6, 6], \"symbol\": \">\"}, {\"cell1\": [6, 6], \"cell2\": [6, 7], \"symbol\": \"<\"}, {\"cell1\": [7, 1], \"cell2\": [7, 2], \"symbol\": \">\"}, {\"cell1\": [7, 2], \"cell2\": [7, 3], \"symbol\": \"<\"}, {\"cell1\": [7, 6], \"cell2\": [7, 7], \"symbol\": \">\"}], \"size\": 8}", "category": "futoshiki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'futoshiki_evaluator'}"}}
{"image": "images/000420.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [3]\\n2: [4]\\n3: [1, 4, 5]\\n4: [0, 2, 3]\\n5: [3]\\n\\nG2:\\n0: [2]\\n1: [2, 3, 4]\\n2: [0, 1, 5]\\n3: [1]\\n4: [1]\\n5: [2]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000421.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 5]\\n2: [0, 4]\\n3: [0, 4, 5]\\n4: [1, 2, 3]\\n5: [1, 3]\\n\\nG2:\\n0: [1, 5]\\n1: [0, 4]\\n2: [3, 5]\\n3: [2, 4]\\n4: [1, 3, 5]\\n5: [0, 2, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000422.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [3]\\n2: [0, 5]\\n3: [1, 5]\\n4: [0]\\n5: [2, 3]\\n\\nG2:\\n0: [1]\\n1: [0, 5]\\n2: [3]\\n3: [2, 4]\\n4: [3, 5]\\n5: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000423.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 5]\\n2: [0, 5]\\n3: [0, 4]\\n4: [1, 3]\\n5: [1, 2]\\n\\nG2:\\n0: [4]\\n1: [4]\\n2: [3, 4, 5]\\n3: [2]\\n4: [0, 1, 2]\\n5: [2]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000424.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [3, 4, 5]\\n1: [4]\\n2: [3]\\n3: [0, 2]\\n4: [0, 1]\\n5: [0]\\n\\nG2:\\n0: [1, 2]\\n1: [0, 3, 5]\\n2: [0]\\n3: [1]\\n4: [5]\\n5: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000425.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [4]\\n2: [5]\\n3: [4, 5]\\n4: [0, 1, 3]\\n5: [2, 3]\\n\\nG2:\\n0: [2]\\n1: [2, 3, 5]\\n2: [0, 1]\\n3: [1]\\n4: [5]\\n5: [1, 4]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000426.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 3, 4]\\n2: [3, 6]\\n3: [1, 2, 5]\\n4: [1]\\n5: [0, 3, 6]\\n6: [2, 5]\\n\\nG2:\\n0: [4]\\n1: [2, 3]\\n2: [1, 4, 5]\\n3: [1, 5]\\n4: [0, 2, 6]\\n5: [2, 3, 6]\\n6: [4, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000427.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [2, 6]\\n2: [0, 1, 3]\\n3: [2, 4, 6]\\n4: [0, 3]\\n5: [6]\\n6: [1, 3, 5]\\n\\nG2:\\n0: [3]\\n1: [5, 6]\\n2: [3, 4]\\n3: [0, 2, 5]\\n4: [2, 5, 6]\\n5: [1, 3, 4]\\n6: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000428.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 6]\\n1: [4, 5]\\n2: [0, 3]\\n3: [2, 4]\\n4: [1, 3]\\n5: [1, 6]\\n6: [0, 5]\\n\\nG2:\\n0: [3, 5]\\n1: [2, 3]\\n2: [1, 6]\\n3: [0, 1]\\n4: [5, 6]\\n5: [0, 4]\\n6: [2, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000429.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 2, 3]\\n2: [1, 6]\\n3: [1, 5, 6]\\n4: [6]\\n5: [0, 3]\\n6: [2, 3, 4]\\n\\nG2:\\n0: [5, 6]\\n1: [4]\\n2: [3, 6]\\n3: [2]\\n4: [1, 6]\\n5: [0]\\n6: [0, 2, 4]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000430.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 3]\\n2: [4]\\n3: [1, 6]\\n4: [2, 5]\\n5: [4, 6]\\n6: [3, 5]\\n\\nG2:\\n0: [2, 3, 4]\\n1: [2, 6]\\n2: [0, 1, 5]\\n3: [0]\\n4: [0]\\n5: [2]\\n6: [1]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000431.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2]\\n1: [2]\\n2: [0, 1, 3, 4, 5, 6]\\n3: [2]\\n4: [2]\\n5: [2]\\n6: [2]\\n\\nG2:\\n0: [4]\\n1: [4]\\n2: [4]\\n3: [4]\\n4: [0, 1, 2, 3, 5, 6]\\n5: [4]\\n6: [4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000432.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 7]\\n2: [6, 7]\\n3: [4, 6]\\n4: [3, 5]\\n5: [0, 4]\\n6: [2, 3]\\n7: [1, 2]\\n\\nG2:\\n0: [4, 7]\\n1: [3, 6]\\n2: [5, 7]\\n3: [1, 4]\\n4: [0, 3]\\n5: [2, 6]\\n6: [1, 5]\\n7: [0, 2]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000433.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [5, 7]\\n1: [2, 4, 6]\\n2: [1, 3]\\n3: [2, 4]\\n4: [1, 3, 7]\\n5: [0, 6]\\n6: [1, 5, 7]\\n7: [0, 4, 6]\\n\\nG2:\\n0: [1, 4, 5]\\n1: [0, 7]\\n2: [4, 6]\\n3: [4, 5, 6]\\n4: [0, 2, 3]\\n5: [0, 3, 7]\\n6: [2, 3]\\n7: [1, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000434.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [5, 6, 7]\\n2: [0, 6]\\n3: [5, 7]\\n4: [0, 6, 7]\\n5: [1, 3]\\n6: [1, 2, 4]\\n7: [1, 3, 4]\\n\\nG2:\\n0: [3, 4, 5]\\n1: [5, 6]\\n2: [3, 4]\\n3: [0, 2]\\n4: [0, 2, 7]\\n5: [0, 1, 7]\\n6: [1, 7]\\n7: [4, 5, 6]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000435.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [3, 7]\\n1: [3]\\n2: [4, 6]\\n3: [0, 1, 4]\\n4: [2, 3]\\n5: [6]\\n6: [2, 5]\\n7: [0]\\n\\nG2:\\n0: [1, 2, 3]\\n1: [0, 6]\\n2: [0, 5]\\n3: [0]\\n4: [7]\\n5: [2]\\n6: [1, 7]\\n7: [4, 6]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000436.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 6]\\n2: [0, 7]\\n3: [0, 6, 7]\\n4: [1, 5]\\n5: [4, 6, 7]\\n6: [1, 3, 5]\\n7: [2, 3, 5]\\n\\nG2:\\n0: [6, 7]\\n1: [2, 3, 5]\\n2: [1, 4, 7]\\n3: [1, 4]\\n4: [2, 3]\\n5: [1, 6, 7]\\n6: [0, 5]\\n7: [0, 2, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000437.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2]\\n2: [1, 5, 7]\\n3: [4, 7]\\n4: [3, 6]\\n5: [2]\\n6: [4]\\n7: [2, 3]\\n\\nG2:\\n0: [1, 2, 5]\\n1: [0]\\n2: [0, 4, 7]\\n3: [5]\\n4: [2]\\n5: [0, 3, 6]\\n6: [5]\\n7: [2]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000438.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [2, 6]\\n2: [1, 4]\\n3: [5]\\n4: [0, 2]\\n5: [3, 7]\\n6: [1, 8]\\n7: [5, 8]\\n8: [6, 7]\\n\\nG2:\\n0: [5]\\n1: [3]\\n2: [8]\\n3: [1, 4, 6, 7]\\n4: [3, 8]\\n5: [0, 8]\\n6: [3]\\n7: [3]\\n8: [2, 4, 5]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000439.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n\\nG2:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000440.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 7]\\n2: [3, 4]\\n3: [2, 8]\\n4: [2, 5]\\n5: [0, 4]\\n6: [7, 8]\\n7: [1, 6]\\n8: [3, 6]\\n\\nG2:\\n0: [2, 7]\\n1: [4, 8]\\n2: [0, 6]\\n3: [5, 6]\\n4: [1, 7]\\n5: [3, 8]\\n6: [2, 3]\\n7: [0, 4]\\n8: [1, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000441.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [7]\\n1: [7]\\n2: [7]\\n3: [7]\\n4: [7]\\n5: [7]\\n6: [7]\\n7: [0, 1, 2, 3, 4, 5, 6, 8]\\n8: [7]\\n\\nG2:\\n0: [1, 2, 3, 4, 5, 6, 7, 8]\\n1: [0]\\n2: [0]\\n3: [0]\\n4: [0]\\n5: [0]\\n6: [0]\\n7: [0]\\n8: [0]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000442.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n\\nG2:\\n0: [5]\\n1: [5]\\n2: [5]\\n3: [5]\\n4: [5]\\n5: [0, 1, 2, 3, 4, 6, 7, 8]\\n6: [5]\\n7: [5]\\n8: [5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000443.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [6]\\n1: [6]\\n2: [6]\\n3: [6]\\n4: [6]\\n5: [6]\\n6: [0, 1, 2, 3, 4, 5, 7, 8]\\n7: [6]\\n8: [6]\\n\\nG2:\\n0: [5, 7]\\n1: [4, 6]\\n2: [3, 6]\\n3: [2]\\n4: [1, 5]\\n5: [0, 4]\\n6: [1, 2]\\n7: [0, 8]\\n8: [7]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000444.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4, 8]\\n1: [4]\\n2: [4]\\n3: [4]\\n4: [0, 1, 2, 3, 5, 6, 7, 8, 9]\\n5: [4]\\n6: [4]\\n7: [4]\\n8: [0, 4]\\n9: [4]\\n\\nG2:\\n0: [7]\\n1: [3, 7]\\n2: [7]\\n3: [1, 7]\\n4: [7]\\n5: [7]\\n6: [7]\\n7: [0, 1, 2, 3, 4, 5, 6, 8, 9]\\n8: [7]\\n9: [7]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000445.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [2, 6, 7]\\n2: [1, 4, 7]\\n3: [4]\\n4: [0, 2, 3, 5]\\n5: [4]\\n6: [1]\\n7: [1, 2, 8, 9]\\n8: [7]\\n9: [7]\\n\\nG2:\\n0: [1, 2, 5]\\n1: [0, 2, 4, 6]\\n2: [0, 1, 3]\\n3: [2]\\n4: [1]\\n5: [0, 7, 8, 9]\\n6: [1]\\n7: [5]\\n8: [5]\\n9: [5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000446.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4, 8]\\n1: [3, 4, 7, 8]\\n2: [5, 7]\\n3: [1, 6, 9]\\n4: [0, 1, 6]\\n5: [2, 9]\\n6: [3, 4]\\n7: [1, 2, 9]\\n8: [0, 1]\\n9: [3, 5, 7]\\n\\nG2:\\n0: [1, 3, 9]\\n1: [0, 2, 4, 7]\\n2: [1, 8]\\n3: [0, 5, 7]\\n4: [1, 6, 8]\\n5: [3, 9]\\n6: [4, 7]\\n7: [1, 3, 6]\\n8: [2, 4]\\n9: [0, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000447.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 7, 8]\\n1: [4, 7]\\n2: [0, 4, 5]\\n3: [8, 9]\\n4: [1, 2, 8]\\n5: [2, 6]\\n6: [5, 9]\\n7: [0, 1]\\n8: [0, 3, 4]\\n9: [3, 6]\\n\\nG2:\\n0: [1, 3, 8]\\n1: [0, 2]\\n2: [1, 6]\\n3: [0, 6, 7]\\n4: [5, 8]\\n5: [4, 9]\\n6: [2, 3, 8]\\n7: [3, 9]\\n8: [0, 4, 6]\\n9: [5, 7]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000448.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 5, 7]\\n1: [5, 6, 9]\\n2: [0, 3, 8]\\n3: [2, 4, 5]\\n4: [3, 9]\\n5: [0, 1, 3]\\n6: [1]\\n7: [0, 8, 9]\\n8: [2, 7]\\n9: [1, 4, 7]\\n\\nG2:\\n0: [1, 7]\\n1: [0, 6]\\n2: [5, 6]\\n3: [4, 5]\\n4: [3, 5, 9]\\n5: [2, 3, 4]\\n6: [1, 2]\\n7: [0, 8]\\n8: [7, 9]\\n9: [4, 8]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000449.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [5]\\n1: [6, 9]\\n2: [6, 8]\\n3: [5, 8, 9]\\n4: [5, 6]\\n5: [0, 3, 4]\\n6: [1, 2, 4, 7]\\n7: [6]\\n8: [2, 3]\\n9: [1, 3]\\n\\nG2:\\n0: [5, 6, 8]\\n1: [2, 9]\\n2: [1, 4, 6]\\n3: [5]\\n4: [2, 7]\\n5: [0, 3, 7, 9]\\n6: [0, 2, 7]\\n7: [4, 5, 6]\\n8: [0]\\n9: [1, 5]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000450.png", "question": "Here is a bar chart [4, 13, 3, 19, 12, 17, 14, 17, 2] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "6", "system": "{'citations': [4, 13, 3, 19, 12, 17, 14, 17, 2]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000451.png", "question": "Here is a bar chart [2, 12, 14, 7, 5, 10] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "5", "system": "{'citations': [2, 12, 14, 7, 5, 10]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000452.png", "question": "Here is a bar chart [12, 3, 13, 1, 10, 19, 12] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "5", "system": "{'citations': [12, 3, 13, 1, 10, 19, 12]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000453.png", "question": "Here is a bar chart [8, 14, 0, 5, 18, 4, 4, 0, 5] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "5", "system": "{'citations': [8, 14, 0, 5, 18, 4, 4, 0, 5]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000454.png", "question": "Here is a bar chart [16, 1, 2, 3, 5, 1] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "3", "system": "{'citations': [16, 1, 2, 3, 5, 1]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000455.png", "question": "Here is a bar chart [7, 1, 2, 7, 0, 16] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "3", "system": "{'citations': [7, 1, 2, 7, 0, 16]}", "category": "HIndex", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000456.png", "question": "Here is a bar chart [20, 0, 27, 3, 0, 2, 0, 2, 1, 0, 0, 0, 2, 1, 2, 0] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "3", "system": "{'citations': [20, 0, 27, 3, 0, 2, 0, 2, 1, 0, 0, 0, 2, 1, 2, 0]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000457.png", "question": "Here is a bar chart [2, 36, 1, 1, 0, 1, 0, 8, 40, 1, 2, 1] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "3", "system": "{'citations': [2, 36, 1, 1, 0, 1, 0, 8, 40, 1, 2, 1]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000458.png", "question": "Here is a bar chart [22, 4, 0, 9, 2, 1, 3, 4, 5, 1, 14, 1, 2, 5, 10, 10, 0, 6, 1, 3] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "6", "system": "{'citations': [22, 4, 0, 9, 2, 1, 3, 4, 5, 1, 14, 1, 2, 5, 10, 10, 0, 6, 1, 3]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000459.png", "question": "Here is a bar chart [0, 2, 8, 39, 0, 2, 24, 21, 37, 4] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "5", "system": "{'citations': [0, 2, 8, 39, 0, 2, 24, 21, 37, 4]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000460.png", "question": "Here is a bar chart [2, 25, 9, 2, 1, 3, 0, 22, 8, 3, 3, 2, 2, 0, 1] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "4", "system": "{'citations': [2, 25, 9, 2, 1, 3, 0, 22, 8, 3, 3, 2, 2, 0, 1]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000461.png", "question": "Here is a bar chart [4, 0, 3, 4, 2, 26, 34, 2, 4, 3, 21, 4, 4, 3, 31, 4, 38, 2, 2] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "5", "system": "{'citations': [4, 0, 3, 4, 2, 26, 34, 2, 4, 3, 21, 4, 4, 3, 31, 4, 38, 2, 2]}", "category": "HIndex", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000462.png", "question": "Here is a bar chart [50, 39, 60, 60, 12, 47, 48, 36, 53, 6, 47, 4, 48, 31, 57, 58, 51, 55, 9, 44, 3, 4, 46, 23, 22] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "19", "system": "{'citations': [50, 39, 60, 60, 12, 47, 48, 36, 53, 6, 47, 4, 48, 31, 57, 58, 51, 55, 9, 44, 3, 4, 46, 23, 22]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000463.png", "question": "Here is a bar chart [40, 10, 50, 32, 22, 42, 6, 36, 5, 56, 56, 30, 24, 40, 34, 53, 45, 54, 27, 39, 35, 58, 14, 51, 55, 2, 39, 34, 37, 49] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "24", "system": "{'citations': [40, 10, 50, 32, 22, 42, 6, 36, 5, 56, 56, 30, 24, 40, 34, 53, 45, 54, 27, 39, 35, 58, 14, 51, 55, 2, 39, 34, 37, 49]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000464.png", "question": "Here is a bar chart [31, 34, 13, 44, 51, 49, 44, 47, 50, 45, 16, 16, 33, 5, 2, 24, 60, 58, 28, 53, 46, 24, 26, 32] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "19", "system": "{'citations': [31, 34, 13, 44, 51, 49, 44, 47, 50, 45, 16, 16, 33, 5, 2, 24, 60, 58, 28, 53, 46, 24, 26, 32]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000465.png", "question": "Here is a bar chart [34, 1, 16, 1, 21, 29, 42, 59, 2, 9, 14, 42, 11, 10, 60, 37, 55, 44, 33, 51, 24, 55, 49] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "16", "system": "{'citations': [34, 1, 16, 1, 21, 29, 42, 59, 2, 9, 14, 42, 11, 10, 60, 37, 55, 44, 33, 51, 24, 55, 49]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000466.png", "question": "Here is a bar chart [34, 48, 52, 55, 55, 52, 35, 34, 52, 15, 30, 1, 46, 44, 23, 19, 51, 7, 28, 59, 51, 43, 42, 18] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "19", "system": "{'citations': [34, 48, 52, 55, 55, 52, 35, 34, 52, 15, 30, 1, 46, 44, 23, 19, 51, 7, 28, 59, 51, 43, 42, 18]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000467.png", "question": "Here is a bar chart [56, 7, 56, 42, 55, 35, 8, 50, 3, 49, 46, 13, 42, 57, 35, 26, 53, 53, 55, 27, 21, 50, 59, 54, 2] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "20", "system": "{'citations': [56, 7, 56, 42, 55, 35, 8, 50, 3, 49, 46, 13, 42, 57, 35, 26, 53, 53, 55, 27, 21, 50, 59, 54, 2]}", "category": "HIndex", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000468.png", "question": "Here is a bar chart [7, 68, 17, 24, 63, 20, 40, 34, 23, 5, 60, 31, 70, 72, 55, 28, 72, 43, 20, 43, 66, 50, 43, 79, 71, 57, 63, 35, 43, 28, 66, 38, 66, 66, 36, 23] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "28", "system": "{'citations': [7, 68, 17, 24, 63, 20, 40, 34, 23, 5, 60, 31, 70, 72, 55, 28, 72, 43, 20, 43, 66, 50, 43, 79, 71, 57, 63, 35, 43, 28, 66, 38, 66, 66, 36, 23]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000469.png", "question": "Here is a bar chart [47, 8, 17, 25, 60, 34, 65, 42, 47, 10, 59, 37, 53, 30, 68, 79, 58, 57, 65, 62, 41, 61, 66, 75, 32, 80, 54, 74, 76, 3, 70, 19] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "26", "system": "{'citations': [47, 8, 17, 25, 60, 34, 65, 42, 47, 10, 59, 37, 53, 30, 68, 79, 58, 57, 65, 62, 41, 61, 66, 75, 32, 80, 54, 74, 76, 3, 70, 19]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000470.png", "question": "Here is a bar chart [35, 42, 79, 74, 71, 2, 53, 45, 8, 48, 73, 43, 49, 9, 60, 58, 56, 45, 31, 22, 57, 24, 69, 62, 60, 48, 68, 28, 9, 12, 65, 42, 7, 39, 42, 44, 55, 53] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "29", "system": "{'citations': [35, 42, 79, 74, 71, 2, 53, 45, 8, 48, 73, 43, 49, 9, 60, 58, 56, 45, 31, 22, 57, 24, 69, 62, 60, 48, 68, 28, 9, 12, 65, 42, 7, 39, 42, 44, 55, 53]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000471.png", "question": "Here is a bar chart [50, 62, 78, 10, 22, 64, 17, 47, 72, 22, 39, 8, 3, 34, 38, 14, 16, 43, 57, 17, 5, 80, 15, 11, 8, 74, 15, 2, 50, 7, 29, 12, 60, 68, 66, 17, 15] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "20", "system": "{'citations': [50, 62, 78, 10, 22, 64, 17, 47, 72, 22, 39, 8, 3, 34, 38, 14, 16, 43, 57, 17, 5, 80, 15, 11, 8, 74, 15, 2, 50, 7, 29, 12, 60, 68, 66, 17, 15]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000472.png", "question": "Here is a bar chart [20, 38, 77, 5, 41, 26, 58, 42, 34, 43, 13, 73, 1, 19, 50, 37, 61, 4, 77, 25, 18, 5, 71, 67, 20, 60, 75, 76, 64, 47, 30, 5, 53, 57, 7, 62, 55, 19, 72] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "26", "system": "{'citations': [20, 38, 77, 5, 41, 26, 58, 42, 34, 43, 13, 73, 1, 19, 50, 37, 61, 4, 77, 25, 18, 5, 71, 67, 20, 60, 75, 76, 64, 47, 30, 5, 53, 57, 7, 62, 55, 19, 72]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000473.png", "question": "Here is a bar chart [61, 60, 77, 31, 15, 78, 41, 72, 45, 49, 53, 68, 78, 46, 12, 32, 80, 57, 43, 10, 5, 78, 65, 74, 68, 37, 37, 72, 59, 42, 79, 63, 66, 34, 64] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "31", "system": "{'citations': [61, 60, 77, 31, 15, 78, 41, 72, 45, 49, 53, 68, 78, 46, 12, 32, 80, 57, 43, 10, 5, 78, 65, 74, 68, 37, 37, 72, 59, 42, 79, 63, 66, 34, 64]}", "category": "HIndex", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000474.png", "question": "Here is a bar chart [83, 58, 46, 96, 100, 8, 13, 25, 27, 13, 60, 81, 63, 67, 8, 80, 59, 87, 87, 70, 48, 94, 41, 40, 3, 68, 70, 74, 42, 21, 19, 14, 84, 64, 73, 7, 15, 38, 11, 81, 75, 96, 63, 7, 57, 9, 25, 5, 85, 70, 31, 23, 88, 97, 94, 72, 46, 88, 47] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "39", "system": "{'citations': [83, 58, 46, 96, 100, 8, 13, 25, 27, 13, 60, 81, 63, 67, 8, 80, 59, 87, 87, 70, 48, 94, 41, 40, 3, 68, 70, 74, 42, 21, 19, 14, 84, 64, 73, 7, 15, 38, 11, 81, 75, 96, 63, 7, 57, 9, 25, 5, 85, 70, 31, 23, 88, 97, 94, 72, 46, 88, 47]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000475.png", "question": "Here is a bar chart [55, 39, 53, 51, 100, 36, 80, 26, 94, 89, 98, 63, 55, 24, 47, 78, 25, 91, 76, 49, 69, 51, 45, 35, 64, 80, 11, 5, 42, 64, 4, 34, 69, 68, 50, 90, 30, 93, 76, 52, 2, 100, 18, 53, 37, 51, 96, 99, 89, 97, 85] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "38", "system": "{'citations': [55, 39, 53, 51, 100, 36, 80, 26, 94, 89, 98, 63, 55, 24, 47, 78, 25, 91, 76, 49, 69, 51, 45, 35, 64, 80, 11, 5, 42, 64, 4, 34, 69, 68, 50, 90, 30, 93, 76, 52, 2, 100, 18, 53, 37, 51, 96, 99, 89, 97, 85]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000476.png", "question": "Here is a bar chart [55, 22, 77, 16, 100, 41, 15, 78, 29, 34, 15, 51, 50, 15, 97, 100, 11, 16, 80, 63, 78, 78, 74, 46, 87, 93, 57, 71, 96, 78, 67, 74, 24, 56, 16, 38, 2, 82, 49, 47, 86, 35, 83, 72, 77, 40, 97, 70, 79, 25, 20, 2, 66, 70, 75, 90, 8, 79, 33, 14, 62, 20, 54, 2, 52] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "41", "system": "{'citations': [55, 22, 77, 16, 100, 41, 15, 78, 29, 34, 15, 51, 50, 15, 97, 100, 11, 16, 80, 63, 78, 78, 74, 46, 87, 93, 57, 71, 96, 78, 67, 74, 24, 56, 16, 38, 2, 82, 49, 47, 86, 35, 83, 72, 77, 40, 97, 70, 79, 25, 20, 2, 66, 70, 75, 90, 8, 79, 33, 14, 62, 20, 54, 2, 52]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000477.png", "question": "Here is a bar chart [52, 76, 8, 78, 99, 47, 5, 7, 99, 45, 82, 18, 27, 26, 73, 82, 42, 91, 54, 79, 97, 80, 6, 51, 29, 44, 94, 62, 63, 91, 42, 51, 92, 7, 73, 96, 93, 42, 82, 89, 75, 9, 94, 98, 6, 26, 84, 43, 48, 77, 39, 74, 14, 3, 52, 7, 75, 38, 98, 89, 86, 59, 91, 86, 97, 57, 33, 90] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "45", "system": "{'citations': [52, 76, 8, 78, 99, 47, 5, 7, 99, 45, 82, 18, 27, 26, 73, 82, 42, 91, 54, 79, 97, 80, 6, 51, 29, 44, 94, 62, 63, 91, 42, 51, 92, 7, 73, 96, 93, 42, 82, 89, 75, 9, 94, 98, 6, 26, 84, 43, 48, 77, 39, 74, 14, 3, 52, 7, 75, 38, 98, 89, 86, 59, 91, 86, 97, 57, 33, 90]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000478.png", "question": "Here is a bar chart [65, 90, 52, 11, 91, 54, 54, 77, 99, 53, 100, 57, 81, 15, 96, 96, 33, 96, 75, 100, 76, 79, 3, 91, 89, 91, 16, 3, 56, 97, 9, 89, 87, 73, 96, 82, 99, 96, 93, 50, 90, 65, 82, 23, 29, 45, 90, 90, 5, 10, 50, 74, 70, 89, 17, 82, 88, 86] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "45", "system": "{'citations': [65, 90, 52, 11, 91, 54, 54, 77, 99, 53, 100, 57, 81, 15, 96, 96, 33, 96, 75, 100, 76, 79, 3, 91, 89, 91, 16, 3, 56, 97, 9, 89, 87, 73, 96, 82, 99, 96, 93, 50, 90, 65, 82, 23, 29, 45, 90, 90, 5, 10, 50, 74, 70, 89, 17, 82, 88, 86]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000479.png", "question": "Here is a bar chart [75, 79, 51, 10, 71, 62, 13, 66, 94, 29, 98, 83, 51, 67, 76, 66, 92, 98, 10, 3, 40, 88, 81, 28, 4, 95, 79, 18, 51, 97, 80, 5, 29, 17, 52, 37, 38, 70, 95, 3, 95, 35, 96, 86, 73, 88, 16, 50, 82] showing how many times each of a researcher's papers was cited. Determine the researcher's h-index: the largest value h such that at least h papers have at least h citations each.", "answer": "35", "system": "{'citations': [75, 79, 51, 10, 71, 62, 13, 66, 94, 29, 98, 83, 51, 67, 76, 66, 92, 98, 10, 3, 40, 88, 81, 28, 4, 95, 79, 18, 51, 97, 80, 5, 29, 17, 52, 37, 38, 70, 95, 3, 95, 35, 96, 86, 73, 88, 16, 50, 82]}", "category": "HIndex", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000480.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 5]\\n2: [1, 3, 4]\\n3: [0, 2, 4]\\n4: [2, 3, 5]\\n5: [1, 4]\\n", "answer": "[0, 1, 5, 4, 2, 3]", "system": "{'0': [1, 3], '1': [0, 2, 5], '2': [1, 3, 4], '3': [0, 2, 4], '4': [2, 3, 5], '5': [1, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000481.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 3]\\n2: [1, 4, 5]\\n3: [0, 1, 4]\\n4: [2, 3, 5]\\n5: [2, 4]\\n", "answer": "[0, 1, 2, 5, 4, 3]", "system": "{'0': [1, 3], '1': [0, 2, 3], '2': [1, 4, 5], '3': [0, 1, 4], '4': [2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000482.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2]\\n2: [1, 3, 4, 5]\\n3: [0, 2, 4]\\n4: [2, 3, 5]\\n5: [2, 4]\\n", "answer": "[0, 1, 2, 5, 4, 3]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 3, 4, 5], '3': [0, 2, 4], '4': [2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000483.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 3]\\n2: [1, 4, 5]\\n3: [0, 1, 4]\\n4: [2, 3, 5]\\n5: [2, 4]\\n", "answer": "[0, 1, 2, 5, 4, 3]", "system": "{'0': [1, 3], '1': [0, 2, 3], '2': [1, 4, 5], '3': [0, 1, 4], '4': [2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000484.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 4]\\n2: [1, 4, 5]\\n3: [0, 4]\\n4: [1, 2, 3, 5]\\n5: [2, 4]\\n", "answer": "[0, 1, 2, 5, 4, 3]", "system": "{'0': [1, 3], '1': [0, 2, 4], '2': [1, 4, 5], '3': [0, 4], '4': [1, 2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000485.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 3]\\n2: [1, 4, 5]\\n3: [0, 1, 4]\\n4: [2, 3, 5]\\n5: [2, 4]\\n", "answer": "[0, 1, 2, 5, 4, 3]", "system": "{'0': [1, 3], '1': [0, 2, 3], '2': [1, 4, 5], '3': [0, 1, 4], '4': [2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000486.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2]\\n2: [1, 3, 4, 5]\\n3: [0, 2, 4, 6]\\n4: [2, 3, 5, 6, 8]\\n5: [2, 4, 7, 8]\\n6: [3, 4, 7]\\n7: [5, 6]\\n8: [4, 5]\\n", "answer": "[0, 1, 2, 4, 8, 5, 7, 6, 3]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 3, 4, 5], '3': [0, 2, 4, 6], '4': [2, 3, 5, 6, 8], '5': [2, 4, 7, 8], '6': [3, 4, 7], '7': [5, 6], '8': [4, 5]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000487.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2]\\n2: [1, 4]\\n3: [0, 4, 6, 7, 8]\\n4: [2, 3, 6, 7]\\n5: [7, 8]\\n6: [3, 4, 7]\\n7: [3, 4, 5, 6]\\n8: [3, 5]\\n", "answer": "[0, 1, 2, 4, 6, 7, 5, 8, 3]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 4], '3': [0, 4, 6, 7, 8], '4': [2, 3, 6, 7], '5': [7, 8], '6': [3, 4, 7], '7': [3, 4, 5, 6], '8': [3, 5]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000488.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2]\\n2: [1, 4]\\n3: [0, 4, 6]\\n4: [2, 3, 8]\\n5: [6, 7, 8]\\n6: [3, 5, 7]\\n7: [5, 6]\\n8: [4, 5]\\n", "answer": "[0, 1, 2, 4, 8, 5, 7, 6, 3]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 4], '3': [0, 4, 6], '4': [2, 3, 8], '5': [6, 7, 8], '6': [3, 5, 7], '7': [5, 6], '8': [4, 5]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000489.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 5, 6]\\n2: [1, 4]\\n3: [0, 4, 6]\\n4: [2, 3, 6, 8]\\n5: [1, 7, 8]\\n6: [1, 3, 4, 7]\\n7: [5, 6]\\n8: [4, 5]\\n", "answer": "[0, 1, 2, 4, 8, 5, 7, 6, 3]", "system": "{'0': [1, 3], '1': [0, 2, 5, 6], '2': [1, 4], '3': [0, 4, 6], '4': [2, 3, 6, 8], '5': [1, 7, 8], '6': [1, 3, 4, 7], '7': [5, 6], '8': [4, 5]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000490.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2, 4]\\n2: [1, 3, 4]\\n3: [0, 2, 4, 6]\\n4: [1, 2, 3, 5, 7]\\n5: [4, 7, 8]\\n6: [3, 7]\\n7: [4, 5, 6, 8]\\n8: [5, 7]\\n", "answer": "[0, 1, 2, 4, 5, 8, 7, 6, 3]", "system": "{'0': [1, 3], '1': [0, 2, 4], '2': [1, 3, 4], '3': [0, 2, 4, 6], '4': [1, 2, 3, 5, 7], '5': [4, 7, 8], '6': [3, 7], '7': [4, 5, 6, 8], '8': [5, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000491.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 3]\\n1: [0, 2]\\n2: [1, 4, 7]\\n3: [0, 4, 6]\\n4: [2, 3, 6, 8]\\n5: [7, 8]\\n6: [3, 4, 7]\\n7: [2, 5, 6]\\n8: [4, 5]\\n", "answer": "[0, 1, 2, 4, 8, 5, 7, 6, 3]", "system": "{'0': [1, 3], '1': [0, 2], '2': [1, 4, 7], '3': [0, 4, 6], '4': [2, 3, 6, 8], '5': [7, 8], '6': [3, 4, 7], '7': [2, 5, 6], '8': [4, 5]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000492.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 7, 9, 11]\\n1: [0, 2]\\n2: [1, 3, 7]\\n3: [2, 6, 7, 8, 10]\\n4: [5, 8, 10, 11]\\n5: [4, 6, 9]\\n6: [3, 5, 9, 10]\\n7: [0, 2, 3, 10, 11]\\n8: [3, 4, 9]\\n9: [0, 5, 6, 8, 10]\\n10: [3, 4, 6, 7, 9]\\n11: [0, 4, 7]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 10, 7, 11]", "system": "{'0': [1, 7, 9, 11], '1': [0, 2], '2': [1, 3, 7], '3': [2, 6, 7, 8, 10], '4': [5, 8, 10, 11], '5': [4, 6, 9], '6': [3, 5, 9, 10], '7': [0, 2, 3, 10, 11], '8': [3, 4, 9], '9': [0, 5, 6, 8, 10], '10': [3, 4, 6, 7, 9], '11': [0, 4, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000493.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 11]\\n1: [0, 2]\\n2: [1, 3]\\n3: [2, 6, 7]\\n4: [5, 8]\\n5: [4, 6, 9]\\n6: [3, 5, 9]\\n7: [3, 9, 10, 11]\\n8: [4, 9]\\n9: [5, 6, 7, 8, 10]\\n10: [7, 9]\\n11: [0, 7]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 10, 7, 11]", "system": "{'0': [1, 11], '1': [0, 2], '2': [1, 3], '3': [2, 6, 7], '4': [5, 8], '5': [4, 6, 9], '6': [3, 5, 9], '7': [3, 9, 10, 11], '8': [4, 9], '9': [5, 6, 7, 8, 10], '10': [7, 9], '11': [0, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000494.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 7, 11]\\n1: [0, 2, 10]\\n2: [1, 3, 7]\\n3: [2, 5, 6, 10]\\n4: [5, 8, 11]\\n5: [3, 4, 6, 8]\\n6: [3, 5]\\n7: [0, 2, 9, 10, 11]\\n8: [4, 5, 9]\\n9: [7, 8, 10]\\n10: [1, 3, 7, 9]\\n11: [0, 4, 7]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 10, 7, 11]", "system": "{'0': [1, 7, 11], '1': [0, 2, 10], '2': [1, 3, 7], '3': [2, 5, 6, 10], '4': [5, 8, 11], '5': [3, 4, 6, 8], '6': [3, 5], '7': [0, 2, 9, 10, 11], '8': [4, 5, 9], '9': [7, 8, 10], '10': [1, 3, 7, 9], '11': [0, 4, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000495.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4]\\n1: [0, 2, 7, 10]\\n2: [1, 3, 5, 9, 11]\\n3: [2, 4, 6]\\n4: [0, 3, 5, 8, 11]\\n5: [2, 4, 6]\\n6: [3, 5]\\n7: [1, 10, 11]\\n8: [4, 9]\\n9: [2, 8, 10]\\n10: [1, 7, 9]\\n11: [2, 4, 7]\\n", "answer": "No", "system": "{'0': [1, 4], '1': [0, 2, 7, 10], '2': [1, 3, 5, 9, 11], '3': [2, 4, 6], '4': [0, 3, 5, 8, 11], '5': [2, 4, 6], '6': [3, 5], '7': [1, 10, 11], '8': [4, 9], '9': [2, 8, 10], '10': [1, 7, 9], '11': [2, 4, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000496.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 7, 11]\\n1: [0, 2, 5, 8]\\n2: [1, 3, 4, 9, 11]\\n3: [2, 6, 7]\\n4: [2, 5, 8]\\n5: [1, 4, 6]\\n6: [3, 5]\\n7: [0, 3, 10, 11]\\n8: [1, 4, 9]\\n9: [2, 8, 10]\\n10: [7, 9]\\n11: [0, 2, 7]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 10, 7, 11]", "system": "{'0': [1, 7, 11], '1': [0, 2, 5, 8], '2': [1, 3, 4, 9, 11], '3': [2, 6, 7], '4': [2, 5, 8], '5': [1, 4, 6], '6': [3, 5], '7': [0, 3, 10, 11], '8': [1, 4, 9], '9': [2, 8, 10], '10': [7, 9], '11': [0, 2, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000497.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4, 5, 7]\\n1: [0, 2, 7]\\n2: [1, 3]\\n3: [2, 6, 8, 10]\\n4: [0, 5, 8, 10, 11]\\n5: [0, 4, 6]\\n6: [3, 5, 9]\\n7: [0, 1, 8, 10, 11]\\n8: [3, 4, 7, 9]\\n9: [6, 8, 10]\\n10: [3, 4, 7, 9]\\n11: [4, 7]\\n", "answer": "[0, 1, 2, 3, 8, 4, 11, 7, 10, 9, 6, 5]", "system": "{'0': [1, 4, 5, 7], '1': [0, 2, 7], '2': [1, 3], '3': [2, 6, 8, 10], '4': [0, 5, 8, 10, 11], '5': [0, 4, 6], '6': [3, 5, 9], '7': [0, 1, 8, 10, 11], '8': [3, 4, 7, 9], '9': [6, 8, 10], '10': [3, 4, 7, 9], '11': [4, 7]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000498.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4, 11]\\n1: [0, 2]\\n2: [1, 3, 7]\\n3: [2, 6, 10]\\n4: [0, 5, 8, 13]\\n5: [4, 6, 8, 10, 11]\\n6: [3, 5, 7, 10, 11]\\n7: [2, 6, 10, 11]\\n8: [4, 5, 9, 12, 13]\\n9: [8, 10, 13]\\n10: [3, 5, 6, 7, 9, 13]\\n11: [0, 5, 6, 7, 13]\\n12: [8, 13]\\n13: [4, 8, 9, 10, 11, 12]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 12, 13, 9, 10, 7, 11]", "system": "{'0': [1, 4, 11], '1': [0, 2], '2': [1, 3, 7], '3': [2, 6, 10], '4': [0, 5, 8, 13], '5': [4, 6, 8, 10, 11], '6': [3, 5, 7, 10, 11], '7': [2, 6, 10, 11], '8': [4, 5, 9, 12, 13], '9': [8, 10, 13], '10': [3, 5, 6, 7, 9, 13], '11': [0, 5, 6, 7, 13], '12': [8, 13], '13': [4, 8, 9, 10, 11, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000499.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4]\\n1: [0, 2, 5, 8]\\n2: [1, 3, 12]\\n3: [2, 6]\\n4: [0, 5, 8, 13]\\n5: [1, 4, 6, 8]\\n6: [3, 5, 9, 11, 13]\\n7: [10, 11]\\n8: [1, 4, 5, 9]\\n9: [6, 8, 10]\\n10: [7, 9, 13]\\n11: [6, 7]\\n12: [2, 13]\\n13: [4, 6, 10, 12]\\n", "answer": "[0, 1, 5, 8, 9, 10, 7, 11, 6, 3, 2, 12, 13, 4]", "system": "{'0': [1, 4], '1': [0, 2, 5, 8], '2': [1, 3, 12], '3': [2, 6], '4': [0, 5, 8, 13], '5': [1, 4, 6, 8], '6': [3, 5, 9, 11, 13], '7': [10, 11], '8': [1, 4, 5, 9], '9': [6, 8, 10], '10': [7, 9, 13], '11': [6, 7], '12': [2, 13], '13': [4, 6, 10, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000500.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 5, 11]\\n1: [0, 2, 4, 5, 6, 7, 10]\\n2: [1, 3, 9]\\n3: [2, 6]\\n4: [1, 5, 8, 9, 11]\\n5: [0, 1, 4, 6, 10, 11]\\n6: [1, 3, 5]\\n7: [1, 10, 11]\\n8: [4, 9, 12, 13]\\n9: [2, 4, 8, 10]\\n10: [1, 5, 7, 9, 13]\\n11: [0, 4, 5, 7, 13]\\n12: [8, 13]\\n13: [8, 10, 11, 12]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 9, 8, 12, 13, 10, 7, 11]", "system": "{'0': [1, 5, 11], '1': [0, 2, 4, 5, 6, 7, 10], '2': [1, 3, 9], '3': [2, 6], '4': [1, 5, 8, 9, 11], '5': [0, 1, 4, 6, 10, 11], '6': [1, 3, 5], '7': [1, 10, 11], '8': [4, 9, 12, 13], '9': [2, 4, 8, 10], '10': [1, 5, 7, 9, 13], '11': [0, 4, 5, 7, 13], '12': [8, 13], '13': [8, 10, 11, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000501.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 5]\\n1: [0, 2, 7, 8]\\n2: [1, 3, 9]\\n3: [2, 6, 8, 13]\\n4: [5, 8, 13]\\n5: [0, 4, 6]\\n6: [3, 5, 10]\\n7: [1, 10, 11, 12]\\n8: [1, 3, 4, 9, 13]\\n9: [2, 8, 10, 12, 13]\\n10: [6, 7, 9, 11, 13]\\n11: [7, 10]\\n12: [7, 9, 13]\\n13: [3, 4, 8, 9, 10, 12]\\n", "answer": "[0, 1, 2, 3, 6, 10, 11, 7, 12, 9, 8, 13, 4, 5]", "system": "{'0': [1, 5], '1': [0, 2, 7, 8], '2': [1, 3, 9], '3': [2, 6, 8, 13], '4': [5, 8, 13], '5': [0, 4, 6], '6': [3, 5, 10], '7': [1, 10, 11, 12], '8': [1, 3, 4, 9, 13], '9': [2, 8, 10, 12, 13], '10': [6, 7, 9, 11, 13], '11': [7, 10], '12': [7, 9, 13], '13': [3, 4, 8, 9, 10, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000502.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4, 7, 9]\\n1: [0, 2, 10, 12]\\n2: [1, 3, 9, 12]\\n3: [2, 6, 7, 10, 13]\\n4: [0, 5, 8, 11, 13]\\n5: [4, 6]\\n6: [3, 5]\\n7: [0, 3, 10, 11]\\n8: [4, 9]\\n9: [0, 2, 8, 10]\\n10: [1, 3, 7, 9, 13]\\n11: [4, 7]\\n12: [1, 2, 13]\\n13: [3, 4, 10, 12]\\n", "answer": "No", "system": "{'0': [1, 4, 7, 9], '1': [0, 2, 10, 12], '2': [1, 3, 9, 12], '3': [2, 6, 7, 10, 13], '4': [0, 5, 8, 11, 13], '5': [4, 6], '6': [3, 5], '7': [0, 3, 10, 11], '8': [4, 9], '9': [0, 2, 8, 10], '10': [1, 3, 7, 9, 13], '11': [4, 7], '12': [1, 2, 13], '13': [3, 4, 10, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000503.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 7, 11]\\n1: [0, 2]\\n2: [1, 3, 12]\\n3: [2, 5, 6]\\n4: [5, 8, 9, 11]\\n5: [3, 4, 6, 8]\\n6: [3, 5, 7, 10]\\n7: [0, 6, 8, 9, 10, 11]\\n8: [4, 5, 7, 9]\\n9: [4, 7, 8, 10]\\n10: [6, 7, 9, 11, 12, 13]\\n11: [0, 4, 7, 10, 13]\\n12: [2, 10, 13]\\n13: [10, 11, 12]\\n", "answer": "[0, 1, 2, 3, 5, 4, 8, 9, 7, 6, 10, 12, 13, 11]", "system": "{'0': [1, 7, 11], '1': [0, 2], '2': [1, 3, 12], '3': [2, 5, 6], '4': [5, 8, 9, 11], '5': [3, 4, 6, 8], '6': [3, 5, 7, 10], '7': [0, 6, 8, 9, 10, 11], '8': [4, 5, 7, 9], '9': [4, 7, 8, 10], '10': [6, 7, 9, 11, 12, 13], '11': [0, 4, 7, 10, 13], '12': [2, 10, 13], '13': [10, 11, 12]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000504.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4, 6, 14]\\n1: [0, 2, 14, 15]\\n2: [1, 3, 4, 7, 12]\\n3: [2, 6, 14]\\n4: [0, 2, 5, 8, 10]\\n5: [4, 6, 8]\\n6: [0, 3, 5, 9]\\n7: [2, 10, 11]\\n8: [4, 5, 9]\\n9: [6, 8, 10, 14]\\n10: [4, 7, 9]\\n11: [7, 13, 14]\\n12: [2, 13]\\n13: [11, 12, 14]\\n14: [0, 1, 3, 9, 11, 13, 15]\\n15: [1, 14]\\n", "answer": "[0, 1, 15, 14, 3, 2, 12, 13, 11, 7, 10, 4, 5, 8, 9, 6]", "system": "{'0': [1, 4, 6, 14], '1': [0, 2, 14, 15], '2': [1, 3, 4, 7, 12], '3': [2, 6, 14], '4': [0, 2, 5, 8, 10], '5': [4, 6, 8], '6': [0, 3, 5, 9], '7': [2, 10, 11], '8': [4, 5, 9], '9': [6, 8, 10, 14], '10': [4, 7, 9], '11': [7, 13, 14], '12': [2, 13], '13': [11, 12, 14], '14': [0, 1, 3, 9, 11, 13, 15], '15': [1, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000505.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 6, 14]\\n1: [0, 2, 6]\\n2: [1, 3, 15]\\n3: [2, 6, 14]\\n4: [5, 8]\\n5: [4, 6]\\n6: [0, 1, 3, 5, 11]\\n7: [9, 10, 11, 12, 14]\\n8: [4, 9, 13, 15]\\n9: [7, 8, 10, 15]\\n10: [7, 9, 13, 15]\\n11: [6, 7, 14, 15]\\n12: [7, 13]\\n13: [8, 10, 12, 14]\\n14: [0, 3, 7, 11, 13, 15]\\n15: [2, 8, 9, 10, 11, 14]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 7, 12, 13, 10, 15, 11, 14]", "system": "{'0': [1, 6, 14], '1': [0, 2, 6], '2': [1, 3, 15], '3': [2, 6, 14], '4': [5, 8], '5': [4, 6], '6': [0, 1, 3, 5, 11], '7': [9, 10, 11, 12, 14], '8': [4, 9, 13, 15], '9': [7, 8, 10, 15], '10': [7, 9, 13, 15], '11': [6, 7, 14, 15], '12': [7, 13], '13': [8, 10, 12, 14], '14': [0, 3, 7, 11, 13, 15], '15': [2, 8, 9, 10, 11, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000506.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 14]\\n1: [0, 2]\\n2: [1, 3, 11]\\n3: [2, 4, 5, 6, 10, 14]\\n4: [3, 5, 8, 15]\\n5: [3, 4, 6]\\n6: [3, 5, 13]\\n7: [8, 9, 10, 11]\\n8: [4, 7, 9, 12]\\n9: [7, 8, 10, 12]\\n10: [3, 7, 9]\\n11: [2, 7, 14]\\n12: [8, 9, 13]\\n13: [6, 12, 14]\\n14: [0, 3, 11, 13, 15]\\n15: [4, 14]\\n", "answer": "[0, 1, 2, 11, 7, 9, 10, 3, 5, 6, 13, 12, 8, 4, 15, 14]", "system": "{'0': [1, 14], '1': [0, 2], '2': [1, 3, 11], '3': [2, 4, 5, 6, 10, 14], '4': [3, 5, 8, 15], '5': [3, 4, 6], '6': [3, 5, 13], '7': [8, 9, 10, 11], '8': [4, 7, 9, 12], '9': [7, 8, 10, 12], '10': [3, 7, 9], '11': [2, 7, 14], '12': [8, 9, 13], '13': [6, 12, 14], '14': [0, 3, 11, 13, 15], '15': [4, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000507.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 14]\\n1: [0, 2, 8, 10, 15]\\n2: [1, 3, 12]\\n3: [2, 6, 8]\\n4: [5, 8, 13]\\n5: [4, 6, 9]\\n6: [3, 5, 7, 11]\\n7: [6, 9, 10, 11, 14]\\n8: [1, 3, 4, 9, 14]\\n9: [5, 7, 8, 10, 12]\\n10: [1, 7, 9, 11, 14, 15]\\n11: [6, 7, 10, 14]\\n12: [2, 9, 13]\\n13: [4, 12, 14]\\n14: [0, 7, 8, 10, 11, 13, 15]\\n15: [1, 10, 14]\\n", "answer": "[0, 1, 2, 3, 8, 4, 13, 12, 9, 5, 6, 7, 11, 10, 15, 14]", "system": "{'0': [1, 14], '1': [0, 2, 8, 10, 15], '2': [1, 3, 12], '3': [2, 6, 8], '4': [5, 8, 13], '5': [4, 6, 9], '6': [3, 5, 7, 11], '7': [6, 9, 10, 11, 14], '8': [1, 3, 4, 9, 14], '9': [5, 7, 8, 10, 12], '10': [1, 7, 9, 11, 14, 15], '11': [6, 7, 10, 14], '12': [2, 9, 13], '13': [4, 12, 14], '14': [0, 7, 8, 10, 11, 13, 15], '15': [1, 10, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000508.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 13]\\n1: [0, 2, 7, 8]\\n2: [1, 3, 4]\\n3: [2, 6]\\n4: [2, 5, 8]\\n5: [4, 6, 9, 10, 14]\\n6: [3, 5, 11]\\n7: [1, 10, 11]\\n8: [1, 4, 9, 12]\\n9: [5, 8, 10, 12, 15]\\n10: [5, 7, 9, 12, 14]\\n11: [6, 7, 14]\\n12: [8, 9, 10, 13]\\n13: [0, 12, 14]\\n14: [5, 10, 11, 13, 15]\\n15: [9, 14]\\n", "answer": "[0, 1, 2, 3, 6, 5, 4, 8, 9, 15, 14, 11, 7, 10, 12, 13]", "system": "{'0': [1, 13], '1': [0, 2, 7, 8], '2': [1, 3, 4], '3': [2, 6], '4': [2, 5, 8], '5': [4, 6, 9, 10, 14], '6': [3, 5, 11], '7': [1, 10, 11], '8': [1, 4, 9, 12], '9': [5, 8, 10, 12, 15], '10': [5, 7, 9, 12, 14], '11': [6, 7, 14], '12': [8, 9, 10, 13], '13': [0, 12, 14], '14': [5, 10, 11, 13, 15], '15': [9, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000509.png", "question": "Given the undirected, connected graph below in adjacency-list form, determine if there is a Hamiltonian cycle. If it exists, output the cycle as a list (e.g., [0,1,2,3]). If not, output 'No'. 0: [1, 4]\\n1: [0, 2, 14]\\n2: [1, 3, 5, 6, 11, 13, 15]\\n3: [2, 6]\\n4: [0, 5, 8, 11, 15]\\n5: [2, 4, 6, 9, 10, 11]\\n6: [2, 3, 5]\\n7: [10, 11, 12]\\n8: [4, 9, 12, 13, 14]\\n9: [5, 8, 10, 14, 15]\\n10: [5, 7, 9, 13, 15]\\n11: [2, 4, 5, 7, 12, 14]\\n12: [7, 8, 11, 13]\\n13: [2, 8, 10, 12, 14]\\n14: [1, 8, 9, 11, 13, 15]\\n15: [2, 4, 9, 10, 14]\\n", "answer": "[0, 1, 2, 3, 6, 5, 9, 8, 12, 7, 11, 14, 13, 10, 15, 4]", "system": "{'0': [1, 4], '1': [0, 2, 14], '2': [1, 3, 5, 6, 11, 13, 15], '3': [2, 6], '4': [0, 5, 8, 11, 15], '5': [2, 4, 6, 9, 10, 11], '6': [2, 3, 5], '7': [10, 11, 12], '8': [4, 9, 12, 13, 14], '9': [5, 8, 10, 14, 15], '10': [5, 7, 9, 13, 15], '11': [2, 4, 5, 7, 12, 14], '12': [7, 8, 11, 13], '13': [2, 8, 10, 12, 14], '14': [1, 8, 9, 11, 13, 15], '15': [2, 4, 9, 10, 14]}", "category": "hamiltonian_cycle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_cycle_evaluator'}"}}
{"image": "images/000510.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 2 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 2, 3]\\n1: [0, 2, 3]\\n2: [0, 1, 3]\\n3: [0, 1, 2]\\n\\n", "answer": "[2, 0, 1, 3]", "system": "{'0': [1, 2, 3], '1': [0, 2, 3], '2': [0, 1, 3], '3': [0, 1, 2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000511.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 3 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 2]\\n1: [0, 2]\\n2: [0, 1, 3]\\n3: [2]\\n\\n", "answer": "[3, 2, 0, 1]", "system": "{'0': [1, 2], '1': [0, 2], '2': [0, 1, 3], '3': [2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000512.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 0 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 2]\\n1: [0, 2, 3]\\n2: [0, 1, 3]\\n3: [1, 2]\\n\\n", "answer": "[0, 1, 2, 3]", "system": "{'0': [1, 2], '1': [0, 2, 3], '2': [0, 1, 3], '3': [1, 2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000513.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 0 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2, 3]\\n2: [1, 3]\\n3: [1, 2]\\n\\n", "answer": "[0, 1, 2, 3]", "system": "{'0': [1], '1': [0, 2, 3], '2': [1, 3], '3': [1, 2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000514.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 0 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 2]\\n1: [0, 2]\\n2: [0, 1, 3]\\n3: [2]\\n\\n", "answer": "[0, 1, 2, 3]", "system": "{'0': [1, 2], '1': [0, 2], '2': [0, 1, 3], '3': [2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000515.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 1 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 2]\\n1: [0, 2]\\n2: [0, 1, 3]\\n3: [2]\\n\\n", "answer": "[1, 0, 2, 3]", "system": "{'0': [1, 2], '1': [0, 2], '2': [0, 1, 3], '3': [2]}", "category": "hamiltonian_path", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000516.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 3 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 5]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4]\\n4: [2, 3, 5]\\n5: [0, 4]\\n\\n", "answer": "[3, 4, 2, 1, 0, 5]", "system": "{'0': [1, 5], '1': [0, 2], '2': [1, 4], '3': [4], '4': [2, 3, 5], '5': [0, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000517.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 1 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 3, 5]\\n1: [0, 2]\\n2: [1, 4]\\n3: [0, 4]\\n4: [2, 3, 5]\\n5: [0, 4]\\n\\n", "answer": "[1, 2, 4, 3, 0, 5]", "system": "{'0': [1, 3, 5], '1': [0, 2], '2': [1, 4], '3': [0, 4], '4': [2, 3, 5], '5': [0, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000518.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 3 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 5]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4]\\n4: [2, 3, 5]\\n5: [0, 4]\\n\\n", "answer": "[3, 4, 2, 1, 0, 5]", "system": "{'0': [1, 5], '1': [0, 2], '2': [1, 4], '3': [4], '4': [2, 3, 5], '5': [0, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000519.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 0 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 3, 5]\\n1: [0, 2, 5]\\n2: [1, 4]\\n3: [0, 4]\\n4: [2, 3, 5]\\n5: [0, 1, 4]\\n\\n", "answer": "[0, 3, 4, 2, 1, 5]", "system": "{'0': [1, 3, 5], '1': [0, 2, 5], '2': [1, 4], '3': [0, 4], '4': [2, 3, 5], '5': [0, 1, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000520.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 1 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 5]\\n1: [0, 2, 3]\\n2: [1, 3, 4]\\n3: [1, 2, 4]\\n4: [2, 3, 5]\\n5: [0, 4]\\n\\n", "answer": "[1, 0, 5, 4, 2, 3]", "system": "{'0': [1, 5], '1': [0, 2, 3], '2': [1, 3, 4], '3': [1, 2, 4], '4': [2, 3, 5], '5': [0, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000521.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 5 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2]\\n2: [1, 4, 5]\\n3: [4]\\n4: [2, 3, 5]\\n5: [2, 4]\\n\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2], '2': [1, 4, 5], '3': [4], '4': [2, 3, 5], '5': [2, 4]}", "category": "hamiltonian_path", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000522.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 3 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2]\\n2: [1, 4]\\n3: [4, 6]\\n4: [2, 3]\\n5: [6, 7]\\n6: [3, 5, 7]\\n7: [5, 6]\\n\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2], '2': [1, 4], '3': [4, 6], '4': [2, 3], '5': [6, 7], '6': [3, 5, 7], '7': [5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000523.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 6 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 3]\\n1: [0, 2, 5]\\n2: [1, 4, 5]\\n3: [0, 4, 6]\\n4: [2, 3, 7]\\n5: [1, 2, 7]\\n6: [3, 7]\\n7: [4, 5, 6]\\n\\n", "answer": "[6, 3, 0, 1, 2, 4, 7, 5]", "system": "{'0': [1, 3], '1': [0, 2, 5], '2': [1, 4, 5], '3': [0, 4, 6], '4': [2, 3, 7], '5': [1, 2, 7], '6': [3, 7], '7': [4, 5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000524.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 2 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 3, 5]\\n1: [0, 2, 6]\\n2: [1, 4, 7]\\n3: [0, 4, 6]\\n4: [2, 3]\\n5: [0, 7]\\n6: [1, 3, 7]\\n7: [2, 5, 6]\\n\\n", "answer": "[2, 1, 0, 5, 7, 6, 3, 4]", "system": "{'0': [1, 3, 5], '1': [0, 2, 6], '2': [1, 4, 7], '3': [0, 4, 6], '4': [2, 3], '5': [0, 7], '6': [1, 3, 7], '7': [2, 5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000525.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 6 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2, 5]\\n2: [1, 4]\\n3: [4, 6, 7]\\n4: [2, 3, 5]\\n5: [1, 4, 7]\\n6: [3, 7]\\n7: [3, 5, 6]\\n\\n", "answer": "[6, 3, 7, 5, 4, 2, 1, 0]", "system": "{'0': [1], '1': [0, 2, 5], '2': [1, 4], '3': [4, 6, 7], '4': [2, 3, 5], '5': [1, 4, 7], '6': [3, 7], '7': [3, 5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000526.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 5 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 3, 5]\\n1: [0, 2, 4]\\n2: [1, 4, 5]\\n3: [0, 4, 6]\\n4: [1, 2, 3]\\n5: [0, 2, 7]\\n6: [3, 7]\\n7: [5, 6]\\n\\n", "answer": "[5, 0, 1, 2, 4, 3, 6, 7]", "system": "{'0': [1, 3, 5], '1': [0, 2, 4], '2': [1, 4, 5], '3': [0, 4, 6], '4': [1, 2, 3], '5': [0, 2, 7], '6': [3, 7], '7': [5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000527.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 6 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2, 5]\\n2: [1, 3, 4]\\n3: [2, 4, 6]\\n4: [2, 3, 5]\\n5: [1, 4, 7]\\n6: [3, 7]\\n7: [5, 6]\\n\\n", "answer": "[6, 7, 5, 4, 3, 2, 1, 0]", "system": "{'0': [1], '1': [0, 2, 5], '2': [1, 3, 4], '3': [2, 4, 6], '4': [2, 3, 5], '5': [1, 4, 7], '6': [3, 7], '7': [5, 6]}", "category": "hamiltonian_path", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000528.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 11 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 7, 9]\\n1: [0, 2, 5]\\n2: [1, 3, 6]\\n3: [2, 6, 8]\\n4: [5, 8, 11]\\n5: [1, 4, 6]\\n6: [2, 3, 5]\\n7: [0, 10, 11]\\n8: [3, 4, 9]\\n9: [0, 8, 10]\\n10: [7, 9]\\n11: [4, 7]\\n\\n", "answer": "[11, 4, 5, 1, 0, 7, 10, 9, 8, 3, 2, 6]", "system": "{'0': [1, 7, 9], '1': [0, 2, 5], '2': [1, 3, 6], '3': [2, 6, 8], '4': [5, 8, 11], '5': [1, 4, 6], '6': [2, 3, 5], '7': [0, 10, 11], '8': [3, 4, 9], '9': [0, 8, 10], '10': [7, 9], '11': [4, 7]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000529.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 10 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2]\\n2: [1, 3, 4]\\n3: [2, 6, 7]\\n4: [2, 5, 8]\\n5: [4, 6, 9]\\n6: [3, 5, 11]\\n7: [3, 10, 11]\\n8: [4, 9]\\n9: [5, 8, 10]\\n10: [7, 9]\\n11: [6, 7]\\n\\n", "answer": "[10, 9, 8, 4, 5, 6, 11, 7, 3, 2, 1, 0]", "system": "{'0': [1], '1': [0, 2], '2': [1, 3, 4], '3': [2, 6, 7], '4': [2, 5, 8], '5': [4, 6, 9], '6': [3, 5, 11], '7': [3, 10, 11], '8': [4, 9], '9': [5, 8, 10], '10': [7, 9], '11': [6, 7]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000530.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 4 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 5, 11]\\n1: [0, 2]\\n2: [1, 3, 4]\\n3: [2, 6, 8]\\n4: [2, 5, 8]\\n5: [0, 4, 6]\\n6: [3, 5, 10]\\n7: [10, 11]\\n8: [3, 4, 9]\\n9: [8, 10]\\n10: [6, 7, 9]\\n11: [0, 7]\\n\\n", "answer": "[4, 2, 1, 0, 5, 6, 3, 8, 9, 10, 7, 11]", "system": "{'0': [1, 5, 11], '1': [0, 2], '2': [1, 3, 4], '3': [2, 6, 8], '4': [2, 5, 8], '5': [0, 4, 6], '6': [3, 5, 10], '7': [10, 11], '8': [3, 4, 9], '9': [8, 10], '10': [6, 7, 9], '11': [0, 7]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000531.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 4 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 9]\\n1: [0, 2, 4]\\n2: [1, 3, 11]\\n3: [2, 6, 7]\\n4: [1, 5, 8]\\n5: [4, 6]\\n6: [3, 5]\\n7: [3, 10, 11]\\n8: [4, 9]\\n9: [0, 8, 10]\\n10: [7, 9, 11]\\n11: [2, 7, 10]\\n\\n", "answer": "[4, 5, 6, 3, 7, 10, 11, 2, 1, 0, 9, 8]", "system": "{'0': [1, 9], '1': [0, 2, 4], '2': [1, 3, 11], '3': [2, 6, 7], '4': [1, 5, 8], '5': [4, 6], '6': [3, 5], '7': [3, 10, 11], '8': [4, 9], '9': [0, 8, 10], '10': [7, 9, 11], '11': [2, 7, 10]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000532.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 6 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 9, 11]\\n1: [0, 2, 4]\\n2: [1, 3, 5]\\n3: [2, 6, 7]\\n4: [1, 5, 8]\\n5: [2, 4, 6]\\n6: [3, 5]\\n7: [3, 10, 11]\\n8: [4, 9]\\n9: [0, 8, 10]\\n10: [7, 9]\\n11: [0, 7]\\n\\n", "answer": "[6, 3, 2, 1, 0, 11, 7, 10, 9, 8, 4, 5]", "system": "{'0': [1, 9, 11], '1': [0, 2, 4], '2': [1, 3, 5], '3': [2, 6, 7], '4': [1, 5, 8], '5': [2, 4, 6], '6': [3, 5], '7': [3, 10, 11], '8': [4, 9], '9': [0, 8, 10], '10': [7, 9], '11': [0, 7]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000533.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 11 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 4, 6]\\n1: [0, 2, 8]\\n2: [1, 3, 7]\\n3: [2, 6]\\n4: [0, 5, 8]\\n5: [4, 6, 9]\\n6: [0, 3, 5]\\n7: [2, 10, 11]\\n8: [1, 4, 9]\\n9: [5, 8, 10]\\n10: [7, 9]\\n11: [7]\\n\\n", "answer": "[11, 7, 2, 3, 6, 0, 1, 8, 4, 5, 9, 10]", "system": "{'0': [1, 4, 6], '1': [0, 2, 8], '2': [1, 3, 7], '3': [2, 6], '4': [0, 5, 8], '5': [4, 6, 9], '6': [0, 3, 5], '7': [2, 10, 11], '8': [1, 4, 9], '9': [5, 8, 10], '10': [7, 9], '11': [7]}", "category": "hamiltonian_path", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000534.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 13 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 7]\\n1: [0, 2, 10]\\n2: [1, 3, 11]\\n3: [2, 6]\\n4: [5, 8, 13]\\n5: [4, 6, 8]\\n6: [3, 5]\\n7: [0, 10, 11]\\n8: [4, 5, 9]\\n9: [8, 10, 12]\\n10: [1, 7, 9]\\n11: [2, 7, 14]\\n12: [9, 13]\\n13: [4, 12, 14]\\n14: [11, 13, 15]\\n15: [14]\\n\\n", "answer": "No", "system": "{'0': [1, 7], '1': [0, 2, 10], '2': [1, 3, 11], '3': [2, 6], '4': [5, 8, 13], '5': [4, 6, 8], '6': [3, 5], '7': [0, 10, 11], '8': [4, 5, 9], '9': [8, 10, 12], '10': [1, 7, 9], '11': [2, 7, 14], '12': [9, 13], '13': [4, 12, 14], '14': [11, 13, 15], '15': [14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000535.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 7 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 13]\\n1: [0, 2, 8]\\n2: [1, 3, 6]\\n3: [2, 6, 10]\\n4: [5, 8]\\n5: [4, 6, 9]\\n6: [2, 3, 5]\\n7: [10, 11]\\n8: [1, 4, 9]\\n9: [5, 8, 10]\\n10: [3, 7, 9]\\n11: [7, 12, 14]\\n12: [11, 13]\\n13: [0, 12, 14]\\n14: [11, 13, 15]\\n15: [14]\\n\\n", "answer": "[7, 10, 9, 8, 4, 5, 6, 3, 2, 1, 0, 13, 12, 11, 14, 15]", "system": "{'0': [1, 13], '1': [0, 2, 8], '2': [1, 3, 6], '3': [2, 6, 10], '4': [5, 8], '5': [4, 6, 9], '6': [2, 3, 5], '7': [10, 11], '8': [1, 4, 9], '9': [5, 8, 10], '10': [3, 7, 9], '11': [7, 12, 14], '12': [11, 13], '13': [0, 12, 14], '14': [11, 13, 15], '15': [14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000536.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 12 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 7, 11]\\n1: [0, 2, 4]\\n2: [1, 3, 15]\\n3: [2, 6]\\n4: [1, 5, 8]\\n5: [4, 6, 12]\\n6: [3, 5, 9]\\n7: [0, 10, 11]\\n8: [4, 9, 12]\\n9: [6, 8, 10]\\n10: [7, 9, 13]\\n11: [0, 7, 14]\\n12: [5, 8, 13]\\n13: [10, 12, 14]\\n14: [11, 13, 15]\\n15: [2, 14]\\n\\n", "answer": "[12, 5, 4, 1, 0, 11, 7, 10, 13, 14, 15, 2, 3, 6, 9, 8]", "system": "{'0': [1, 7, 11], '1': [0, 2, 4], '2': [1, 3, 15], '3': [2, 6], '4': [1, 5, 8], '5': [4, 6, 12], '6': [3, 5, 9], '7': [0, 10, 11], '8': [4, 9, 12], '9': [6, 8, 10], '10': [7, 9, 13], '11': [0, 7, 14], '12': [5, 8, 13], '13': [10, 12, 14], '14': [11, 13, 15], '15': [2, 14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000537.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 7 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 4, 9]\\n1: [0, 2, 15]\\n2: [1, 3, 12]\\n3: [2, 6, 7]\\n4: [0, 5, 8]\\n5: [4, 6, 11]\\n6: [3, 5, 10]\\n7: [3, 10, 11]\\n8: [4, 9, 15]\\n9: [0, 8, 10]\\n10: [6, 7, 9]\\n11: [5, 7, 14]\\n12: [2, 13]\\n13: [12, 14]\\n14: [11, 13, 15]\\n15: [1, 8, 14]\\n\\n", "answer": "[7, 3, 2, 1, 15, 8, 4, 0, 9, 10, 6, 5, 11, 14, 13, 12]", "system": "{'0': [1, 4, 9], '1': [0, 2, 15], '2': [1, 3, 12], '3': [2, 6, 7], '4': [0, 5, 8], '5': [4, 6, 11], '6': [3, 5, 10], '7': [3, 10, 11], '8': [4, 9, 15], '9': [0, 8, 10], '10': [6, 7, 9], '11': [5, 7, 14], '12': [2, 13], '13': [12, 14], '14': [11, 13, 15], '15': [1, 8, 14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000538.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 2 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1]\\n1: [0, 2, 5]\\n2: [1, 3, 6]\\n3: [2, 6, 7]\\n4: [5, 8]\\n5: [1, 4, 6]\\n6: [2, 3, 5]\\n7: [3, 10, 11]\\n8: [4, 9, 12]\\n9: [8, 10, 12]\\n10: [7, 9]\\n11: [7, 14]\\n12: [8, 9, 13]\\n13: [12, 14]\\n14: [11, 13, 15]\\n15: [14]\\n\\n", "answer": "No", "system": "{'0': [1], '1': [0, 2, 5], '2': [1, 3, 6], '3': [2, 6, 7], '4': [5, 8], '5': [1, 4, 6], '6': [2, 3, 5], '7': [3, 10, 11], '8': [4, 9, 12], '9': [8, 10, 12], '10': [7, 9], '11': [7, 14], '12': [8, 9, 13], '13': [12, 14], '14': [11, 13, 15], '15': [14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000539.png", "question": "Given an undirected graph with adjacency list below, determine whether a Hamiltonian path starting from vertex 6 exists. If it exists, output the path as a list (e.g., [0,1,2,3]). If not, output 'No'.\\n0: [1, 11]\\n1: [0, 2, 4]\\n2: [1, 3, 6]\\n3: [2, 6, 7]\\n4: [1, 5, 8]\\n5: [4, 6, 10]\\n6: [2, 3, 5]\\n7: [3, 10, 11]\\n8: [4, 9, 15]\\n9: [8, 10, 12]\\n10: [5, 7, 9]\\n11: [0, 7, 14]\\n12: [9, 13]\\n13: [12, 14]\\n14: [11, 13, 15]\\n15: [8, 14]\\n\\n", "answer": "[6, 2, 3, 7, 10, 5, 4, 1, 0, 11, 14, 13, 12, 9, 8, 15]", "system": "{'0': [1, 11], '1': [0, 2, 4], '2': [1, 3, 6], '3': [2, 6, 7], '4': [1, 5, 8], '5': [4, 6, 10], '6': [2, 3, 5], '7': [3, 10, 11], '8': [4, 9, 15], '9': [8, 10, 12], '10': [5, 7, 9], '11': [0, 7, 14], '12': [9, 13], '13': [12, 14], '14': [11, 13, 15], '15': [8, 14]}", "category": "hamiltonian_path", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hamiltonian_path_evaluator'}"}}
{"image": "images/000540.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 2 3 1\\n2 4 1 4\\n3 1 4 3\\n1 3 2 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 3), (1, 1), (3, 1), (0, 0)}", "system": "[[1, 2, 3, 1], [2, 4, 1, 4], [3, 1, 4, 3], [1, 3, 2, 3]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000541.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n2 1 2 4\\n1 3 4 3\\n4 3 1 1\\n1 4 3 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 3), (1, 1), (3, 0), (0, 0)}", "system": "[[2, 1, 2, 4], [1, 3, 4, 3], [4, 3, 1, 1], [1, 4, 3, 1]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000542.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 4 2 3\\n4 4 1 3\\n2 1 3 4\\n2 3 2 2\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(1, 1), (0, 3), (3, 2), (3, 0)}", "system": "[[3, 4, 2, 3], [4, 4, 1, 3], [2, 1, 3, 4], [2, 3, 2, 2]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000543.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 1 2 3\\n2 1 3 1\\n1 2 4 3\\n3 3 1 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(1, 1), (0, 3), (3, 3), (3, 0)}", "system": "[[3, 1, 2, 3], [2, 1, 3, 1], [1, 2, 4, 3], [3, 3, 1, 3]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000544.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n2 3 4 3\\n3 2 2 4\\n1 4 3 4\\n3 2 1 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 3), (1, 1), (0, 3), (3, 0)}", "system": "[[2, 3, 4, 3], [3, 2, 2, 4], [1, 4, 3, 4], [3, 2, 1, 3]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000545.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n4 4 1 3\\n3 2 4 1\\n1 3 4 4\\n1 1 3 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(3, 3), (2, 2), (3, 0), (0, 0)}", "system": "[[4, 4, 1, 3], [3, 2, 4, 1], [1, 3, 4, 4], [1, 1, 3, 1]]", "category": "hitori", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000546.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n5 4 1 2 1\\n3 2 4 3 2\\n1 2 1 5 4\\n2 3 5 4 5\\n5 1 3 3 5\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 0), (0, 4), (3, 4), (1, 1), (4, 2), (2, 2), (1, 3)}", "system": "[[5, 4, 1, 2, 1], [3, 2, 4, 3, 2], [1, 2, 1, 5, 4], [2, 3, 5, 4, 5], [5, 1, 3, 3, 5]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000547.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 5 5 4 5\\n1 3 3 5 4\\n5 1 4 3 3\\n2 4 5 5 3\\n4 1 1 2 5\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 4), (0, 4), (1, 1), (0, 2), (3, 3), (4, 1)}", "system": "[[3, 5, 5, 4, 5], [1, 3, 3, 5, 4], [5, 1, 4, 3, 3], [2, 4, 5, 5, 3], [4, 1, 1, 2, 5]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000548.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n5 5 4 4 1\\n1 4 2 3 2\\n5 2 5 5 3\\n5 3 4 2 4\\n1 1 4 5 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (4, 0), (0, 0), (2, 0), (1, 4), (2, 3), (0, 2), (3, 2)}", "system": "[[5, 5, 4, 4, 1], [1, 4, 2, 3, 2], [5, 2, 5, 5, 3], [5, 3, 4, 2, 4], [1, 1, 4, 5, 1]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000549.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 5 3 2 4\\n5 1 3 1 3\\n4 2 4 3 1\\n2 1 4 5 3\\n3 3 3 4 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (4, 0), (1, 1), (1, 4), (4, 2), (0, 2), (2, 2)}", "system": "[[3, 5, 3, 2, 4], [5, 1, 3, 1, 3], [4, 2, 4, 3, 1], [2, 1, 4, 5, 3], [3, 3, 3, 4, 3]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000550.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 1 2 5 1\\n2 3 4 3 5\\n1 3 3 4 2\\n2 4 1 2 1\\n4 2 4 3 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 4), (2, 1), (3, 4), (0, 0), (4, 2), (3, 0), (1, 3)}", "system": "[[1, 1, 2, 5, 1], [2, 3, 4, 3, 5], [1, 3, 3, 4, 2], [2, 4, 1, 2, 1], [4, 2, 4, 3, 1]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000551.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n5 1 4 4 1\\n2 2 3 5 4\\n4 1 1 4 2\\n2 3 4 1 2\\n2 4 2 2 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 0), (0, 4), (2, 1), (3, 4), (4, 2), (2, 3), (0, 2), (1, 0)}", "system": "[[5, 1, 4, 4, 1], [2, 2, 3, 5, 4], [4, 1, 1, 4, 2], [2, 3, 4, 1, 2], [2, 4, 2, 2, 1]]", "category": "hitori", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000552.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n2 1 4 4 5 5\\n3 2 3 5 4 1\\n5 3 4 1 3 4\\n1 4 5 4 3 1\\n1 4 5 6 1 5\\n4 5 1 2 4 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 4), (4, 0), (3, 1), (5, 4), (0, 3), (4, 2), (0, 5), (2, 2), (1, 0), (3, 5)}", "system": "[[2, 1, 4, 4, 5, 5], [3, 2, 3, 5, 4, 1], [5, 3, 4, 1, 3, 4], [1, 4, 5, 4, 3, 1], [1, 4, 5, 6, 1, 5], [4, 5, 1, 2, 4, 3]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000553.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n6 3 2 3 5 5\\n4 3 5 2 2 6\\n3 2 2 5 5 3\\n3 1 6 2 5 4\\n6 5 5 6 4 5\\n5 6 1 3 3 2\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (2, 4), (4, 0), (0, 4), (2, 0), (4, 2), (4, 5), (2, 2), (5, 3), (1, 3)}", "system": "[[6, 3, 2, 3, 5, 5], [4, 3, 5, 2, 2, 6], [3, 2, 2, 5, 5, 3], [3, 1, 6, 2, 5, 4], [6, 5, 5, 6, 4, 5], [5, 6, 1, 3, 3, 2]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000554.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 2 4 4 6 1\\n4 1 4 3 5 3\\n6 3 5 3 2 4\\n2 1 1 4 3 3\\n2 4 4 6 6 2\\n1 5 6 2 4 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (1, 2), (4, 0), (1, 5), (0, 0), (3, 1), (0, 3), (4, 2), (2, 3), (3, 5)}", "system": "[[1, 2, 4, 4, 6, 1], [4, 1, 4, 3, 5, 3], [6, 3, 5, 3, 2, 4], [2, 1, 1, 4, 3, 3], [2, 4, 4, 6, 6, 2], [1, 5, 6, 2, 4, 3]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000555.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n6 6 1 1 5 6\\n3 5 1 3 6 4\\n2 4 6 5 4 1\\n4 4 5 5 3 5\\n6 1 3 4 4 5\\n2 2 6 3 1 6\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (2, 1), (0, 0), (3, 0), (0, 2), (3, 3), (5, 0), (0, 5), (1, 3), (3, 5), (5, 2)}", "system": "[[6, 6, 1, 1, 5, 6], [3, 5, 1, 3, 6, 4], [2, 4, 6, 5, 4, 1], [4, 4, 5, 5, 3, 5], [6, 1, 3, 4, 4, 5], [2, 2, 6, 3, 1, 6]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000556.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n4 2 3 2 5 4\\n3 6 5 4 3 2\\n6 5 1 6 3 1\\n5 1 1 3 6 5\\n1 4 6 6 2 3\\n3 3 2 1 3 5\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (4, 3), (3, 1), (5, 4), (2, 0), (1, 4), (5, 0), (0, 5), (2, 2), (3, 5)}", "system": "[[4, 2, 3, 2, 5, 4], [3, 6, 5, 4, 3, 2], [6, 5, 1, 6, 3, 1], [5, 1, 1, 3, 6, 5], [1, 4, 6, 6, 2, 3], [3, 3, 2, 1, 3, 5]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000557.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n6 4 6 6 5 5\\n4 1 5 3 6 2\\n5 3 3 5 1 1\\n2 5 3 1 1 3\\n3 3 1 2 5 4\\n3 6 6 5 1 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 0), (0, 4), (2, 1), (3, 4), (0, 0), (5, 4), (2, 3), (0, 2), (3, 2), (2, 5), (5, 2)}", "system": "[[6, 4, 6, 6, 5, 5], [4, 1, 5, 3, 6, 2], [5, 3, 3, 5, 1, 1], [2, 5, 3, 1, 1, 3], [3, 3, 1, 2, 5, 4], [3, 6, 6, 5, 1, 1]]", "category": "hitori", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000558.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n6 6 5 1 2 2 3\\n5 1 7 5 6 1 2\\n1 7 3 6 5 1 4\\n7 2 2 7 5 5 1\\n2 4 6 5 1 4 2\\n7 5 1 1 4 3 6\\n3 4 2 4 6 6 4\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(3, 4), (0, 0), (4, 1), (6, 1), (1, 1), (4, 6), (6, 6), (6, 4), (3, 0), (0, 5), (5, 3), (3, 2), (2, 5), (1, 3)}", "system": "[[6, 6, 5, 1, 2, 2, 3], [5, 1, 7, 5, 6, 1, 2], [1, 7, 3, 6, 5, 1, 4], [7, 2, 2, 7, 5, 5, 1], [2, 4, 6, 5, 1, 4, 2], [7, 5, 1, 1, 4, 3, 6], [3, 4, 2, 4, 6, 6, 4]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000559.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n7 2 2 1 6 5 7\\n1 2 4 3 7 7 2\\n4 7 6 2 1 2 5\\n6 3 7 3 4 2 1\\n4 1 6 6 1 4 4\\n3 5 2 4 7 5 6\\n7 4 4 7 2 6 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (6, 2), (4, 0), (5, 5), (1, 1), (4, 6), (1, 4), (0, 6), (4, 2), (0, 2), (3, 3), (6, 0), (2, 5)}", "system": "[[7, 2, 2, 1, 6, 5, 7], [1, 2, 4, 3, 7, 7, 2], [4, 7, 6, 2, 1, 2, 5], [6, 3, 7, 3, 4, 2, 1], [4, 1, 6, 6, 1, 4, 4], [3, 5, 2, 4, 7, 5, 6], [7, 4, 4, 7, 2, 6, 3]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000560.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 2 3 3 6 4 3\\n7 5 1 2 1 3 6\\n4 3 6 1 2 5 3\\n7 6 6 7 1 1 6\\n5 3 2 5 7 6 1\\n6 2 7 5 7 2 7\\n1 4 3 6 1 7 5\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(6, 0), (2, 1), (3, 4), (0, 0), (4, 3), (5, 4), (5, 1), (1, 4), (0, 6), (3, 0), (0, 2), (5, 6), (3, 6), (3, 2)}", "system": "[[3, 2, 3, 3, 6, 4, 3], [7, 5, 1, 2, 1, 3, 6], [4, 3, 6, 1, 2, 5, 3], [7, 6, 6, 7, 1, 1, 6], [5, 3, 2, 5, 7, 6, 1], [6, 2, 7, 5, 7, 2, 7], [1, 4, 3, 6, 1, 7, 5]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000561.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n4 1 3 6 5 2 7\\n2 5 7 5 2 4 4\\n1 6 2 5 4 7 4\\n7 6 5 2 6 7 2\\n3 2 3 7 4 6 5\\n4 3 4 3 7 6 6\\n2 7 7 4 1 5 5\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(2, 4), (5, 5), (6, 2), (3, 1), (5, 3), (6, 6), (4, 2), (3, 3), (5, 0), (1, 0), (1, 6), (1, 3), (3, 5)}", "system": "[[4, 1, 3, 6, 5, 2, 7], [2, 5, 7, 5, 2, 4, 4], [1, 6, 2, 5, 4, 7, 4], [7, 6, 5, 2, 6, 7, 2], [3, 2, 3, 7, 4, 6, 5], [4, 3, 4, 3, 7, 6, 6], [2, 7, 7, 4, 1, 5, 5]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000562.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n6 6 5 2 3 3 3\\n7 6 2 3 3 4 5\\n2 3 3 4 1 6 1\\n3 3 6 7 5 5 1\\n1 7 4 6 6 7 3\\n5 4 7 3 2 7 6\\n2 7 6 6 7 5 2\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (6, 2), (5, 5), (0, 4), (2, 1), (4, 1), (4, 3), (6, 4), (0, 6), (3, 0), (2, 6), (6, 0), (1, 3), (3, 5)}", "system": "[[6, 6, 5, 2, 3, 3, 3], [7, 6, 2, 3, 3, 4, 5], [2, 3, 3, 4, 1, 6, 1], [3, 3, 6, 7, 5, 5, 1], [1, 7, 4, 6, 6, 7, 3], [5, 4, 7, 3, 2, 7, 6], [2, 7, 6, 6, 7, 5, 2]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000563.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n7 7 7 2 7 4 6\\n6 4 2 3 7 1 3\\n6 6 7 6 3 2 2\\n7 5 6 5 1 3 4\\n5 1 3 6 6 2 6\\n7 3 6 7 2 6 1\\n2 5 4 1 7 7 4\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (0, 4), (0, 0), (3, 1), (4, 6), (2, 0), (6, 4), (2, 3), (0, 2), (5, 0), (6, 6), (1, 6), (2, 5), (5, 2)}", "system": "[[7, 7, 7, 2, 7, 4, 6], [6, 4, 2, 3, 7, 1, 3], [6, 6, 7, 6, 3, 2, 2], [7, 5, 6, 5, 1, 3, 4], [5, 1, 3, 6, 6, 2, 6], [7, 3, 6, 7, 2, 6, 1], [2, 5, 4, 1, 7, 7, 4]]", "category": "hitori", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000564.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 6 8 6 1 4 3 3\\n8 1 5 2 5 8 6 4\\n3 2 4 2 8 6 7 3\\n2 6 5 7 7 3 2 8\\n6 6 2 4 7 8 5 7\\n3 5 7 3 3 7 1 6\\n3 3 6 5 4 1 1 7\\n7 4 1 6 6 2 8 2\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (0, 7), (1, 2), (0, 4), (3, 4), (5, 5), (1, 5), (6, 1), (2, 0), (6, 6), (7, 3), (2, 3), (5, 0), (3, 6), (5, 3), (7, 5), (4, 1), (4, 7)}", "system": "[[1, 6, 8, 6, 1, 4, 3, 3], [8, 1, 5, 2, 5, 8, 6, 4], [3, 2, 4, 2, 8, 6, 7, 3], [2, 6, 5, 7, 7, 3, 2, 8], [6, 6, 2, 4, 7, 8, 5, 7], [3, 5, 7, 3, 3, 7, 1, 6], [3, 3, 6, 5, 4, 1, 1, 7], [7, 4, 1, 6, 6, 2, 8, 2]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000565.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n3 3 7 6 2 5 8 7\\n1 5 2 5 6 1 3 5\\n3 8 4 2 3 3 7 6\\n2 6 6 8 7 1 8 3\\n8 6 3 6 5 3 2 1\\n1 7 2 1 8 8 8 2\\n7 8 8 5 3 6 1 4\\n6 1 7 4 8 8 4 7\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 3), (3, 1), (5, 4), (0, 2), (1, 3), (7, 7), (4, 5), (5, 0), (5, 6), (3, 6), (2, 4), (1, 5), (6, 1), (7, 3), (5, 2), (0, 0), (2, 0), (1, 7), (7, 5)}", "system": "[[3, 3, 7, 6, 2, 5, 8, 7], [1, 5, 2, 5, 6, 1, 3, 5], [3, 8, 4, 2, 3, 3, 7, 6], [2, 6, 6, 8, 7, 1, 8, 3], [8, 6, 3, 6, 5, 3, 2, 1], [1, 7, 2, 1, 8, 8, 8, 2], [7, 8, 8, 5, 3, 6, 1, 4], [6, 1, 7, 4, 8, 8, 4, 7]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000566.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 6 4 5 6 8 8 5\\n7 1 6 5 2 8 3 6\\n3 3 5 3 4 1 7 2\\n5 2 7 8 7 5 6 7\\n6 6 3 8 1 5 4 8\\n6 4 8 1 3 2 4 7\\n8 7 6 4 3 3 1 6\\n4 8 7 3 8 6 1 1\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (6, 2), (4, 0), (7, 1), (2, 1), (4, 3), (3, 7), (0, 3), (6, 4), (2, 3), (1, 7), (7, 6), (5, 6), (0, 5), (3, 2), (3, 5)}", "system": "[[1, 6, 4, 5, 6, 8, 8, 5], [7, 1, 6, 5, 2, 8, 3, 6], [3, 3, 5, 3, 4, 1, 7, 2], [5, 2, 7, 8, 7, 5, 6, 7], [6, 6, 3, 8, 1, 5, 4, 8], [6, 4, 8, 1, 3, 2, 4, 7], [8, 7, 6, 4, 3, 3, 1, 6], [4, 8, 7, 3, 8, 6, 1, 1]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000567.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 5 2 3 3 6 8 5\\n4 4 1 7 1 4 6 8\\n8 3 6 1 5 4 5 4\\n7 7 6 8 2 3 3 6\\n7 6 8 3 1 5 2 1\\n5 1 2 2 8 7 1 5\\n3 2 1 7 6 7 7 6\\n2 8 2 6 5 2 1 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(1, 0), (6, 5), (3, 0), (5, 0), (5, 6), (0, 7), (2, 4), (1, 2), (2, 7), (1, 5), (7, 0), (6, 7), (3, 2), (3, 5), (5, 2), (4, 4), (0, 3), (7, 2), (6, 3)}", "system": "[[1, 5, 2, 3, 3, 6, 8, 5], [4, 4, 1, 7, 1, 4, 6, 8], [8, 3, 6, 1, 5, 4, 5, 4], [7, 7, 6, 8, 2, 3, 3, 6], [7, 6, 8, 3, 1, 5, 2, 1], [5, 1, 2, 2, 8, 7, 1, 5], [3, 2, 1, 7, 6, 7, 7, 6], [2, 8, 2, 6, 5, 2, 1, 3]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000568.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 7 3 6 6 8 5 6\\n6 3 1 8 8 5 6 7\\n2 3 6 4 4 3 8 8\\n5 4 3 3 6 2 7 5\\n7 1 2 8 2 1 4 5\\n6 8 5 5 2 7 2 4\\n3 1 3 7 5 5 2 3\\n3 2 7 5 3 4 8 8\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(4, 4), (0, 7), (2, 4), (6, 2), (0, 4), (2, 1), (6, 5), (4, 1), (7, 4), (3, 7), (5, 3), (7, 7), (2, 6), (5, 6), (6, 0), (1, 0), (3, 2), (1, 3)}", "system": "[[1, 7, 3, 6, 6, 8, 5, 6], [6, 3, 1, 8, 8, 5, 6, 7], [2, 3, 6, 4, 4, 3, 8, 8], [5, 4, 3, 3, 6, 2, 7, 5], [7, 1, 2, 8, 2, 1, 4, 5], [6, 8, 5, 5, 2, 7, 2, 4], [3, 1, 3, 7, 5, 5, 2, 3], [3, 2, 7, 5, 3, 4, 8, 8]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000569.png", "question": "\\nYou are given an grid of a Hitori puzzle.\\n\\n### Puzzle Rules:\\n\\n1. In each row and each column, numbers in **unshaded cells** must be **unique**.\\n2. **Shaded cells cannot be adjacent** horizontally or vertically.\\n3. All **unshaded cells must form a single connected region** (connected orthogonally).\\n\\n### Coordinate System:\\n\\n- Coordinates must be in the format `(row, column)`\\n- `(0, 0)` refers to the **top-left** cell of the grid\\n- Indexing is **zero-based**\\n\\n### Initial State:\\n```\\n1 1 8 5 3 3 4 4\\n8 5 1 7 4 3 2 3\\n7 3 5 6 3 4 6 6\\n3 4 3 2 1 5 8 5\\n2 2 3 8 8 5 1 1\\n5 1 7 8 4 2 3 4\\n2 5 4 2 5 1 1 8\\n4 6 7 3 7 8 5 3\\n```\\n\\n### Output Format:\\n\\nPlease return the set of shaded cell coordinates.\\nExample output:\\n((0, 1), (2, 3), (4, 2))\\n", "answer": "{(0, 1), (0, 7), (4, 0), (0, 4), (2, 1), (2, 7), (1, 5), (4, 3), (6, 1), (5, 4), (7, 7), (2, 3), (7, 2), (6, 6), (3, 2), (6, 3), (4, 7), (3, 5)}", "system": "[[1, 1, 8, 5, 3, 3, 4, 4], [8, 5, 1, 7, 4, 3, 2, 3], [7, 3, 5, 6, 3, 4, 6, 6], [3, 4, 3, 2, 1, 5, 8, 5], [2, 2, 3, 8, 8, 5, 1, 1], [5, 1, 7, 8, 4, 2, 3, 4], [2, 5, 4, 2, 5, 1, 1, 8], [4, 6, 7, 3, 7, 8, 5, 3]]", "category": "hitori", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hitori_evaluator'}"}}
{"image": "images/000570.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\  ][  \\\\ 5][    ]\\n[  \\\\  ][  \\\\  ][  \\\\  ]\\n[  \\\\  ][  \\\\  ][  \\\\  ]\\n## Clues\\nBlack cell at (0,1): horizontal run with sum 5\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):5", "system": "[[{'type': 'black'}, {'type': 'black', 'right': 5}, {'type': 'white'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000571.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 1\\\\  ][ 2\\\\  ][13\\\\  ]\\n[    ][    ][    ]\\n[  \\\\  ][  \\\\ 5][    ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 1\\nBlack cell at (0,1): vertical run with sum 2\\nBlack cell at (0,2): vertical run with sum 13\\nBlack cell at (2,1): horizontal run with sum 5\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(1,0), (1,1), (1,2), (2,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(1,0):1 (1,1):2 (1,2):8 (2,2):5", "system": "[[{'type': 'black', 'down': 1}, {'type': 'black', 'down': 2}, {'type': 'black', 'down': 13}], [{'type': 'white'}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black'}, {'type': 'black', 'right': 5}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000572.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 1\\\\ 6][    ][  \\\\  ]\\n[    ][ 7\\\\  ][  \\\\  ]\\n[  \\\\ 7][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 6, vertical run with sum 1\\nBlack cell at (1,1): vertical run with sum 7\\nBlack cell at (2,0): horizontal run with sum 7\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (1,0), (2,1)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):6 (1,0):1 (2,1):7", "system": "[[{'type': 'black', 'right': 6, 'down': 1}, {'type': 'white'}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black', 'down': 7}, {'type': 'black'}], [{'type': 'black', 'right': 7}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000573.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\ 1][    ][  \\\\  ]\\n[  \\\\  ][  \\\\  ][  \\\\  ]\\n[  \\\\  ][  \\\\  ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 1\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):1", "system": "[[{'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000574.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 1\\\\ 8][    ][ 3\\\\  ]\\n[    ][  \\\\ 3][    ]\\n[  \\\\  ][  \\\\  ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 8, vertical run with sum 1\\nBlack cell at (0,2): vertical run with sum 3\\nBlack cell at (1,1): horizontal run with sum 3\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (1,0), (1,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):8 (1,0):1 (1,2):3", "system": "[[{'type': 'black', 'right': 8, 'down': 1}, {'type': 'white'}, {'type': 'black', 'down': 3}], [{'type': 'white'}, {'type': 'black', 'right': 3}, {'type': 'white'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000575.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 3\\\\  ][  \\\\ 4][    ]\\n[    ][ 6\\\\  ][ 7\\\\  ]\\n[  \\\\13][    ][    ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 3\\nBlack cell at (0,1): horizontal run with sum 4\\nBlack cell at (1,1): vertical run with sum 6\\nBlack cell at (1,2): vertical run with sum 7\\nBlack cell at (2,0): horizontal run with sum 13\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (1,0), (2,1), (2,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):4 (1,0):3 (2,1):6 (2,2):7", "system": "[[{'type': 'black', 'down': 3}, {'type': 'black', 'right': 4}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'down': 6}, {'type': 'black', 'down': 7}], [{'type': 'black', 'right': 13}, {'type': 'white'}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000576.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 6\\\\ 1][    ][ 8\\\\ 4][    ]\\n[    ][ 9\\\\ 8][    ][ 1\\\\  ]\\n[ 5\\\\ 9][    ][ 9\\\\ 1][    ]\\n[    ][  \\\\ 9][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 1, vertical run with sum 6\\nBlack cell at (0,2): horizontal run with sum 4, vertical run with sum 8\\nBlack cell at (1,1): horizontal run with sum 8, vertical run with sum 9\\nBlack cell at (1,3): vertical run with sum 1\\nBlack cell at (2,0): horizontal run with sum 9, vertical run with sum 5\\nBlack cell at (2,2): horizontal run with sum 1, vertical run with sum 9\\nBlack cell at (3,1): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (1,0), (1,2), (2,1), (2,3), (3,0), (3,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):1 (0,3):4 (1,0):6 (1,2):8 (2,1):9 (2,3):1 (3,0):5 (3,2):9", "system": "[[{'type': 'black', 'right': 1, 'down': 6}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 8}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 8, 'down': 9}, {'type': 'white'}, {'type': 'black', 'down': 1}], [{'type': 'black', 'right': 9, 'down': 5}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 9}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000577.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 1\\\\  ][ 6\\\\  ][ 7\\\\ 5][    ]\\n[    ][    ][    ][ 7\\\\  ]\\n[  \\\\  ][ 6\\\\  ][ 9\\\\ 7][    ]\\n[  \\\\15][    ][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 1\\nBlack cell at (0,1): vertical run with sum 6\\nBlack cell at (0,2): horizontal run with sum 5, vertical run with sum 7\\nBlack cell at (1,3): vertical run with sum 7\\nBlack cell at (2,1): vertical run with sum 6\\nBlack cell at (2,2): horizontal run with sum 7, vertical run with sum 9\\nBlack cell at (3,0): horizontal run with sum 15\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,3), (1,0), (1,1), (1,2), (2,3), (3,1), (3,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,3):5 (1,0):1 (1,1):6 (1,2):7 (2,3):7 (3,1):6 (3,2):9", "system": "[[{'type': 'black', 'down': 1}, {'type': 'black', 'down': 6}, {'type': 'black', 'right': 5, 'down': 7}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'black'}, {'type': 'black', 'down': 6}, {'type': 'black', 'right': 7, 'down': 9}, {'type': 'white'}], [{'type': 'black', 'right': 15}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000578.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 1\\\\  ][13\\\\  ][  \\\\ 2][    ]\\n[    ][    ][  \\\\ 4][    ]\\n[  \\\\ 3][    ][ 3\\\\  ][  \\\\  ]\\n[  \\\\12][    ][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 1\\nBlack cell at (0,1): vertical run with sum 13\\nBlack cell at (0,2): horizontal run with sum 2\\nBlack cell at (1,2): horizontal run with sum 4\\nBlack cell at (2,0): horizontal run with sum 3\\nBlack cell at (2,2): vertical run with sum 3\\nBlack cell at (3,0): horizontal run with sum 12\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,3), (1,0), (1,1), (1,3), (2,1), (3,1), (3,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,3):2 (1,0):1 (1,1):1 (1,3):4 (2,1):3 (3,1):9 (3,2):3", "system": "[[{'type': 'black', 'down': 1}, {'type': 'black', 'down': 13}, {'type': 'black', 'right': 2}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}], [{'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'down': 3}, {'type': 'black'}], [{'type': 'black', 'right': 12}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000579.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\  ][ 8\\\\  ][ 7\\\\ 1][    ]\\n[  \\\\15][    ][    ][ 9\\\\  ]\\n[  \\\\  ][ 9\\\\  ][ 1\\\\ 9][    ]\\n[  \\\\10][    ][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,1): vertical run with sum 8\\nBlack cell at (0,2): horizontal run with sum 1, vertical run with sum 7\\nBlack cell at (1,0): horizontal run with sum 15\\nBlack cell at (1,3): vertical run with sum 9\\nBlack cell at (2,1): vertical run with sum 9\\nBlack cell at (2,2): horizontal run with sum 9, vertical run with sum 1\\nBlack cell at (3,0): horizontal run with sum 10\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,3), (1,1), (1,2), (2,3), (3,1), (3,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,3):1 (1,1):8 (1,2):7 (2,3):9 (3,1):9 (3,2):1", "system": "[[{'type': 'black'}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 1, 'down': 7}, {'type': 'white'}], [{'type': 'black', 'right': 15}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 9}], [{'type': 'black'}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 9, 'down': 1}, {'type': 'white'}], [{'type': 'black', 'right': 10}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000580.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 3\\\\  ][ 9\\\\ 2][    ][ 6\\\\  ]\\n[    ][    ][ 8\\\\ 6][    ]\\n[  \\\\12][    ][    ][ 4\\\\  ]\\n[  \\\\  ][  \\\\ 7][    ][    ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 3\\nBlack cell at (0,1): horizontal run with sum 2, vertical run with sum 9\\nBlack cell at (0,3): vertical run with sum 6\\nBlack cell at (1,2): horizontal run with sum 6, vertical run with sum 8\\nBlack cell at (2,0): horizontal run with sum 12\\nBlack cell at (2,3): vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 7\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (1,0), (1,1), (1,3), (2,1), (2,2), (3,2), (3,3)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):2 (1,0):3 (1,1):2 (1,3):6 (2,1):7 (2,2):5 (3,2):3 (3,3):4", "system": "[[{'type': 'black', 'down': 3}, {'type': 'black', 'right': 2, 'down': 9}, {'type': 'white'}, {'type': 'black', 'down': 6}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 8}, {'type': 'white'}], [{'type': 'black', 'right': 12}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 4}], [{'type': 'black'}, {'type': 'black', 'right': 7}, {'type': 'white'}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000581.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\  ][ 6\\\\ 1][    ][ 4\\\\  ]\\n[  \\\\ 6][    ][ 9\\\\ 4][    ]\\n[ 1\\\\  ][  \\\\ 3][    ][ 4\\\\  ]\\n[    ][  \\\\10][    ][    ]\\n## Clues\\nBlack cell at (0,1): horizontal run with sum 1, vertical run with sum 6\\nBlack cell at (0,3): vertical run with sum 4\\nBlack cell at (1,0): horizontal run with sum 6\\nBlack cell at (1,2): horizontal run with sum 4, vertical run with sum 9\\nBlack cell at (2,0): vertical run with sum 1\\nBlack cell at (2,1): horizontal run with sum 3\\nBlack cell at (2,3): vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 10\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (1,1), (1,3), (2,2), (3,0), (3,2), (3,3)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):1 (1,1):6 (1,3):4 (2,2):3 (3,0):1 (3,2):6 (3,3):4", "system": "[[{'type': 'black'}, {'type': 'black', 'right': 1, 'down': 6}, {'type': 'white'}, {'type': 'black', 'down': 4}], [{'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 9}, {'type': 'white'}], [{'type': 'black', 'down': 1}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'down': 4}], [{'type': 'white'}, {'type': 'black', 'right': 10}, {'type': 'white'}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000582.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 8\\\\ 8][    ][  \\\\ 1][    ][  \\\\  ]\\n[    ][  \\\\  ][ 6\\\\  ][  \\\\  ][  \\\\  ]\\n[ 4\\\\  ][10\\\\ 6][    ][ 8\\\\  ][12\\\\  ]\\n[    ][    ][ 8\\\\11][    ][    ]\\n[  \\\\ 9][    ][    ][  \\\\ 9][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 8, vertical run with sum 8\\nBlack cell at (0,2): horizontal run with sum 1\\nBlack cell at (1,2): vertical run with sum 6\\nBlack cell at (2,0): vertical run with sum 4\\nBlack cell at (2,1): horizontal run with sum 6, vertical run with sum 10\\nBlack cell at (2,3): vertical run with sum 8\\nBlack cell at (2,4): vertical run with sum 12\\nBlack cell at (3,2): horizontal run with sum 11, vertical run with sum 8\\nBlack cell at (4,0): horizontal run with sum 9\\nBlack cell at (4,3): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (1,0), (2,2), (3,0), (3,1), (3,3), (3,4), (4,1), (4,2), (4,4)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):8 (0,3):1 (1,0):8 (2,2):6 (3,0):4 (3,1):9 (3,3):8 (3,4):3 (4,1):1 (4,2):8 (4,4):9", "system": "[[{'type': 'black', 'right': 8, 'down': 8}, {'type': 'white'}, {'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'down': 6}, {'type': 'black'}, {'type': 'black'}], [{'type': 'black', 'down': 4}, {'type': 'black', 'right': 6, 'down': 10}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black', 'down': 12}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 11, 'down': 8}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 9}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000583.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\  ][ 8\\\\  ][  \\\\ 2][    ][  \\\\  ]\\n[ 7\\\\ 8][    ][ 4\\\\ 4][    ][ 4\\\\  ]\\n[    ][ 6\\\\ 4][    ][ 9\\\\ 4][    ]\\n[ 9\\\\ 6][    ][ 6\\\\ 9][    ][  \\\\  ]\\n[    ][  \\\\ 6][    ][  \\\\  ][  \\\\  ]\\n## Clues\\nBlack cell at (0,1): vertical run with sum 8\\nBlack cell at (0,2): horizontal run with sum 2\\nBlack cell at (1,0): horizontal run with sum 8, vertical run with sum 7\\nBlack cell at (1,2): horizontal run with sum 4, vertical run with sum 4\\nBlack cell at (1,4): vertical run with sum 4\\nBlack cell at (2,1): horizontal run with sum 4, vertical run with sum 6\\nBlack cell at (2,3): horizontal run with sum 4, vertical run with sum 9\\nBlack cell at (3,0): horizontal run with sum 6, vertical run with sum 9\\nBlack cell at (3,2): horizontal run with sum 9, vertical run with sum 6\\nBlack cell at (4,1): horizontal run with sum 6\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,3), (1,1), (1,3), (2,0), (2,2), (2,4), (3,1), (3,3), (4,0), (4,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,3):2 (1,1):8 (1,3):4 (2,0):7 (2,2):4 (2,4):4 (3,1):6 (3,3):9 (4,0):9 (4,2):6", "system": "[[{'type': 'black'}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 2}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 8, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 4}, {'type': 'white'}, {'type': 'black', 'down': 4}], [{'type': 'white'}, {'type': 'black', 'right': 4, 'down': 6}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 9}, {'type': 'white'}], [{'type': 'black', 'right': 6, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 9, 'down': 6}, {'type': 'white'}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000584.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 9\\\\ 3][    ][ 4\\\\  ][ 2\\\\ 1][    ]\\n[    ][ 6\\\\ 6][    ][    ][  \\\\  ]\\n[  \\\\ 1][    ][ 8\\\\  ][  \\\\  ][  \\\\  ]\\n[ 8\\\\13][    ][    ][ 8\\\\  ][  \\\\  ]\\n[    ][  \\\\  ][  \\\\ 8][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 3, vertical run with sum 9\\nBlack cell at (0,2): vertical run with sum 4\\nBlack cell at (0,3): horizontal run with sum 1, vertical run with sum 2\\nBlack cell at (1,1): horizontal run with sum 6, vertical run with sum 6\\nBlack cell at (2,0): horizontal run with sum 1\\nBlack cell at (2,2): vertical run with sum 8\\nBlack cell at (3,0): horizontal run with sum 13, vertical run with sum 8\\nBlack cell at (3,3): vertical run with sum 8\\nBlack cell at (4,2): horizontal run with sum 8\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,4), (1,0), (1,2), (1,3), (2,1), (3,1), (3,2), (4,0), (4,3)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):3 (0,4):1 (1,0):9 (1,2):4 (1,3):2 (2,1):1 (3,1):5 (3,2):8 (4,0):8 (4,3):8", "system": "[[{'type': 'black', 'right': 3, 'down': 9}, {'type': 'white'}, {'type': 'black', 'down': 4}, {'type': 'black', 'right': 1, 'down': 2}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 6, 'down': 6}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black'}, {'type': 'black'}], [{'type': 'black', 'right': 13, 'down': 8}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 8}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000585.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 2\\\\ 5][    ][  \\\\ 4][    ][ 8\\\\  ]\\n[    ][ 2\\\\  ][  \\\\ 9][    ][    ]\\n[ 7\\\\ 2][    ][ 8\\\\  ][  \\\\ 3][    ]\\n[    ][  \\\\ 8][    ][ 9\\\\ 1][    ]\\n[  \\\\  ][  \\\\  ][  \\\\ 9][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 5, vertical run with sum 2\\nBlack cell at (0,2): horizontal run with sum 4\\nBlack cell at (0,4): vertical run with sum 8\\nBlack cell at (1,1): vertical run with sum 2\\nBlack cell at (1,2): horizontal run with sum 9\\nBlack cell at (2,0): horizontal run with sum 2, vertical run with sum 7\\nBlack cell at (2,2): vertical run with sum 8\\nBlack cell at (2,3): horizontal run with sum 3\\nBlack cell at (3,1): horizontal run with sum 8\\nBlack cell at (3,3): horizontal run with sum 1, vertical run with sum 9\\nBlack cell at (4,2): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (1,0), (1,3), (1,4), (2,1), (2,4), (3,0), (3,2), (3,4), (4,3)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):5 (0,3):4 (1,0):2 (1,3):5 (1,4):4 (2,1):2 (2,4):3 (3,0):7 (3,2):8 (3,4):1 (4,3):9", "system": "[[{'type': 'black', 'right': 5, 'down': 2}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'down': 8}], [{'type': 'white'}, {'type': 'black', 'down': 2}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'right': 2, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 3}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 8}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 9}, {'type': 'white'}], [{'type': 'black'}, {'type': 'black'}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000586.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\ 5][    ][10\\\\ 1][    ][  \\\\  ]\\n[  \\\\14][    ][    ][10\\\\  ][ 4\\\\  ]\\n[ 9\\\\  ][ 8\\\\14][    ][    ][    ]\\n[    ][    ][ 1\\\\ 1][    ][  \\\\  ]\\n[  \\\\ 6][    ][    ][  \\\\  ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 5\\nBlack cell at (0,2): horizontal run with sum 1, vertical run with sum 10\\nBlack cell at (1,0): horizontal run with sum 14\\nBlack cell at (1,3): vertical run with sum 10\\nBlack cell at (1,4): vertical run with sum 4\\nBlack cell at (2,0): vertical run with sum 9\\nBlack cell at (2,1): horizontal run with sum 14, vertical run with sum 8\\nBlack cell at (3,2): horizontal run with sum 1, vertical run with sum 1\\nBlack cell at (4,0): horizontal run with sum 6\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (1,1), (1,2), (2,2), (2,3), (2,4), (3,0), (3,1), (3,3), (4,1), (4,2)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):5 (0,3):1 (1,1):5 (1,2):9 (2,2):1 (2,3):9 (2,4):4 (3,0):9 (3,1):3 (3,3):1 (4,1):5 (4,2):1", "system": "[[{'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 10}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 14}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 10}, {'type': 'black', 'down': 4}], [{'type': 'black', 'down': 9}, {'type': 'black', 'right': 14, 'down': 8}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 1}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000587.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 4\\\\  ][ 5\\\\  ][  \\\\  ][ 6\\\\  ][  \\\\  ]\\n[    ][    ][ 6\\\\ 6][    ][  \\\\  ]\\n[ 9\\\\ 8][    ][    ][12\\\\  ][ 9\\\\  ]\\n[    ][ 6\\\\  ][  \\\\12][    ][    ]\\n[  \\\\ 6][    ][  \\\\ 9][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 4\\nBlack cell at (0,1): vertical run with sum 5\\nBlack cell at (0,3): vertical run with sum 6\\nBlack cell at (1,2): horizontal run with sum 6, vertical run with sum 6\\nBlack cell at (2,0): horizontal run with sum 8, vertical run with sum 9\\nBlack cell at (2,3): vertical run with sum 12\\nBlack cell at (2,4): vertical run with sum 9\\nBlack cell at (3,1): vertical run with sum 6\\nBlack cell at (3,2): horizontal run with sum 12\\nBlack cell at (4,0): horizontal run with sum 6\\nBlack cell at (4,2): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(1,0), (1,1), (1,3), (2,1), (2,2), (3,0), (3,3), (3,4), (4,1), (4,3)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(1,0):4 (1,1):3 (1,3):6 (2,1):2 (2,2):6 (3,0):9 (3,3):3 (3,4):9 (4,1):6 (4,3):9", "system": "[[{'type': 'black', 'down': 4}, {'type': 'black', 'down': 5}, {'type': 'black'}, {'type': 'black', 'down': 6}, {'type': 'black'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 6}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 8, 'down': 9}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 12}, {'type': 'black', 'down': 9}], [{'type': 'white'}, {'type': 'black', 'down': 6}, {'type': 'black', 'right': 12}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000588.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 4\\\\  ][ 9\\\\ 8][    ][  \\\\ 7][    ][ 9\\\\  ]\\n[    ][    ][ 9\\\\  ][ 8\\\\  ][ 1\\\\ 9][    ]\\n[ 8\\\\18][    ][    ][    ][    ][ 9\\\\  ]\\n[    ][ 4\\\\ 5][    ][  \\\\  ][ 3\\\\ 9][    ]\\n[ 4\\\\ 4][    ][ 9\\\\  ][ 8\\\\ 3][    ][ 6\\\\  ]\\n[    ][  \\\\17][    ][    ][  \\\\ 6][    ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 4\\nBlack cell at (0,1): horizontal run with sum 8, vertical run with sum 9\\nBlack cell at (0,3): horizontal run with sum 7\\nBlack cell at (0,5): vertical run with sum 9\\nBlack cell at (1,2): vertical run with sum 9\\nBlack cell at (1,3): vertical run with sum 8\\nBlack cell at (1,4): horizontal run with sum 9, vertical run with sum 1\\nBlack cell at (2,0): horizontal run with sum 18, vertical run with sum 8\\nBlack cell at (2,5): vertical run with sum 9\\nBlack cell at (3,1): horizontal run with sum 5, vertical run with sum 4\\nBlack cell at (3,4): horizontal run with sum 9, vertical run with sum 3\\nBlack cell at (4,0): horizontal run with sum 4, vertical run with sum 4\\nBlack cell at (4,2): vertical run with sum 9\\nBlack cell at (4,3): horizontal run with sum 3, vertical run with sum 8\\nBlack cell at (4,5): vertical run with sum 6\\nBlack cell at (5,1): horizontal run with sum 17\\nBlack cell at (5,4): horizontal run with sum 6\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (0,4), (1,0), (1,1), (1,5), (2,1), (2,2), (2,3), (2,4), (3,0), (3,2), (3,5), (4,1), (4,4), (5,0), (5,2), (5,3), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):8 (0,4):7 (1,0):4 (1,1):4 (1,5):9 (2,1):5 (2,2):4 (2,3):8 (2,4):1 (3,0):8 (3,2):5 (3,5):9 (4,1):4 (4,4):3 (5,0):4 (5,2):9 (5,3):8 (5,5):6", "system": "[[{'type': 'black', 'down': 4}, {'type': 'black', 'right': 8, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 7}, {'type': 'white'}, {'type': 'black', 'down': 9}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 9}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 9, 'down': 1}, {'type': 'white'}], [{'type': 'black', 'right': 18, 'down': 8}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 9}], [{'type': 'white'}, {'type': 'black', 'right': 5, 'down': 4}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 9, 'down': 3}, {'type': 'white'}], [{'type': 'black', 'right': 4, 'down': 4}, {'type': 'white'}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 3, 'down': 8}, {'type': 'white'}, {'type': 'black', 'down': 6}], [{'type': 'white'}, {'type': 'black', 'right': 17}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 6}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000589.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 7\\\\ 3][    ][  \\\\ 4][    ][ 2\\\\  ][ 8\\\\  ]\\n[    ][  \\\\  ][ 1\\\\19][    ][    ][    ]\\n[ 9\\\\  ][ 3\\\\ 1][    ][  \\\\  ][  \\\\  ][ 7\\\\  ]\\n[    ][    ][  \\\\  ][  \\\\  ][ 2\\\\ 7][    ]\\n[ 4\\\\  ][ 6\\\\  ][ 2\\\\  ][ 4\\\\ 2][    ][ 8\\\\  ]\\n[    ][    ][    ][    ][  \\\\ 8][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 3, vertical run with sum 7\\nBlack cell at (0,2): horizontal run with sum 4\\nBlack cell at (0,4): vertical run with sum 2\\nBlack cell at (0,5): vertical run with sum 8\\nBlack cell at (1,2): horizontal run with sum 19, vertical run with sum 1\\nBlack cell at (2,0): vertical run with sum 9\\nBlack cell at (2,1): horizontal run with sum 1, vertical run with sum 3\\nBlack cell at (2,5): vertical run with sum 7\\nBlack cell at (3,4): horizontal run with sum 7, vertical run with sum 2\\nBlack cell at (4,0): vertical run with sum 4\\nBlack cell at (4,1): vertical run with sum 6\\nBlack cell at (4,2): vertical run with sum 2\\nBlack cell at (4,3): horizontal run with sum 2, vertical run with sum 4\\nBlack cell at (4,5): vertical run with sum 8\\nBlack cell at (5,4): horizontal run with sum 8\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (1,0), (1,3), (1,4), (1,5), (2,2), (3,0), (3,1), (3,5), (4,4), (5,0), (5,1), (5,2), (5,3), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):3 (0,3):4 (1,0):7 (1,3):9 (1,4):2 (1,5):8 (2,2):1 (3,0):9 (3,1):3 (3,5):7 (4,4):2 (5,0):4 (5,1):6 (5,2):2 (5,3):4 (5,5):8", "system": "[[{'type': 'black', 'right': 3, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'down': 2}, {'type': 'black', 'down': 8}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 19, 'down': 1}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'down': 9}, {'type': 'black', 'right': 1, 'down': 3}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'down': 7}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'right': 7, 'down': 2}, {'type': 'white'}], [{'type': 'black', 'down': 4}, {'type': 'black', 'down': 6}, {'type': 'black', 'down': 2}, {'type': 'black', 'right': 2, 'down': 4}, {'type': 'white'}, {'type': 'black', 'down': 8}], [{'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 8}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000590.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 3\\\\ 4][    ][  \\\\ 1][    ][ 9\\\\ 3][    ]\\n[    ][  \\\\  ][ 9\\\\  ][  \\\\ 9][    ][ 2\\\\  ]\\n[ 8\\\\  ][ 9\\\\ 9][    ][  \\\\  ][ 5\\\\ 2][    ]\\n[    ][    ][  \\\\  ][ 1\\\\ 5][    ][ 7\\\\  ]\\n[  \\\\ 5][    ][ 8\\\\ 1][    ][  \\\\ 1][    ]\\n[  \\\\11][    ][    ][  \\\\  ][  \\\\ 6][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 4, vertical run with sum 3\\nBlack cell at (0,2): horizontal run with sum 1\\nBlack cell at (0,4): horizontal run with sum 3, vertical run with sum 9\\nBlack cell at (1,2): vertical run with sum 9\\nBlack cell at (1,3): horizontal run with sum 9\\nBlack cell at (1,5): vertical run with sum 2\\nBlack cell at (2,0): vertical run with sum 8\\nBlack cell at (2,1): horizontal run with sum 9, vertical run with sum 9\\nBlack cell at (2,4): horizontal run with sum 2, vertical run with sum 5\\nBlack cell at (3,3): horizontal run with sum 5, vertical run with sum 1\\nBlack cell at (3,5): vertical run with sum 7\\nBlack cell at (4,0): horizontal run with sum 5\\nBlack cell at (4,2): horizontal run with sum 1, vertical run with sum 8\\nBlack cell at (4,4): horizontal run with sum 1\\nBlack cell at (5,0): horizontal run with sum 11\\nBlack cell at (5,4): horizontal run with sum 6\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (0,5), (1,0), (1,4), (2,2), (2,5), (3,0), (3,1), (3,4), (4,1), (4,3), (4,5), (5,1), (5,2), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):4 (0,3):1 (0,5):3 (1,0):3 (1,4):9 (2,2):9 (2,5):2 (3,0):8 (3,1):1 (3,4):5 (4,1):5 (4,3):1 (4,5):1 (5,1):3 (5,2):8 (5,5):6", "system": "[[{'type': 'black', 'right': 4, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 9}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'black', 'down': 2}], [{'type': 'black', 'down': 8}, {'type': 'black', 'right': 9, 'down': 9}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 2, 'down': 5}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 5, 'down': 1}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 8}, {'type': 'white'}, {'type': 'black', 'right': 1}, {'type': 'white'}], [{'type': 'black', 'right': 11}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 6}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000591.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\  ][ 5\\\\ 8][    ][ 8\\\\ 3][    ][ 9\\\\  ]\\n[ 3\\\\ 5][    ][  \\\\ 3][    ][12\\\\ 9][    ]\\n[    ][ 6\\\\  ][11\\\\13][    ][    ][24\\\\  ]\\n[ 7\\\\10][    ][    ][ 3\\\\11][    ][    ]\\n[    ][ 5\\\\10][    ][    ][  \\\\ 8][    ]\\n[  \\\\ 5][    ][  \\\\  ][  \\\\  ][  \\\\ 9][    ]\\n## Clues\\nBlack cell at (0,1): horizontal run with sum 8, vertical run with sum 5\\nBlack cell at (0,3): horizontal run with sum 3, vertical run with sum 8\\nBlack cell at (0,5): vertical run with sum 9\\nBlack cell at (1,0): horizontal run with sum 5, vertical run with sum 3\\nBlack cell at (1,2): horizontal run with sum 3\\nBlack cell at (1,4): horizontal run with sum 9, vertical run with sum 12\\nBlack cell at (2,1): vertical run with sum 6\\nBlack cell at (2,2): horizontal run with sum 13, vertical run with sum 11\\nBlack cell at (2,5): vertical run with sum 24\\nBlack cell at (3,0): horizontal run with sum 10, vertical run with sum 7\\nBlack cell at (3,3): horizontal run with sum 11, vertical run with sum 3\\nBlack cell at (4,1): horizontal run with sum 10, vertical run with sum 5\\nBlack cell at (4,4): horizontal run with sum 8\\nBlack cell at (5,0): horizontal run with sum 5\\nBlack cell at (5,4): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (0,4), (1,1), (1,3), (1,5), (2,0), (2,3), (2,4), (3,1), (3,2), (3,4), (3,5), (4,0), (4,2), (4,3), (4,5), (5,1), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):8 (0,4):3 (1,1):5 (1,3):3 (1,5):9 (2,0):3 (2,3):5 (2,4):8 (3,1):6 (3,2):4 (3,4):4 (3,5):7 (4,0):7 (4,2):7 (4,3):3 (4,5):8 (5,1):5 (5,5):9", "system": "[[{'type': 'black'}, {'type': 'black', 'right': 8, 'down': 5}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 8}, {'type': 'white'}, {'type': 'black', 'down': 9}], [{'type': 'black', 'right': 5, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'right': 9, 'down': 12}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'down': 6}, {'type': 'black', 'right': 13, 'down': 11}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 24}], [{'type': 'black', 'right': 10, 'down': 7}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 11, 'down': 3}, {'type': 'white'}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 10, 'down': 5}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 8}, {'type': 'white'}], [{'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'right': 9}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000592.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 3\\\\ 8][    ][  \\\\ 4][    ][10\\\\ 8][    ]\\n[    ][  \\\\  ][ 4\\\\10][    ][    ][13\\\\  ]\\n[  \\\\  ][  \\\\ 4][    ][ 3\\\\15][    ][    ]\\n[ 6\\\\  ][ 9\\\\  ][ 6\\\\ 3][    ][ 9\\\\ 4][    ]\\n[    ][    ][    ][ 3\\\\ 9][    ][ 7\\\\  ]\\n[  \\\\ 8][    ][  \\\\ 3][    ][  \\\\ 7][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 8, vertical run with sum 3\\nBlack cell at (0,2): horizontal run with sum 4\\nBlack cell at (0,4): horizontal run with sum 8, vertical run with sum 10\\nBlack cell at (1,2): horizontal run with sum 10, vertical run with sum 4\\nBlack cell at (1,5): vertical run with sum 13\\nBlack cell at (2,1): horizontal run with sum 4\\nBlack cell at (2,3): horizontal run with sum 15, vertical run with sum 3\\nBlack cell at (3,0): vertical run with sum 6\\nBlack cell at (3,1): vertical run with sum 9\\nBlack cell at (3,2): horizontal run with sum 3, vertical run with sum 6\\nBlack cell at (3,4): horizontal run with sum 4, vertical run with sum 9\\nBlack cell at (4,3): horizontal run with sum 9, vertical run with sum 3\\nBlack cell at (4,5): vertical run with sum 7\\nBlack cell at (5,0): horizontal run with sum 8\\nBlack cell at (5,2): horizontal run with sum 3\\nBlack cell at (5,4): horizontal run with sum 7\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (0,5), (1,0), (1,3), (1,4), (2,2), (2,4), (2,5), (3,3), (3,5), (4,0), (4,1), (4,2), (4,4), (5,1), (5,3), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):8 (0,3):4 (0,5):8 (1,0):3 (1,3):6 (1,4):4 (2,2):4 (2,4):6 (2,5):9 (3,3):3 (3,5):4 (4,0):6 (4,1):1 (4,2):6 (4,4):9 (5,1):8 (5,3):3 (5,5):7", "system": "[[{'type': 'black', 'right': 8, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'right': 8, 'down': 10}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 10, 'down': 4}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 13}], [{'type': 'black'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'right': 15, 'down': 3}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'down': 6}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 3, 'down': 6}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 9}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 9, 'down': 3}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'black', 'right': 8}, {'type': 'white'}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'right': 7}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000593.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\ 4][    ][17\\\\  ][ 9\\\\  ][ 5\\\\ 3][    ]\\n[ 3\\\\  ][  \\\\12][    ][    ][    ][  \\\\  ]\\n[    ][  \\\\ 4][    ][ 7\\\\ 3][    ][ 4\\\\  ]\\n[  \\\\  ][  \\\\16][    ][    ][ 4\\\\ 4][    ]\\n[ 1\\\\  ][  \\\\ 3][    ][  \\\\ 4][    ][ 9\\\\  ]\\n[    ][  \\\\  ][  \\\\  ][  \\\\  ][  \\\\ 9][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 4\\nBlack cell at (0,2): vertical run with sum 17\\nBlack cell at (0,3): vertical run with sum 9\\nBlack cell at (0,4): horizontal run with sum 3, vertical run with sum 5\\nBlack cell at (1,0): vertical run with sum 3\\nBlack cell at (1,1): horizontal run with sum 12\\nBlack cell at (2,1): horizontal run with sum 4\\nBlack cell at (2,3): horizontal run with sum 3, vertical run with sum 7\\nBlack cell at (2,5): vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 16\\nBlack cell at (3,4): horizontal run with sum 4, vertical run with sum 4\\nBlack cell at (4,0): vertical run with sum 1\\nBlack cell at (4,1): horizontal run with sum 3\\nBlack cell at (4,3): horizontal run with sum 4\\nBlack cell at (4,5): vertical run with sum 9\\nBlack cell at (5,4): horizontal run with sum 9\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,5), (1,2), (1,3), (1,4), (2,0), (2,2), (2,4), (3,2), (3,3), (3,5), (4,2), (4,4), (5,0), (5,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):4 (0,5):3 (1,2):1 (1,3):9 (1,4):2 (2,0):3 (2,2):4 (2,4):3 (3,2):9 (3,3):7 (3,5):4 (4,2):3 (4,4):4 (5,0):1 (5,5):9", "system": "[[{'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'down': 17}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 3, 'down': 5}, {'type': 'white'}], [{'type': 'black', 'down': 3}, {'type': 'black', 'right': 12}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 4}], [{'type': 'black'}, {'type': 'black', 'right': 16}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 4}, {'type': 'white'}], [{'type': 'black', 'down': 1}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'down': 9}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'right': 9}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000594.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 7\\\\ 2][    ][ 3\\\\ 8][    ][ 8\\\\  ][11\\\\ 6][    ]\\n[    ][ 6\\\\ 3][    ][ 3\\\\11][    ][    ][16\\\\  ]\\n[  \\\\ 6][    ][ 9\\\\ 3][    ][ 7\\\\17][    ][    ]\\n[ 4\\\\  ][17\\\\ 9][    ][ 6\\\\ 7][    ][ 7\\\\ 7][    ]\\n[    ][    ][ 2\\\\ 6][    ][ 3\\\\ 7][    ][  \\\\  ]\\n[  \\\\10][    ][    ][ 2\\\\ 3][    ][  \\\\  ][ 1\\\\  ]\\n[  \\\\ 5][    ][  \\\\ 2][    ][  \\\\  ][  \\\\ 1][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 2, vertical run with sum 7\\nBlack cell at (0,2): horizontal run with sum 8, vertical run with sum 3\\nBlack cell at (0,4): vertical run with sum 8\\nBlack cell at (0,5): horizontal run with sum 6, vertical run with sum 11\\nBlack cell at (1,1): horizontal run with sum 3, vertical run with sum 6\\nBlack cell at (1,3): horizontal run with sum 11, vertical run with sum 3\\nBlack cell at (1,6): vertical run with sum 16\\nBlack cell at (2,0): horizontal run with sum 6\\nBlack cell at (2,2): horizontal run with sum 3, vertical run with sum 9\\nBlack cell at (2,4): horizontal run with sum 17, vertical run with sum 7\\nBlack cell at (3,0): vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 9, vertical run with sum 17\\nBlack cell at (3,3): horizontal run with sum 7, vertical run with sum 6\\nBlack cell at (3,5): horizontal run with sum 7, vertical run with sum 7\\nBlack cell at (4,2): horizontal run with sum 6, vertical run with sum 2\\nBlack cell at (4,4): horizontal run with sum 7, vertical run with sum 3\\nBlack cell at (5,0): horizontal run with sum 10\\nBlack cell at (5,3): horizontal run with sum 3, vertical run with sum 2\\nBlack cell at (5,6): vertical run with sum 1\\nBlack cell at (6,0): horizontal run with sum 5\\nBlack cell at (6,2): horizontal run with sum 2\\nBlack cell at (6,5): horizontal run with sum 1\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (0,6), (1,0), (1,2), (1,4), (1,5), (2,1), (2,3), (2,5), (2,6), (3,2), (3,4), (3,6), (4,0), (4,1), (4,3), (4,5), (5,1), (5,2), (5,4), (6,1), (6,3), (6,6)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):2 (0,3):8 (0,6):6 (1,0):7 (1,2):3 (1,4):8 (1,5):3 (2,1):6 (2,3):3 (2,5):8 (2,6):9 (3,2):9 (3,4):7 (3,6):7 (4,0):4 (4,1):4 (4,3):6 (4,5):7 (5,1):8 (5,2):2 (5,4):3 (6,1):5 (6,3):2 (6,6):1", "system": "[[{'type': 'black', 'right': 2, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 8, 'down': 3}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 6, 'down': 11}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 3, 'down': 6}, {'type': 'white'}, {'type': 'black', 'right': 11, 'down': 3}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 16}], [{'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 17, 'down': 7}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'down': 4}, {'type': 'black', 'right': 9, 'down': 17}, {'type': 'white'}, {'type': 'black', 'right': 7, 'down': 6}, {'type': 'white'}, {'type': 'black', 'right': 7, 'down': 7}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 2}, {'type': 'white'}, {'type': 'black', 'right': 7, 'down': 3}, {'type': 'white'}, {'type': 'black'}], [{'type': 'black', 'right': 10}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 2}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'down': 1}], [{'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 2}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 1}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000595.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 5\\\\  ][ 8\\\\ 9][    ][ 3\\\\ 6][    ][  \\\\ 2][    ]\\n[    ][    ][  \\\\ 3][    ][ 1\\\\  ][ 6\\\\ 1][    ]\\n[ 2\\\\ 5][    ][ 1\\\\  ][ 8\\\\ 7][    ][    ][ 7\\\\  ]\\n[    ][ 5\\\\ 4][    ][    ][13\\\\  ][ 8\\\\ 7][    ]\\n[ 1\\\\ 5][    ][ 7\\\\20][    ][    ][    ][ 6\\\\  ]\\n[    ][ 7\\\\ 7][    ][ 5\\\\ 6][    ][ 2\\\\ 6][    ]\\n[  \\\\ 7][    ][  \\\\ 5][    ][  \\\\ 2][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 5\\nBlack cell at (0,1): horizontal run with sum 9, vertical run with sum 8\\nBlack cell at (0,3): horizontal run with sum 6, vertical run with sum 3\\nBlack cell at (0,5): horizontal run with sum 2\\nBlack cell at (1,2): horizontal run with sum 3\\nBlack cell at (1,4): vertical run with sum 1\\nBlack cell at (1,5): horizontal run with sum 1, vertical run with sum 6\\nBlack cell at (2,0): horizontal run with sum 5, vertical run with sum 2\\nBlack cell at (2,2): vertical run with sum 1\\nBlack cell at (2,3): horizontal run with sum 7, vertical run with sum 8\\nBlack cell at (2,6): vertical run with sum 7\\nBlack cell at (3,1): horizontal run with sum 4, vertical run with sum 5\\nBlack cell at (3,4): vertical run with sum 13\\nBlack cell at (3,5): horizontal run with sum 7, vertical run with sum 8\\nBlack cell at (4,0): horizontal run with sum 5, vertical run with sum 1\\nBlack cell at (4,2): horizontal run with sum 20, vertical run with sum 7\\nBlack cell at (4,6): vertical run with sum 6\\nBlack cell at (5,1): horizontal run with sum 7, vertical run with sum 7\\nBlack cell at (5,3): horizontal run with sum 6, vertical run with sum 5\\nBlack cell at (5,5): horizontal run with sum 6, vertical run with sum 2\\nBlack cell at (6,0): horizontal run with sum 7\\nBlack cell at (6,2): horizontal run with sum 5\\nBlack cell at (6,4): horizontal run with sum 2\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,2), (0,4), (0,6), (1,0), (1,1), (1,3), (1,6), (2,1), (2,4), (2,5), (3,0), (3,2), (3,3), (3,6), (4,1), (4,3), (4,4), (4,5), (5,0), (5,2), (5,4), (5,6), (6,1), (6,3), (6,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,2):9 (0,4):6 (0,6):2 (1,0):5 (1,1):3 (1,3):3 (1,6):1 (2,1):5 (2,4):1 (2,5):6 (3,0):2 (3,2):1 (3,3):3 (3,6):7 (4,1):5 (4,3):5 (4,4):7 (4,5):8 (5,0):1 (5,2):7 (5,4):6 (5,6):6 (6,1):7 (6,3):5 (6,5):2", "system": "[[{'type': 'black', 'down': 5}, {'type': 'black', 'right': 9, 'down': 8}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 2}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'down': 1}, {'type': 'black', 'right': 1, 'down': 6}, {'type': 'white'}], [{'type': 'black', 'right': 5, 'down': 2}, {'type': 'white'}, {'type': 'black', 'down': 1}, {'type': 'black', 'right': 7, 'down': 8}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'white'}, {'type': 'black', 'right': 4, 'down': 5}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 13}, {'type': 'black', 'right': 7, 'down': 8}, {'type': 'white'}], [{'type': 'black', 'right': 5, 'down': 1}, {'type': 'white'}, {'type': 'black', 'right': 20, 'down': 7}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 6}], [{'type': 'white'}, {'type': 'black', 'right': 7, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 5}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 2}, {'type': 'white'}], [{'type': 'black', 'right': 7}, {'type': 'white'}, {'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 2}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000596.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 7\\\\ 2][    ][ 9\\\\  ][ 8\\\\ 2][    ][  \\\\  ][ 6\\\\  ]\\n[    ][ 9\\\\12][    ][    ][13\\\\  ][ 4\\\\ 6][    ]\\n[ 4\\\\ 9][    ][ 3\\\\17][    ][    ][    ][12\\\\  ]\\n[    ][ 4\\\\ 3][    ][ 8\\\\ 5][    ][  \\\\ 9][    ]\\n[ 3\\\\ 4][    ][  \\\\ 6][    ][ 8\\\\  ][ 5\\\\ 3][    ]\\n[    ][  \\\\  ][ 3\\\\ 8][    ][    ][    ][ 5\\\\  ]\\n[  \\\\  ][  \\\\ 3][    ][  \\\\ 7][    ][  \\\\ 5][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 2, vertical run with sum 7\\nBlack cell at (0,2): vertical run with sum 9\\nBlack cell at (0,3): horizontal run with sum 2, vertical run with sum 8\\nBlack cell at (0,6): vertical run with sum 6\\nBlack cell at (1,1): horizontal run with sum 12, vertical run with sum 9\\nBlack cell at (1,4): vertical run with sum 13\\nBlack cell at (1,5): horizontal run with sum 6, vertical run with sum 4\\nBlack cell at (2,0): horizontal run with sum 9, vertical run with sum 4\\nBlack cell at (2,2): horizontal run with sum 17, vertical run with sum 3\\nBlack cell at (2,6): vertical run with sum 12\\nBlack cell at (3,1): horizontal run with sum 3, vertical run with sum 4\\nBlack cell at (3,3): horizontal run with sum 5, vertical run with sum 8\\nBlack cell at (3,5): horizontal run with sum 9\\nBlack cell at (4,0): horizontal run with sum 4, vertical run with sum 3\\nBlack cell at (4,2): horizontal run with sum 6\\nBlack cell at (4,4): vertical run with sum 8\\nBlack cell at (4,5): horizontal run with sum 3, vertical run with sum 5\\nBlack cell at (5,2): horizontal run with sum 8, vertical run with sum 3\\nBlack cell at (5,6): vertical run with sum 5\\nBlack cell at (6,1): horizontal run with sum 3\\nBlack cell at (6,3): horizontal run with sum 7\\nBlack cell at (6,5): horizontal run with sum 5\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,4), (1,0), (1,2), (1,3), (1,6), (2,1), (2,3), (2,4), (2,5), (3,0), (3,2), (3,4), (3,6), (4,1), (4,3), (4,6), (5,0), (5,3), (5,4), (5,5), (6,2), (6,4), (6,6)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):2 (0,4):2 (1,0):7 (1,2):9 (1,3):3 (1,6):6 (2,1):9 (2,3):5 (2,4):8 (2,5):4 (3,0):4 (3,2):3 (3,4):5 (3,6):9 (4,1):4 (4,3):6 (4,6):3 (5,0):3 (5,3):2 (5,4):1 (5,5):5 (6,2):3 (6,4):7 (6,6):5", "system": "[[{'type': 'black', 'right': 2, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 9}, {'type': 'black', 'right': 2, 'down': 8}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'down': 6}], [{'type': 'white'}, {'type': 'black', 'right': 12, 'down': 9}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 13}, {'type': 'black', 'right': 6, 'down': 4}, {'type': 'white'}], [{'type': 'black', 'right': 9, 'down': 4}, {'type': 'white'}, {'type': 'black', 'right': 17, 'down': 3}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 12}], [{'type': 'white'}, {'type': 'black', 'right': 3, 'down': 4}, {'type': 'white'}, {'type': 'black', 'right': 5, 'down': 8}, {'type': 'white'}, {'type': 'black', 'right': 9}, {'type': 'white'}], [{'type': 'black', 'right': 4, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black', 'right': 3, 'down': 5}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 8, 'down': 3}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 5}], [{'type': 'black'}, {'type': 'black', 'right': 3}, {'type': 'white'}, {'type': 'black', 'right': 7}, {'type': 'white'}, {'type': 'black', 'right': 5}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000597.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 3\\\\  ][ 6\\\\  ][  \\\\ 5][    ][13\\\\ 6][    ][ 7\\\\  ]\\n[    ][    ][ 7\\\\10][    ][    ][10\\\\ 7][    ]\\n[ 6\\\\ 9][    ][    ][ 5\\\\13][    ][    ][ 2\\\\  ]\\n[    ][ 3\\\\  ][13\\\\ 5][    ][  \\\\ 6][    ][    ]\\n[ 2\\\\ 7][    ][    ][15\\\\  ][  \\\\  ][  \\\\  ][ 7\\\\  ]\\n[    ][ 5\\\\17][    ][    ][ 2\\\\  ][ 6\\\\ 7][    ]\\n[  \\\\ 5][    ][  \\\\15][    ][    ][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): vertical run with sum 3\\nBlack cell at (0,1): vertical run with sum 6\\nBlack cell at (0,2): horizontal run with sum 5\\nBlack cell at (0,4): horizontal run with sum 6, vertical run with sum 13\\nBlack cell at (0,6): vertical run with sum 7\\nBlack cell at (1,2): horizontal run with sum 10, vertical run with sum 7\\nBlack cell at (1,5): horizontal run with sum 7, vertical run with sum 10\\nBlack cell at (2,0): horizontal run with sum 9, vertical run with sum 6\\nBlack cell at (2,3): horizontal run with sum 13, vertical run with sum 5\\nBlack cell at (2,6): vertical run with sum 2\\nBlack cell at (3,1): vertical run with sum 3\\nBlack cell at (3,2): horizontal run with sum 5, vertical run with sum 13\\nBlack cell at (3,4): horizontal run with sum 6\\nBlack cell at (4,0): horizontal run with sum 7, vertical run with sum 2\\nBlack cell at (4,3): vertical run with sum 15\\nBlack cell at (4,6): vertical run with sum 7\\nBlack cell at (5,1): horizontal run with sum 17, vertical run with sum 5\\nBlack cell at (5,4): vertical run with sum 2\\nBlack cell at (5,5): horizontal run with sum 7, vertical run with sum 6\\nBlack cell at (6,0): horizontal run with sum 5\\nBlack cell at (6,2): horizontal run with sum 15\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,3), (0,5), (1,0), (1,1), (1,3), (1,4), (1,6), (2,1), (2,2), (2,4), (2,5), (3,0), (3,3), (3,5), (3,6), (4,1), (4,2), (5,0), (5,2), (5,3), (5,6), (6,1), (6,3), (6,4), (6,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,3):5 (0,5):6 (1,0):3 (1,1):4 (1,3):4 (1,4):6 (1,6):7 (2,1):2 (2,2):7 (2,4):7 (2,5):6 (3,0):6 (3,3):5 (3,5):4 (3,6):2 (4,1):3 (4,2):4 (5,0):2 (5,2):9 (5,3):8 (5,6):7 (6,1):5 (6,3):7 (6,4):2 (6,5):6", "system": "[[{'type': 'black', 'down': 3}, {'type': 'black', 'down': 6}, {'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 13}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 10, 'down': 7}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 7, 'down': 10}, {'type': 'white'}], [{'type': 'black', 'right': 9, 'down': 6}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 13, 'down': 5}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 2}], [{'type': 'white'}, {'type': 'black', 'down': 3}, {'type': 'black', 'right': 5, 'down': 13}, {'type': 'white'}, {'type': 'black', 'right': 6}, {'type': 'white'}, {'type': 'white'}], [{'type': 'black', 'right': 7, 'down': 2}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 15}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'down': 7}], [{'type': 'white'}, {'type': 'black', 'right': 17, 'down': 5}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'down': 2}, {'type': 'black', 'right': 7, 'down': 6}, {'type': 'white'}], [{'type': 'black', 'right': 5}, {'type': 'white'}, {'type': 'black', 'right': 15}, {'type': 'white'}, {'type': 'white'}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000598.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[  \\\\ 4][    ][18\\\\ 5][    ][ 7\\\\ 1][    ][ 7\\\\  ]\\n[ 9\\\\ 6][    ][    ][  \\\\ 4][    ][  \\\\ 7][    ]\\n[    ][  \\\\ 8][    ][ 7\\\\ 3][    ][ 2\\\\  ][ 9\\\\  ]\\n[ 4\\\\  ][ 3\\\\ 7][    ][    ][  \\\\11][    ][    ]\\n[    ][    ][ 7\\\\ 6][    ][ 2\\\\  ][  \\\\  ][ 6\\\\  ]\\n[ 4\\\\  ][ 8\\\\ 7][    ][ 9\\\\ 2][    ][  \\\\ 1][    ]\\n[    ][    ][  \\\\ 9][    ][  \\\\  ][  \\\\ 5][    ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 4\\nBlack cell at (0,2): horizontal run with sum 5, vertical run with sum 18\\nBlack cell at (0,4): horizontal run with sum 1, vertical run with sum 7\\nBlack cell at (0,6): vertical run with sum 7\\nBlack cell at (1,0): horizontal run with sum 6, vertical run with sum 9\\nBlack cell at (1,3): horizontal run with sum 4\\nBlack cell at (1,5): horizontal run with sum 7\\nBlack cell at (2,1): horizontal run with sum 8\\nBlack cell at (2,3): horizontal run with sum 3, vertical run with sum 7\\nBlack cell at (2,5): vertical run with sum 2\\nBlack cell at (2,6): vertical run with sum 9\\nBlack cell at (3,0): vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 7, vertical run with sum 3\\nBlack cell at (3,4): horizontal run with sum 11\\nBlack cell at (4,2): horizontal run with sum 6, vertical run with sum 7\\nBlack cell at (4,4): vertical run with sum 2\\nBlack cell at (4,6): vertical run with sum 6\\nBlack cell at (5,0): vertical run with sum 4\\nBlack cell at (5,1): horizontal run with sum 7, vertical run with sum 8\\nBlack cell at (5,3): horizontal run with sum 2, vertical run with sum 9\\nBlack cell at (5,5): horizontal run with sum 1\\nBlack cell at (6,2): horizontal run with sum 9\\nBlack cell at (6,5): horizontal run with sum 5\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (0,5), (1,1), (1,2), (1,4), (1,6), (2,0), (2,2), (2,4), (3,2), (3,3), (3,5), (3,6), (4,0), (4,1), (4,3), (5,2), (5,4), (5,6), (6,0), (6,1), (6,3), (6,6)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):4 (0,3):5 (0,5):1 (1,1):2 (1,2):4 (1,4):4 (1,6):7 (2,0):9 (2,2):8 (2,4):3 (3,2):6 (3,3):1 (3,5):2 (3,6):9 (4,0):4 (4,1):3 (4,3):6 (5,2):7 (5,4):2 (5,6):1 (6,0):4 (6,1):8 (6,3):9 (6,6):5", "system": "[[{'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'right': 5, 'down': 18}, {'type': 'white'}, {'type': 'black', 'right': 1, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 7}], [{'type': 'black', 'right': 6, 'down': 9}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 4}, {'type': 'white'}, {'type': 'black', 'right': 7}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 8}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 2}, {'type': 'black', 'down': 9}], [{'type': 'black', 'down': 4}, {'type': 'black', 'right': 7, 'down': 3}, {'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 11}, {'type': 'white'}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 7}, {'type': 'white'}, {'type': 'black', 'down': 2}, {'type': 'black'}, {'type': 'black', 'down': 6}], [{'type': 'black', 'down': 4}, {'type': 'black', 'right': 7, 'down': 8}, {'type': 'white'}, {'type': 'black', 'right': 2, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 1}, {'type': 'white'}], [{'type': 'white'}, {'type': 'white'}, {'type': 'black', 'right': 9}, {'type': 'white'}, {'type': 'black'}, {'type': 'black', 'right': 5}, {'type': 'white'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000599.png", "question": "# Kakuro Puzzle\\n\\n## Grid Representation\\nBelow is a text representation of the Kakuro grid:\\n- Black cells show clues as [down\\\\right]\\n- White cells are shown as [    ] and need to be filled\\n\\n## Initial State\\n[ 7\\\\ 8][    ][ 7\\\\ 2][    ][ 6\\\\ 4][    ][  \\\\  ]\\n[    ][ 7\\\\ 7][    ][ 8\\\\ 6][    ][ 8\\\\  ][ 7\\\\  ]\\n[ 4\\\\ 7][    ][ 3\\\\ 8][    ][ 4\\\\11][    ][    ]\\n[    ][ 9\\\\ 3][    ][ 3\\\\ 4][    ][ 6\\\\ 4][    ]\\n[ 3\\\\ 9][    ][ 9\\\\ 3][    ][ 1\\\\ 6][    ][ 5\\\\  ]\\n[    ][ 1\\\\ 9][    ][  \\\\ 1][    ][ 8\\\\ 5][    ]\\n[  \\\\ 1][    ][  \\\\  ][  \\\\  ][  \\\\ 8][    ][  \\\\  ]\\n## Clues\\nBlack cell at (0,0): horizontal run with sum 8, vertical run with sum 7\\nBlack cell at (0,2): horizontal run with sum 2, vertical run with sum 7\\nBlack cell at (0,4): horizontal run with sum 4, vertical run with sum 6\\nBlack cell at (1,1): horizontal run with sum 7, vertical run with sum 7\\nBlack cell at (1,3): horizontal run with sum 6, vertical run with sum 8\\nBlack cell at (1,5): vertical run with sum 8\\nBlack cell at (1,6): vertical run with sum 7\\nBlack cell at (2,0): horizontal run with sum 7, vertical run with sum 4\\nBlack cell at (2,2): horizontal run with sum 8, vertical run with sum 3\\nBlack cell at (2,4): horizontal run with sum 11, vertical run with sum 4\\nBlack cell at (3,1): horizontal run with sum 3, vertical run with sum 9\\nBlack cell at (3,3): horizontal run with sum 4, vertical run with sum 3\\nBlack cell at (3,5): horizontal run with sum 4, vertical run with sum 6\\nBlack cell at (4,0): horizontal run with sum 9, vertical run with sum 3\\nBlack cell at (4,2): horizontal run with sum 3, vertical run with sum 9\\nBlack cell at (4,4): horizontal run with sum 6, vertical run with sum 1\\nBlack cell at (4,6): vertical run with sum 5\\nBlack cell at (5,1): horizontal run with sum 9, vertical run with sum 1\\nBlack cell at (5,3): horizontal run with sum 1\\nBlack cell at (5,5): horizontal run with sum 5, vertical run with sum 8\\nBlack cell at (6,0): horizontal run with sum 1\\nBlack cell at (6,4): horizontal run with sum 8\\n\\n## White Cells to Fill\\nThe following cells need to be filled with digits 1-9:\\n(0,1), (0,3), (0,5), (1,0), (1,2), (1,4), (2,1), (2,3), (2,5), (2,6), (3,0), (3,2), (3,4), (3,6), (4,1), (4,3), (4,5), (5,0), (5,2), (5,4), (5,6), (6,1), (6,5)\\n\\n## Game Rules\\n1. Each white cell must contain a digit from 1 to 9.\\n2. Digits in the same row or column run cannot repeat.\\n3. The sum of digits in each run must equal the clue number shown in the black cell.\\n4. A clue number above the diagonal line refers to a vertical run (down).\\n5. A clue number below the diagonal line refers to a horizontal run (right).\\n\\n## Output Format\\nProvide your answer as a space-separated list of coordinate-value pairs in the format:\\n'(row,column):value', e.g., '(0,2):5 (0,7):7 ...'\\n- Coordinates start at (0,0) in the top-left corner\\n- Rows increase downward, columns increase to the right\\n- List all white cells in your answer\\n## Example: \\n(0,2):5 (0,7):7\\n\\n", "answer": "(0,1):8 (0,3):2 (0,5):4 (1,0):7 (1,2):7 (1,4):6 (2,1):7 (2,3):8 (2,5):8 (2,6):3 (3,0):4 (3,2):3 (3,4):4 (3,6):4 (4,1):9 (4,3):3 (4,5):6 (5,0):3 (5,2):9 (5,4):1 (5,6):5 (6,1):1 (6,5):8", "system": "[[{'type': 'black', 'right': 8, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 2, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 6}, {'type': 'white'}, {'type': 'black'}], [{'type': 'white'}, {'type': 'black', 'right': 7, 'down': 7}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 8}, {'type': 'white'}, {'type': 'black', 'down': 8}, {'type': 'black', 'down': 7}], [{'type': 'black', 'right': 7, 'down': 4}, {'type': 'white'}, {'type': 'black', 'right': 8, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 11, 'down': 4}, {'type': 'white'}, {'type': 'white'}], [{'type': 'white'}, {'type': 'black', 'right': 3, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 4, 'down': 6}, {'type': 'white'}], [{'type': 'black', 'right': 9, 'down': 3}, {'type': 'white'}, {'type': 'black', 'right': 3, 'down': 9}, {'type': 'white'}, {'type': 'black', 'right': 6, 'down': 1}, {'type': 'white'}, {'type': 'black', 'down': 5}], [{'type': 'white'}, {'type': 'black', 'right': 9, 'down': 1}, {'type': 'white'}, {'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black', 'right': 5, 'down': 8}, {'type': 'white'}], [{'type': 'black', 'right': 1}, {'type': 'white'}, {'type': 'black'}, {'type': 'black'}, {'type': 'black', 'right': 8}, {'type': 'white'}, {'type': 'black'}]]", "category": "kakuro", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kakuro_evaluator'}"}}
{"image": "images/000600.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 6\\nRow 2: 3\\nRow 3: 5\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 3\\nColumn 2: 6\\nColumn 3: 4\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 1], [1, 1, 0], [0, 1, 1]]", "system": "{'row_sums': [6, 3, 5], 'col_sums': [3, 6, 4], 'size': 3, 'solution': [[1, 1, 1], [1, 1, 0], [0, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000601.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 5\\nRow 2: 3\\nRow 3: 1\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 3\\nColumn 2: 1\\nColumn 3: 3\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1], [0, 0, 1], [1, 0, 0]]", "system": "{'row_sums': [5, 3, 1], 'col_sums': [3, 1, 3], 'size': 3, 'solution': [[0, 1, 1], [0, 0, 1], [1, 0, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000602.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 5\\nRow 2: 3\\nRow 3: 6\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 5\\nColumn 2: 6\\nColumn 3: 4\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1], [1, 1, 0], [1, 1, 1]]", "system": "{'row_sums': [5, 3, 6], 'col_sums': [5, 6, 4], 'size': 3, 'solution': [[0, 1, 1], [1, 1, 0], [1, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000603.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 5\\nRow 2: 5\\nRow 3: 4\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 3\\nColumn 2: 3\\nColumn 3: 6\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1], [0, 1, 1], [1, 0, 1]]", "system": "{'row_sums': [5, 5, 4], 'col_sums': [3, 3, 6], 'size': 3, 'solution': [[0, 1, 1], [0, 1, 1], [1, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000604.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 3\\nRow 2: 6\\nRow 3: 3\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 5\\nColumn 2: 5\\nColumn 3: 3\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1], [1, 1, 1], [1, 1, 0]]", "system": "{'row_sums': [3, 6, 3], 'col_sums': [5, 5, 3], 'size': 3, 'solution': [[0, 0, 1], [1, 1, 1], [1, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000605.png", "question": "This is a 3x3 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 3) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 3) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 5\\nRow 2: 6\\nRow 3: 3\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 2\\nColumn 2: 3\\nColumn 3: 6\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1], [1, 1, 1], [0, 0, 1]]", "system": "{'row_sums': [5, 6, 3], 'col_sums': [2, 3, 6], 'size': 3, 'solution': [[0, 1, 1], [1, 1, 1], [0, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000606.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 3\\nRow 2: 6\\nRow 3: 9\\nRow 4: 7\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 3\\nColumn 2: 6\\nColumn 3: 9\\nColumn 4: 7\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]]", "system": "{'row_sums': [3, 6, 9, 7], 'col_sums': [3, 6, 9, 7], 'size': 4, 'solution': [[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000607.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 9\\nRow 2: 5\\nRow 3: 3\\nRow 4: 6\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 4\\nColumn 2: 7\\nColumn 3: 10\\nColumn 4: 1\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1, 1], [0, 1, 1, 0], [0, 0, 1, 0], [1, 1, 1, 0]]", "system": "{'row_sums': [9, 5, 3, 6], 'col_sums': [4, 7, 10, 1], 'size': 4, 'solution': [[0, 1, 1, 1], [0, 1, 1, 0], [0, 0, 1, 0], [1, 1, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000608.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 3\\nRow 2: 8\\nRow 3: 2\\nRow 4: 7\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 6\\nColumn 2: 7\\nColumn 3: 3\\nColumn 4: 6\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1, 0], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 0, 1]]", "system": "{'row_sums': [3, 8, 2, 7], 'col_sums': [6, 7, 3, 6], 'size': 4, 'solution': [[0, 0, 1, 0], [1, 0, 1, 1], [0, 1, 0, 0], [1, 1, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000609.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 4\\nRow 2: 3\\nRow 3: 2\\nRow 4: 4\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 6\\nColumn 2: 5\\nColumn 3: 4\\nColumn 4: 1\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 0, 1], [1, 1, 0, 0], [0, 1, 0, 0], [1, 0, 1, 0]]", "system": "{'row_sums': [4, 3, 2, 4], 'col_sums': [6, 5, 4, 1], 'size': 4, 'solution': [[0, 0, 0, 1], [1, 1, 0, 0], [0, 1, 0, 0], [1, 0, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000610.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 10\\nRow 2: 1\\nRow 3: 4\\nRow 4: 3\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 6\\nColumn 2: 1\\nColumn 3: 8\\nColumn 4: 1\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0], [0, 0, 1, 0]]", "system": "{'row_sums': [10, 1, 4, 3], 'col_sums': [6, 1, 8, 1], 'size': 4, 'solution': [[1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 1, 0], [0, 0, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000611.png", "question": "This is a 4x4 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 4) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 4) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 9\\nRow 2: 9\\nRow 3: 3\\nRow 4: 4\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 3\\nColumn 2: 6\\nColumn 3: 3\\nColumn 4: 7\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 0], [0, 0, 0, 1]]", "system": "{'row_sums': [9, 9, 3, 4], 'col_sums': [3, 6, 3, 7], 'size': 4, 'solution': [[0, 1, 1, 1], [0, 1, 1, 1], [1, 1, 0, 0], [0, 0, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000612.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 5\\nRow 2: 9\\nRow 3: 4\\nRow 4: 5\\nRow 5: 15\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 7\\nColumn 2: 5\\nColumn 3: 7\\nColumn 4: 8\\nColumn 5: 12\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 0, 0, 1], [1, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1]]", "system": "{'row_sums': [5, 9, 4, 5, 15], 'col_sums': [7, 5, 7, 8, 12], 'size': 5, 'solution': [[0, 0, 0, 0, 1], [1, 0, 1, 0, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [1, 1, 1, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000613.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 9\\nRow 2: 11\\nRow 3: 3\\nRow 4: 4\\nRow 5: 1\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 12\\nColumn 2: 5\\nColumn 3: 4\\nColumn 4: 3\\nColumn 5: 3\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 0, 1, 1], [0, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0]]", "system": "{'row_sums': [9, 11, 3, 4, 1], 'col_sums': [12, 5, 4, 3, 3], 'size': 5, 'solution': [[0, 0, 0, 1, 1], [0, 1, 0, 1, 1], [1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000614.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 12\\nRow 2: 3\\nRow 3: 11\\nRow 4: 9\\nRow 5: 7\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 4\\nColumn 2: 9\\nColumn 3: 5\\nColumn 4: 5\\nColumn 5: 13\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 0, 1, 1], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 1]]", "system": "{'row_sums': [12, 3, 11, 9, 7], 'col_sums': [4, 9, 5, 5, 13], 'size': 5, 'solution': [[1, 1, 0, 1, 1], [0, 0, 1, 0, 0], [1, 1, 1, 0, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000615.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 8\\nRow 2: 2\\nRow 3: 4\\nRow 4: 10\\nRow 5: 14\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 4\\nColumn 2: 11\\nColumn 3: 13\\nColumn 4: 6\\nColumn 5: 9\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 1, 1, 1, 1]]", "system": "{'row_sums': [8, 2, 4, 10, 14], 'col_sums': [4, 11, 13, 6, 9], 'size': 5, 'solution': [[1, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 1], [0, 1, 1, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000616.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 14\\nRow 2: 4\\nRow 3: 6\\nRow 4: 5\\nRow 5: 8\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 10\\nColumn 2: 1\\nColumn 3: 8\\nColumn 4: 6\\nColumn 5: 8\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1, 1, 1], [1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 0, 1, 1, 0]]", "system": "{'row_sums': [14, 4, 6, 5, 8], 'col_sums': [10, 1, 8, 6, 8], 'size': 5, 'solution': [[0, 1, 1, 1, 1], [1, 0, 1, 0, 0], [1, 0, 0, 0, 1], [0, 0, 0, 0, 1], [1, 0, 1, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000617.png", "question": "This is a 5x5 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 5) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 5) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 9\\nRow 2: 11\\nRow 3: 5\\nRow 4: 8\\nRow 5: 10\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 10\\nColumn 2: 9\\nColumn 3: 4\\nColumn 4: 7\\nColumn 5: 12\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 0, 1, 0, 1], [0, 1, 0, 1, 1], [0, 1, 1, 0, 0], [1, 1, 0, 0, 1], [1, 0, 0, 1, 1]]", "system": "{'row_sums': [9, 11, 5, 8, 10], 'col_sums': [10, 9, 4, 7, 12], 'size': 5, 'solution': [[1, 0, 1, 0, 1], [0, 1, 0, 1, 1], [0, 1, 1, 0, 0], [1, 1, 0, 0, 1], [1, 0, 0, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000618.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 13\\nRow 2: 14\\nRow 3: 16\\nRow 4: 2\\nRow 5: 12\\nRow 6: 10\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 11\\nColumn 2: 13\\nColumn 3: 17\\nColumn 4: 17\\nColumn 5: 5\\nColumn 6: 6\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0]]", "system": "{'row_sums': [13, 14, 16, 2, 12, 10], 'col_sums': [11, 13, 17, 17, 5, 6], 'size': 6, 'solution': [[0, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1], [1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000619.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 6\\nRow 2: 11\\nRow 3: 13\\nRow 4: 11\\nRow 5: 8\\nRow 6: 12\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 11\\nColumn 2: 15\\nColumn 3: 9\\nColumn 4: 9\\nColumn 5: 7\\nColumn 6: 14\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1]]", "system": "{'row_sums': [6, 11, 13, 11, 8, 12], 'col_sums': [11, 15, 9, 9, 7, 14], 'size': 6, 'solution': [[0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000620.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 19\\nRow 2: 10\\nRow 3: 14\\nRow 4: 3\\nRow 5: 10\\nRow 6: 2\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 1\\nColumn 2: 14\\nColumn 3: 13\\nColumn 4: 6\\nColumn 5: 9\\nColumn 6: 3\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0]]", "system": "{'row_sums': [19, 10, 14, 3, 10, 2], 'col_sums': [1, 14, 13, 6, 9, 3], 'size': 6, 'solution': [[1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0], [0, 0, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000621.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 7\\nRow 2: 10\\nRow 3: 9\\nRow 4: 10\\nRow 5: 11\\nRow 6: 13\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 15\\nColumn 2: 12\\nColumn 3: 13\\nColumn 4: 16\\nColumn 5: 11\\nColumn 6: 5\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0]]", "system": "{'row_sums': [7, 10, 9, 10, 11, 13], 'col_sums': [15, 12, 13, 16, 11, 5], 'size': 6, 'solution': [[0, 0, 1, 1, 0, 0], [1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0], [0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000622.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 8\\nRow 2: 18\\nRow 3: 17\\nRow 4: 18\\nRow 5: 8\\nRow 6: 11\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 5\\nColumn 2: 18\\nColumn 3: 9\\nColumn 4: 10\\nColumn 5: 9\\nColumn 6: 20\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1]]", "system": "{'row_sums': [8, 18, 17, 18, 8, 11], 'col_sums': [5, 18, 9, 10, 9, 20], 'size': 6, 'solution': [[1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000623.png", "question": "This is a 6x6 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 6) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 6) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 11\\nRow 2: 13\\nRow 3: 8\\nRow 4: 20\\nRow 5: 10\\nRow 6: 17\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 2\\nColumn 2: 13\\nColumn 3: 8\\nColumn 4: 17\\nColumn 5: 13\\nColumn 6: 18\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1]]", "system": "{'row_sums': [11, 13, 8, 20, 10, 17], 'col_sums': [2, 13, 8, 17, 13, 18], 'size': 6, 'solution': [[0, 1, 1, 0, 0, 1], [1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000624.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 16\\nRow 2: 9\\nRow 3: 12\\nRow 4: 10\\nRow 5: 23\\nRow 6: 4\\nRow 7: 10\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 25\\nColumn 2: 10\\nColumn 3: 28\\nColumn 4: 13\\nColumn 5: 5\\nColumn 6: 13\\nColumn 7: 5\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0]]", "system": "{'row_sums': [16, 9, 12, 10, 23, 4, 10], 'col_sums': [25, 10, 28, 13, 5, 13, 5], 'size': 7, 'solution': [[1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 1, 1], [1, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000625.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 8\\nRow 2: 14\\nRow 3: 11\\nRow 4: 13\\nRow 5: 12\\nRow 6: 16\\nRow 7: 16\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 11\\nColumn 2: 11\\nColumn 3: 14\\nColumn 4: 16\\nColumn 5: 16\\nColumn 6: 5\\nColumn 7: 20\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1]]", "system": "{'row_sums': [8, 14, 11, 13, 12, 16, 16], 'col_sums': [11, 11, 14, 16, 16, 5, 20], 'size': 7, 'solution': [[0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000626.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 19\\nRow 2: 11\\nRow 3: 25\\nRow 4: 9\\nRow 5: 16\\nRow 6: 16\\nRow 7: 4\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 15\\nColumn 2: 15\\nColumn 3: 7\\nColumn 4: 17\\nColumn 5: 16\\nColumn 6: 19\\nColumn 7: 4\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0]]", "system": "{'row_sums': [19, 11, 25, 9, 16, 16, 4], 'col_sums': [15, 15, 7, 17, 16, 19, 4], 'size': 7, 'solution': [[0, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 0, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000627.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 3\\nRow 2: 19\\nRow 3: 10\\nRow 4: 14\\nRow 5: 26\\nRow 6: 9\\nRow 7: 13\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 15\\nColumn 2: 9\\nColumn 3: 12\\nColumn 4: 11\\nColumn 5: 5\\nColumn 6: 23\\nColumn 7: 18\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1]]", "system": "{'row_sums': [3, 19, 10, 14, 26, 9, 13], 'col_sums': [15, 9, 12, 11, 5, 23, 18], 'size': 7, 'solution': [[1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 1, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000628.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 6\\nRow 2: 25\\nRow 3: 22\\nRow 4: 16\\nRow 5: 8\\nRow 6: 7\\nRow 7: 14\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 14\\nColumn 2: 7\\nColumn 3: 25\\nColumn 4: 18\\nColumn 5: 12\\nColumn 6: 16\\nColumn 7: 5\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0]]", "system": "{'row_sums': [6, 25, 22, 16, 8, 7, 14], 'col_sums': [14, 7, 25, 18, 12, 16, 5], 'size': 7, 'solution': [[0, 1, 0, 1, 0, 0, 0], [1, 1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1], [1, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 1, 1, 0]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000629.png", "question": "This is a 7x7 Kukurasu puzzle. You need to fill the grid with black cells according to the following rules:\\n1. The sum of column positions (1 to 7) of black cells in each row must equal the number on the right.\\n2. The sum of row positions (1 to 7) of black cells in each column must equal the number at the bottom.\\n\\nRow 1: 10\\nRow 2: 20\\nRow 3: 9\\nRow 4: 18\\nRow 5: 27\\nRow 6: 8\\nRow 7: 15\\n\\nColumn constraints (sum of row positions of black cells in each column):\\nColumn 1: 18\\nColumn 2: 14\\nColumn 3: 15\\nColumn 4: 13\\nColumn 5: 19\\nColumn 6: 11\\nColumn 7: 19\\n\\nPlease solve the puzzle and provide the solution as a two-dimensional array, using 0 for white cells and 1 for blackcells.\\nExample answer format: [[1, 1, 0], [1, 0, 1], [0, 0, 1]].", "answer": "[[0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1]]", "system": "{'row_sums': [10, 20, 9, 18, 27, 8, 15], 'col_sums': [18, 14, 15, 13, 19, 11, 19], 'size': 7, 'solution': [[0, 0, 1, 0, 0, 0, 1], [1, 1, 0, 1, 0, 1, 1], [1, 0, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 1]]}", "category": "Kukurasu", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'kukurasu_evaluator'}"}}
{"image": "images/000630.png", "question": "Here is a histogram made of bars [20, 7, 6, 6, 18, 17, 4, 1] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "36", "system": "{'heights': [20, 7, 6, 6, 18, 17, 4, 1]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000631.png", "question": "Here is a histogram made of bars [2, 3, 2, 13, 12, 16, 16, 10, 17, 1] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "60", "system": "{'heights': [2, 3, 2, 13, 12, 16, 16, 10, 17, 1]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000632.png", "question": "Here is a histogram made of bars [18, 9, 3, 1, 17, 3, 15, 1, 17, 15] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "30", "system": "{'heights': [18, 9, 3, 1, 17, 3, 15, 1, 17, 15]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000633.png", "question": "Here is a histogram made of bars [19, 11, 17, 9, 5, 8, 3, 5, 2, 17] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "36", "system": "{'heights': [19, 11, 17, 9, 5, 8, 3, 5, 2, 17]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000634.png", "question": "Here is a histogram made of bars [16, 9, 15, 19, 17, 15, 4] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "60", "system": "{'heights': [16, 9, 15, 19, 17, 15, 4]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000635.png", "question": "Here is a histogram made of bars [15, 13, 17, 3, 7] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "39", "system": "{'heights': [15, 13, 17, 3, 7]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000636.png", "question": "Here is a histogram made of bars [20, 26, 6, 35, 38, 35, 14, 37, 28, 11] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "105", "system": "{'heights': [20, 26, 6, 35, 38, 35, 14, 37, 28, 11]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000637.png", "question": "Here is a histogram made of bars [28, 26, 2, 39, 37, 5, 34, 29, 2, 28] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "74", "system": "{'heights': [28, 26, 2, 39, 37, 5, 34, 29, 2, 28]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000638.png", "question": "Here is a histogram made of bars [9, 7, 1, 4, 35, 1, 32, 14, 22, 31, 24, 6, 4, 16, 6] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "70", "system": "{'heights': [9, 7, 1, 4, 35, 1, 32, 14, 22, 31, 24, 6, 4, 16, 6]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000639.png", "question": "Here is a histogram made of bars [19, 9, 4, 28, 30, 23, 7, 13, 8, 18, 10, 4, 5, 36, 33] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "69", "system": "{'heights': [19, 9, 4, 28, 30, 23, 7, 13, 8, 18, 10, 4, 5, 36, 33]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000640.png", "question": "Here is a histogram made of bars [19, 24, 17, 7, 33, 5, 4, 12, 32, 12, 37, 24, 31] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "72", "system": "{'heights': [19, 24, 17, 7, 33, 5, 4, 12, 32, 12, 37, 24, 31]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000641.png", "question": "Here is a histogram made of bars [37, 6, 14, 10, 39, 32, 34, 5, 33, 8, 2, 35] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "96", "system": "{'heights': [37, 6, 14, 10, 39, 32, 34, 5, 33, 8, 2, 35]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000642.png", "question": "Here is a histogram made of bars [41, 51, 23, 51, 59, 42, 46, 47, 31, 18, 34, 41, 4, 43, 22, 41, 35, 13, 22, 55, 56] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "216", "system": "{'heights': [41, 51, 23, 51, 59, 42, 46, 47, 31, 18, 34, 41, 4, 43, 22, 41, 35, 13, 22, 55, 56]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000643.png", "question": "Here is a histogram made of bars [28, 50, 30, 31, 16, 9, 58, 5, 59, 24, 39, 38, 30, 58, 26, 12, 32, 43, 21, 4, 40, 46, 43, 16, 54, 14, 8] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "168", "system": "{'heights': [28, 50, 30, 31, 16, 9, 58, 5, 59, 24, 39, 38, 30, 58, 26, 12, 32, 43, 21, 4, 40, 46, 43, 16, 54, 14, 8]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000644.png", "question": "Here is a histogram made of bars [45, 3, 19, 60, 32, 16, 14, 23, 50, 5, 28, 37, 1, 5, 12, 18, 5, 58, 56, 58, 15, 25, 15, 9] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "168", "system": "{'heights': [45, 3, 19, 60, 32, 16, 14, 23, 50, 5, 28, 37, 1, 5, 12, 18, 5, 58, 56, 58, 15, 25, 15, 9]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000645.png", "question": "Here is a histogram made of bars [52, 38, 21, 39, 47, 56, 52, 11, 16, 40, 28, 16, 58, 11, 26, 29, 39, 14, 36, 20, 15] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "231", "system": "{'heights': [52, 38, 21, 39, 47, 56, 52, 11, 16, 40, 28, 16, 58, 11, 26, 29, 39, 14, 36, 20, 15]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000646.png", "question": "Here is a histogram made of bars [59, 53, 5, 35, 21, 3, 22, 39, 10, 55, 44, 34, 55, 15, 3, 13, 34, 12, 21, 57, 10, 53, 44, 45, 27, 25, 15, 51] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "136", "system": "{'heights': [59, 53, 5, 35, 21, 3, 22, 39, 10, 55, 44, 34, 55, 15, 3, 13, 34, 12, 21, 57, 10, 53, 44, 45, 27, 25, 15, 51]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000647.png", "question": "Here is a histogram made of bars [36, 50, 46, 36, 38, 37, 42, 45, 25, 27, 10, 39, 3, 32, 24, 14, 32, 36, 23, 24, 11, 5, 41, 56, 41, 60, 5, 14] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "288", "system": "{'heights': [36, 50, 46, 36, 38, 37, 42, 45, 25, 27, 10, 39, 3, 32, 24, 14, 32, 36, 23, 24, 11, 5, 41, 56, 41, 60, 5, 14]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000648.png", "question": "Here is a histogram made of bars [26, 36, 75, 16, 67, 7, 49, 35, 19, 55, 33, 60, 43, 1, 11, 45, 8, 47, 30, 12, 51, 47, 10, 28, 60, 50, 15, 5, 36, 25, 45, 40] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "133", "system": "{'heights': [26, 36, 75, 16, 67, 7, 49, 35, 19, 55, 33, 60, 43, 1, 11, 45, 8, 47, 30, 12, 51, 47, 10, 28, 60, 50, 15, 5, 36, 25, 45, 40]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000649.png", "question": "Here is a histogram made of bars [2, 17, 2, 48, 45, 22, 46, 8, 23, 23, 48, 52, 35, 26, 64, 58, 18, 56, 12, 40, 28, 70, 31, 4, 26, 75, 4, 45, 11, 33, 33, 22, 16, 51, 51, 14, 48, 62, 36] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "184", "system": "{'heights': [2, 17, 2, 48, 45, 22, 46, 8, 23, 23, 48, 52, 35, 26, 64, 58, 18, 56, 12, 40, 28, 70, 31, 4, 26, 75, 4, 45, 11, 33, 33, 22, 16, 51, 51, 14, 48, 62, 36]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000650.png", "question": "Here is a histogram made of bars [36, 31, 20, 15, 24, 77, 13, 35, 44, 34, 45, 63, 46, 66, 72, 41, 5, 41, 61, 11, 44, 76, 28, 26, 72, 33, 5, 4, 16, 18, 11, 17, 66, 15, 57, 62, 21, 61] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "306", "system": "{'heights': [36, 31, 20, 15, 24, 77, 13, 35, 44, 34, 45, 63, 46, 66, 72, 41, 5, 41, 61, 11, 44, 76, 28, 26, 72, 33, 5, 4, 16, 18, 11, 17, 66, 15, 57, 62, 21, 61]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000651.png", "question": "Here is a histogram made of bars [75, 55, 76, 55, 22, 39, 69, 2, 48, 36, 14, 29, 11, 36, 26, 4, 12, 21, 77, 79, 58, 53, 74, 37, 59, 68, 65, 10, 38, 69, 75, 19, 47, 63, 43, 79, 21, 18, 66, 6] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "333", "system": "{'heights': [75, 55, 76, 55, 22, 39, 69, 2, 48, 36, 14, 29, 11, 36, 26, 4, 12, 21, 77, 79, 58, 53, 74, 37, 59, 68, 65, 10, 38, 69, 75, 19, 47, 63, 43, 79, 21, 18, 66, 6]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000652.png", "question": "Here is a histogram made of bars [60, 30, 77, 20, 59, 39, 17, 20, 11, 49, 52, 43, 41, 34, 68, 2, 57, 2, 24, 43, 78, 48, 19, 2, 26, 64, 49, 32, 4, 46, 43, 23, 37, 11, 48, 61] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "204", "system": "{'heights': [60, 30, 77, 20, 59, 39, 17, 20, 11, 49, 52, 43, 41, 34, 68, 2, 57, 2, 24, 43, 78, 48, 19, 2, 26, 64, 49, 32, 4, 46, 43, 23, 37, 11, 48, 61]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000653.png", "question": "Here is a histogram made of bars [34, 78, 15, 4, 76, 43, 20, 67, 36, 38, 50, 77, 3, 29, 43, 7, 46, 32, 1, 73, 38, 74, 12, 27, 51, 42, 3, 58, 37, 35, 8, 50, 9, 5, 32, 30, 79, 14, 79, 73] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "180", "system": "{'heights': [34, 78, 15, 4, 76, 43, 20, 67, 36, 38, 50, 77, 3, 29, 43, 7, 46, 32, 1, 73, 38, 74, 12, 27, 51, 42, 3, 58, 37, 35, 8, 50, 9, 5, 32, 30, 79, 14, 79, 73]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000654.png", "question": "Here is a histogram made of bars [59, 98, 21, 65, 52, 80, 91, 9, 12, 49, 27, 15, 72, 9, 23, 25, 25, 10, 40, 63, 53, 77, 77, 99, 3, 53, 84, 86, 29, 58, 36, 16, 57, 31, 5, 2, 43, 94, 53, 29, 31] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "265", "system": "{'heights': [59, 98, 21, 65, 52, 80, 91, 9, 12, 49, 27, 15, 72, 9, 23, 25, 25, 10, 40, 63, 53, 77, 77, 99, 3, 53, 84, 86, 29, 58, 36, 16, 57, 31, 5, 2, 43, 94, 53, 29, 31]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000655.png", "question": "Here is a histogram made of bars [72, 91, 68, 33, 64, 38, 49, 100, 42, 44, 24, 16, 99, 46, 52, 48, 77, 84, 61, 45, 82, 44, 26, 87, 64, 43, 42, 54, 2, 77, 27, 64, 9, 86, 44, 38, 29, 64, 12, 37, 31, 96, 50, 22, 34, 6, 77, 74, 61, 53, 66, 75, 43, 59, 82, 19] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "448", "system": "{'heights': [72, 91, 68, 33, 64, 38, 49, 100, 42, 44, 24, 16, 99, 46, 52, 48, 77, 84, 61, 45, 82, 44, 26, 87, 64, 43, 42, 54, 2, 77, 27, 64, 9, 86, 44, 38, 29, 64, 12, 37, 31, 96, 50, 22, 34, 6, 77, 74, 61, 53, 66, 75, 43, 59, 82, 19]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000656.png", "question": "Here is a histogram made of bars [55, 56, 36, 42, 30, 78, 54, 40, 68, 77, 46, 10, 92, 45, 60, 75, 6, 88, 28, 80, 40, 96, 31, 92, 100, 53, 60, 38, 54, 60, 29, 31, 98, 32, 84, 50, 58, 77, 73, 38, 29, 31, 99, 8, 82, 91, 42, 84, 7, 64, 74, 64, 21, 52, 91] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "728", "system": "{'heights': [55, 56, 36, 42, 30, 78, 54, 40, 68, 77, 46, 10, 92, 45, 60, 75, 6, 88, 28, 80, 40, 96, 31, 92, 100, 53, 60, 38, 54, 60, 29, 31, 98, 32, 84, 50, 58, 77, 73, 38, 29, 31, 99, 8, 82, 91, 42, 84, 7, 64, 74, 64, 21, 52, 91]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000657.png", "question": "Here is a histogram made of bars [38, 69, 52, 73, 86, 16, 62, 3, 91, 45, 60, 82, 81, 95, 26, 15, 94, 88, 85, 40, 42, 66, 65, 12, 7, 31, 63, 79, 63, 80, 61, 7, 12, 50, 9, 4, 20, 97, 59, 30, 94, 33, 4, 30, 37, 99, 57, 21, 1, 80, 14, 62, 92, 89, 42, 68, 2, 70, 13, 49, 75, 3, 25, 50, 43, 92, 44, 48] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "305", "system": "{'heights': [38, 69, 52, 73, 86, 16, 62, 3, 91, 45, 60, 82, 81, 95, 26, 15, 94, 88, 85, 40, 42, 66, 65, 12, 7, 31, 63, 79, 63, 80, 61, 7, 12, 50, 9, 4, 20, 97, 59, 30, 94, 33, 4, 30, 37, 99, 57, 21, 1, 80, 14, 62, 92, 89, 42, 68, 2, 70, 13, 49, 75, 3, 25, 50, 43, 92, 44, 48]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000658.png", "question": "Here is a histogram made of bars [69, 45, 47, 7, 80, 21, 73, 75, 78, 85, 60, 88, 3, 19, 95, 99, 1, 72, 27, 41, 86, 25, 28, 50, 33, 28, 24, 30, 55, 87, 79, 18, 78, 61, 72, 37, 74, 78, 16, 90, 98, 70, 16, 35, 57, 11, 18, 86, 92, 74, 54, 41, 72, 74, 11, 63] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "448", "system": "{'heights': [69, 45, 47, 7, 80, 21, 73, 75, 78, 85, 60, 88, 3, 19, 95, 99, 1, 72, 27, 41, 86, 25, 28, 50, 33, 28, 24, 30, 55, 87, 79, 18, 78, 61, 72, 37, 74, 78, 16, 90, 98, 70, 16, 35, 57, 11, 18, 86, 92, 74, 54, 41, 72, 74, 11, 63]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000659.png", "question": "Here is a histogram made of bars [75, 42, 3, 37, 50, 18, 50, 66, 78, 66, 82, 58, 36, 55, 9, 15, 37, 9, 53, 77, 56, 69, 75, 25, 8, 49, 31, 1, 98, 74, 14, 61, 52, 26, 5, 10, 31, 60, 12, 14, 5, 92, 22, 40, 12, 7, 45, 67, 55, 19, 85, 59, 14, 5, 86, 55, 46] where each 1 unit wide and packed tightly together. What's the biggest rectangle you can fit entirely inside the histogram?", "answer": "300", "system": "{'heights': [75, 42, 3, 37, 50, 18, 50, 66, 78, 66, 82, 58, 36, 55, 9, 15, 37, 9, 53, 77, 56, 69, 75, 25, 8, 49, 31, 1, 98, 74, 14, 61, 52, 26, 5, 10, 31, 60, 12, 14, 5, 92, 22, 40, 12, 7, 45, 67, 55, 19, 85, 59, 14, 5, 86, 55, 46]}", "category": "LargestRectangleInHistogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000660.png", "question": "Here is a row of bars each with some height [6, 5, 11, 14, 16, 16, 20, 14]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "5", "system": "{'sequence': [6, 5, 11, 14, 16, 16, 20, 14]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000661.png", "question": "Here is a row of bars each with some height [15, 4, 19, 19, 9]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "2", "system": "{'sequence': [15, 4, 19, 19, 9]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000662.png", "question": "Here is a row of bars each with some height [8, 7, 14, 5, 4, 2, 14]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "2", "system": "{'sequence': [8, 7, 14, 5, 4, 2, 14]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000663.png", "question": "Here is a row of bars each with some height [8, 2, 20, 10, 1, 1]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "2", "system": "{'sequence': [8, 2, 20, 10, 1, 1]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000664.png", "question": "Here is a row of bars each with some height [13, 5, 14, 11, 8, 11, 19, 16, 4, 15]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "4", "system": "{'sequence': [13, 5, 14, 11, 8, 11, 19, 16, 4, 15]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000665.png", "question": "Here is a row of bars each with some height [9, 15, 5, 1, 4, 12, 7, 2, 2, 3]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "3", "system": "{'sequence': [9, 15, 5, 1, 4, 12, 7, 2, 2, 3]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000666.png", "question": "Here is a row of bars each with some height [15, 18, 8, 27, 1, 32, 19, 16, 36, 22, 37]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [15, 18, 8, 27, 1, 32, 19, 16, 36, 22, 37]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000667.png", "question": "Here is a row of bars each with some height [4, 5, 14, 31, 38, 28, 24, 40, 6, 38, 39, 9, 23, 5, 30, 25, 15, 17]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [4, 5, 14, 31, 38, 28, 24, 40, 6, 38, 39, 9, 23, 5, 30, 25, 15, 17]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000668.png", "question": "Here is a row of bars each with some height [10, 19, 36, 9, 1, 14, 13, 4, 9, 2, 2, 40, 17, 37]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "5", "system": "{'sequence': [10, 19, 36, 9, 1, 14, 13, 4, 9, 2, 2, 40, 17, 37]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000669.png", "question": "Here is a row of bars each with some height [28, 5, 22, 4, 4, 12, 38, 38, 16, 25, 12, 8, 18, 5, 22, 30, 16]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [28, 5, 22, 4, 4, 12, 38, 38, 16, 25, 12, 8, 18, 5, 22, 30, 16]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000670.png", "question": "Here is a row of bars each with some height [8, 34, 19, 7, 29, 1, 29, 16, 11, 2]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "3", "system": "{'sequence': [8, 34, 19, 7, 29, 1, 29, 16, 11, 2]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000671.png", "question": "Here is a row of bars each with some height [7, 32, 40, 37, 33, 40, 2, 4, 14, 6, 28, 34, 17, 9, 16, 39, 23, 3]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [7, 32, 40, 37, 33, 40, 2, 4, 14, 6, 28, 34, 17, 9, 16, 39, 23, 3]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000672.png", "question": "Here is a row of bars each with some height [27, 7, 46, 24, 25, 57, 44, 47, 4, 51, 8, 47, 9, 34, 55, 3, 31, 59, 26, 41, 56, 50, 47, 41, 27, 47, 5, 43, 40]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "8", "system": "{'sequence': [27, 7, 46, 24, 25, 57, 44, 47, 4, 51, 8, 47, 9, 34, 55, 3, 31, 59, 26, 41, 56, 50, 47, 41, 27, 47, 5, 43, 40]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000673.png", "question": "Here is a row of bars each with some height [7, 58, 3, 13, 60, 27, 31, 48, 49, 44, 21, 45, 56, 1, 32, 14, 56, 14, 3, 7, 2, 44, 48, 21, 50, 14, 46, 49]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "8", "system": "{'sequence': [7, 58, 3, 13, 60, 27, 31, 48, 49, 44, 21, 45, 56, 1, 32, 14, 56, 14, 3, 7, 2, 44, 48, 21, 50, 14, 46, 49]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000674.png", "question": "Here is a row of bars each with some height [47, 45, 25, 18, 33, 13, 40, 22, 59, 52, 2, 33, 17, 34, 1, 3, 16, 54, 60, 4, 12, 11, 8, 51]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [47, 45, 25, 18, 33, 13, 40, 22, 59, 52, 2, 33, 17, 34, 1, 3, 16, 54, 60, 4, 12, 11, 8, 51]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000675.png", "question": "Here is a row of bars each with some height [52, 22, 31, 40, 16, 9, 9, 43, 51, 32, 47, 34, 42, 42, 34, 56, 15, 9, 18, 45, 22, 41, 2, 10, 13, 60]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "7", "system": "{'sequence': [52, 22, 31, 40, 16, 9, 9, 43, 51, 32, 47, 34, 42, 42, 34, 56, 15, 9, 18, 45, 22, 41, 2, 10, 13, 60]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000676.png", "question": "Here is a row of bars each with some height [10, 30, 51, 27, 16, 43, 60, 29, 51, 2, 52, 36, 32, 31, 4, 42, 34, 28, 24, 50, 34, 57]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "7", "system": "{'sequence': [10, 30, 51, 27, 16, 43, 60, 29, 51, 2, 52, 36, 32, 31, 4, 42, 34, 28, 24, 50, 34, 57]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000677.png", "question": "Here is a row of bars each with some height [51, 40, 40, 12, 25, 58, 59, 32, 1, 50, 44, 37, 46, 39, 24, 3, 54, 35, 49, 32]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "6", "system": "{'sequence': [51, 40, 40, 12, 25, 58, 59, 32, 1, 50, 44, 37, 46, 39, 24, 3, 54, 35, 49, 32]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000678.png", "question": "Here is a row of bars each with some height [58, 22, 56, 71, 52, 13, 51, 51, 35, 78, 62, 5, 27, 1, 70, 44, 43, 23, 34, 43, 9, 57, 58, 36, 74, 49, 18, 72, 51, 6, 80, 35, 7]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "8", "system": "{'sequence': [58, 22, 56, 71, 52, 13, 51, 51, 35, 78, 62, 5, 27, 1, 70, 44, 43, 23, 34, 43, 9, 57, 58, 36, 74, 49, 18, 72, 51, 6, 80, 35, 7]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000679.png", "question": "Here is a row of bars each with some height [16, 31, 44, 57, 4, 73, 30, 19, 14, 26, 45, 64, 2, 33, 33, 79, 24, 8, 62, 18, 15, 17, 66, 45, 55, 75, 56, 13, 12, 77, 13]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "8", "system": "{'sequence': [16, 31, 44, 57, 4, 73, 30, 19, 14, 26, 45, 64, 2, 33, 33, 79, 24, 8, 62, 18, 15, 17, 66, 45, 55, 75, 56, 13, 12, 77, 13]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000680.png", "question": "Here is a row of bars each with some height [31, 26, 56, 21, 74, 40, 59, 26, 38, 15, 41, 26, 42, 48, 63, 66, 67, 76, 54, 57, 12, 45, 40, 75, 19, 13, 45, 65, 36, 32, 38, 26, 37]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "10", "system": "{'sequence': [31, 26, 56, 21, 74, 40, 59, 26, 38, 15, 41, 26, 42, 48, 63, 66, 67, 76, 54, 57, 12, 45, 40, 75, 19, 13, 45, 65, 36, 32, 38, 26, 37]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000681.png", "question": "Here is a row of bars each with some height [32, 3, 33, 24, 32, 76, 58, 58, 34, 32, 18, 40, 54, 16, 70, 44, 73, 74, 38, 21, 34, 75, 29, 8, 23, 64, 2, 17, 56, 74]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "10", "system": "{'sequence': [32, 3, 33, 24, 32, 76, 58, 58, 34, 32, 18, 40, 54, 16, 70, 44, 73, 74, 38, 21, 34, 75, 29, 8, 23, 64, 2, 17, 56, 74]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000682.png", "question": "Here is a row of bars each with some height [16, 27, 37, 12, 64, 11, 71, 24, 68, 40, 16, 1, 78, 31, 61, 62, 27, 32, 46, 77, 76, 9, 62, 66, 50, 71, 16, 22, 52, 26, 13, 44, 9, 36]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "8", "system": "{'sequence': [16, 27, 37, 12, 64, 11, 71, 24, 68, 40, 16, 1, 78, 31, 61, 62, 27, 32, 46, 77, 76, 9, 62, 66, 50, 71, 16, 22, 52, 26, 13, 44, 9, 36]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000683.png", "question": "Here is a row of bars each with some height [11, 5, 20, 55, 62, 4, 56, 43, 60, 21, 19, 77, 7, 36, 47, 39, 17, 40, 11, 20, 5, 29, 24, 5, 14, 7, 54, 29, 45, 10, 67, 2, 58, 54, 57]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "9", "system": "{'sequence': [11, 5, 20, 55, 62, 4, 56, 43, 60, 21, 19, 77, 7, 36, 47, 39, 17, 40, 11, 20, 5, 29, 24, 5, 14, 7, 54, 29, 45, 10, 67, 2, 58, 54, 57]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000684.png", "question": "Here is a row of bars each with some height [38, 98, 41, 20, 17, 61, 38, 37, 64, 12, 72, 69, 8, 14, 25, 14, 15, 58, 85, 37, 56, 54, 88, 63, 71, 37, 23, 76, 85, 51, 33, 60, 70, 31, 11, 79, 29, 68, 53, 18, 40, 44, 32, 82, 50, 62, 81, 57, 7, 33, 88, 6, 91, 50, 43, 59, 47, 64, 81, 76, 28, 79, 21, 23, 22]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "13", "system": "{'sequence': [38, 98, 41, 20, 17, 61, 38, 37, 64, 12, 72, 69, 8, 14, 25, 14, 15, 58, 85, 37, 56, 54, 88, 63, 71, 37, 23, 76, 85, 51, 33, 60, 70, 31, 11, 79, 29, 68, 53, 18, 40, 44, 32, 82, 50, 62, 81, 57, 7, 33, 88, 6, 91, 50, 43, 59, 47, 64, 81, 76, 28, 79, 21, 23, 22]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000685.png", "question": "Here is a row of bars each with some height [98, 37, 81, 85, 46, 94, 25, 48, 99, 33, 2, 82, 73, 57, 78, 39, 6, 30, 83, 28, 83, 51, 37, 63, 49, 39, 75, 95, 10, 54, 6, 9, 75, 31, 40, 77, 49, 79, 23, 88, 23, 22, 30, 37, 89, 67, 41, 75, 38, 87, 90, 77, 39, 100, 99, 25, 7, 36, 46, 92, 10, 36, 38, 25, 86]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "13", "system": "{'sequence': [98, 37, 81, 85, 46, 94, 25, 48, 99, 33, 2, 82, 73, 57, 78, 39, 6, 30, 83, 28, 83, 51, 37, 63, 49, 39, 75, 95, 10, 54, 6, 9, 75, 31, 40, 77, 49, 79, 23, 88, 23, 22, 30, 37, 89, 67, 41, 75, 38, 87, 90, 77, 39, 100, 99, 25, 7, 36, 46, 92, 10, 36, 38, 25, 86]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000686.png", "question": "Here is a row of bars each with some height [30, 55, 39, 43, 99, 13, 99, 65, 34, 45, 81, 52, 100, 2, 33, 13, 10, 13, 48, 73, 4, 71, 59, 19, 28, 46, 90, 73, 45, 7, 60, 46, 72, 82, 70, 69, 25, 8, 27, 48, 67, 66, 33, 63, 34, 59, 87, 57, 88, 6, 18, 58, 9, 53, 83, 16, 36, 25, 94, 93, 93, 67, 60, 71, 37, 35, 32, 59]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "12", "system": "{'sequence': [30, 55, 39, 43, 99, 13, 99, 65, 34, 45, 81, 52, 100, 2, 33, 13, 10, 13, 48, 73, 4, 71, 59, 19, 28, 46, 90, 73, 45, 7, 60, 46, 72, 82, 70, 69, 25, 8, 27, 48, 67, 66, 33, 63, 34, 59, 87, 57, 88, 6, 18, 58, 9, 53, 83, 16, 36, 25, 94, 93, 93, 67, 60, 71, 37, 35, 32, 59]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000687.png", "question": "Here is a row of bars each with some height [49, 56, 14, 79, 65, 13, 7, 83, 32, 82, 46, 75, 25, 3, 33, 13, 80, 22, 92, 23, 52, 90, 49, 56, 100, 92, 38, 77, 80, 63, 86, 22, 88, 6, 40, 29, 89, 50, 57, 56, 2, 39, 53, 88, 73, 65, 86, 92, 30, 27, 99, 64, 6, 51, 90, 77, 76, 46, 38, 19, 38, 92, 74, 29, 84, 34, 66, 28, 27, 28]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "13", "system": "{'sequence': [49, 56, 14, 79, 65, 13, 7, 83, 32, 82, 46, 75, 25, 3, 33, 13, 80, 22, 92, 23, 52, 90, 49, 56, 100, 92, 38, 77, 80, 63, 86, 22, 88, 6, 40, 29, 89, 50, 57, 56, 2, 39, 53, 88, 73, 65, 86, 92, 30, 27, 99, 64, 6, 51, 90, 77, 76, 46, 38, 19, 38, 92, 74, 29, 84, 34, 66, 28, 27, 28]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000688.png", "question": "Here is a row of bars each with some height [94, 43, 73, 39, 90, 76, 74, 93, 51, 35, 100, 6, 84, 41, 50, 74, 10, 49, 75, 77, 48, 46, 13, 54, 67, 89, 17, 59, 76, 26, 45, 57, 61, 37, 69, 58, 60, 91, 83, 25, 18, 78, 95, 38, 81, 98, 71, 10, 61, 36]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "12", "system": "{'sequence': [94, 43, 73, 39, 90, 76, 74, 93, 51, 35, 100, 6, 84, 41, 50, 74, 10, 49, 75, 77, 48, 46, 13, 54, 67, 89, 17, 59, 76, 26, 45, 57, 61, 37, 69, 58, 60, 91, 83, 25, 18, 78, 95, 38, 81, 98, 71, 10, 61, 36]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000689.png", "question": "Here is a row of bars each with some height [10, 5, 15, 96, 69, 59, 70, 74, 58, 25, 17, 49, 26, 76, 85, 51, 72, 34, 100, 32, 46, 45, 69, 3, 10, 87, 35, 83, 40, 37, 31, 74, 20, 30, 27, 41, 55, 97, 40, 95, 53, 62, 14, 45, 55, 2, 10, 4, 16]. Pick a subset of these bars where each one is strictly taller than the last and they appear in order from left to right. What's the longest such sequence you can find? Please output the length of the sequence with an integer.", "answer": "10", "system": "{'sequence': [10, 5, 15, 96, 69, 59, 70, 74, 58, 25, 17, 49, 26, 76, 85, 51, 72, 34, 100, 32, 46, 45, 69, 3, 10, 87, 35, 83, 40, 37, 31, 74, 20, 30, 27, 41, 55, 97, 40, 95, 53, 62, 14, 45, 55, 2, 10, 4, 16]}", "category": "longest_increasing_subsequence", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000690.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,8), (2,8)]\\n1: [(3,10)]\\n2: [(3,6)]\\n3: []\\n", "answer": "14", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000691.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,2), (2,2)]\\n1: [(3,1)]\\n2: [(3,4)]\\n3: []\\n", "answer": "3", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000692.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10)]\\n1: [(3,10)]\\n2: [(3,10)]\\n3: []\\n", "answer": "20", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000693.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,9), (2,9)]\\n1: [(3,7)]\\n2: [(3,8)]\\n3: []\\n", "answer": "15", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000694.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10)]\\n1: [(3,10)]\\n2: [(3,7)]\\n3: []\\n", "answer": "17", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000695.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 3. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10)]\\n1: [(3,6)]\\n2: [(3,6)]\\n3: []\\n", "answer": "12", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000696.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,9)]\\n1: [(3,10)]\\n2: [(3,4), (4,5)]\\n3: [(5,10)]\\n4: [(5,5)]\\n5: []\\n", "answer": "15", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000697.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,2), (2,1)]\\n1: [(4,1)]\\n2: [(3,1), (4,1)]\\n3: [(5,1)]\\n4: [(5,1)]\\n5: []\\n", "answer": "2", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000698.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10)]\\n1: [(3,7)]\\n2: [(4,10)]\\n3: [(5,10)]\\n4: [(5,10)]\\n5: []\\n", "answer": "17", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000699.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,2), (2,2)]\\n1: [(4,5)]\\n2: [(3,3), (4,2)]\\n3: [(5,8)]\\n4: [(5,10)]\\n5: []\\n", "answer": "4", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000700.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,9), (2,9)]\\n1: [(3,2), (4,2)]\\n2: [(4,10)]\\n3: [(5,4)]\\n4: [(5,10)]\\n5: []\\n", "answer": "12", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000701.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 5. Answer with the maximum flow value (an integer).\\n\\n0: [(1,5), (2,5)]\\n1: [(3,2)]\\n2: [(4,1)]\\n3: [(5,6)]\\n4: [(5,1)]\\n5: []\\n", "answer": "3", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000702.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,5), (2,5)]\\n1: [(3,1), (4,1)]\\n2: [(3,1), (5,1)]\\n3: [(7,1)]\\n4: [(6,1), (7,1)]\\n5: [(7,1)]\\n6: [(8,1)]\\n7: [(8,1)]\\n8: []\\n", "answer": "2", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000703.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10)]\\n1: [(3,4), (5,3)]\\n2: [(3,5), (4,6)]\\n3: [(7,10)]\\n4: [(6,3), (7,4)]\\n5: [(6,4)]\\n6: [(8,2)]\\n7: [(8,10)]\\n8: []\\n", "answer": "12", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000704.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,2), (2,2)]\\n1: [(3,1), (5,1)]\\n2: [(4,1)]\\n3: [(7,1)]\\n4: [(7,1)]\\n5: [(6,1), (7,1)]\\n6: [(8,6)]\\n7: [(8,3)]\\n8: []\\n", "answer": "3", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000705.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,4), (2,3)]\\n1: [(4,1)]\\n2: [(3,2), (5,2)]\\n3: [(7,1)]\\n4: [(6,1)]\\n5: [(6,3), (7,2)]\\n6: [(8,2)]\\n7: [(8,1)]\\n8: []\\n", "answer": "3", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000706.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,6), (2,6)]\\n1: [(3,3), (5,2)]\\n2: [(4,4)]\\n3: [(6,1), (7,1)]\\n4: [(7,9)]\\n5: [(6,5)]\\n6: [(8,4)]\\n7: [(8,10)]\\n8: []\\n", "answer": "8", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000707.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 8. Answer with the maximum flow value (an integer).\\n\\n0: [(1,7), (2,6)]\\n1: [(4,6)]\\n2: [(3,4), (4,3), (5,4)]\\n3: [(6,5)]\\n4: [(6,10)]\\n5: [(7,6)]\\n6: [(8,10)]\\n7: [(8,2)]\\n8: []\\n", "answer": "12", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000708.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10), (3,10)]\\n1: [(5,3), (6,3)]\\n2: [(4,3), (5,3)]\\n3: [(5,7), (6,7)]\\n4: [(7,2), (9,3)]\\n5: [(8,8)]\\n6: [(7,9)]\\n7: [(10,10)]\\n8: [(10,10)]\\n9: [(10,1)]\\n10: []\\n", "answer": "19", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000709.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,9), (3,9)]\\n1: [(6,9)]\\n2: [(5,10)]\\n3: [(4,2), (5,1), (6,1)]\\n4: [(7,3), (8,3)]\\n5: [(9,10)]\\n6: [(7,7), (9,7)]\\n7: [(10,9)]\\n8: [(10,6)]\\n9: [(10,10)]\\n10: []\\n", "answer": "19", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000710.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,2), (2,2), (3,2)]\\n1: [(4,2)]\\n2: [(5,1)]\\n3: [(5,1), (6,1)]\\n4: [(8,1), (9,1)]\\n5: [(7,1), (8,2)]\\n6: [(7,2)]\\n7: [(10,1)]\\n8: [(10,4)]\\n9: [(10,3)]\\n10: []\\n", "answer": "5", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000711.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,6), (2,5), (3,5)]\\n1: [(6,4)]\\n2: [(4,8)]\\n3: [(4,1), (5,1), (6,1)]\\n4: [(7,7), (9,7)]\\n5: [(7,1)]\\n6: [(8,1)]\\n7: [(10,10)]\\n8: [(10,4)]\\n9: [(10,4)]\\n10: []\\n", "answer": "8", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000712.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,7), (2,7), (3,6)]\\n1: [(6,2)]\\n2: [(5,6)]\\n3: [(4,2)]\\n4: [(7,2)]\\n5: [(9,8)]\\n6: [(7,3), (8,4)]\\n7: [(10,5)]\\n8: [(10,3)]\\n9: [(10,10)]\\n10: []\\n", "answer": "10", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000713.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 10. Answer with the maximum flow value (an integer).\\n\\n0: [(1,3), (2,3), (3,2)]\\n1: [(6,3)]\\n2: [(5,2), (6,1)]\\n3: [(4,1), (5,1), (6,1)]\\n4: [(7,1), (8,1), (9,1)]\\n5: [(7,1), (8,1)]\\n6: [(7,2), (8,2)]\\n7: [(10,1)]\\n8: [(10,1)]\\n9: [(10,1)]\\n10: []\\n", "answer": "3", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000714.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,4), (2,4), (3,4)]\\n1: [(5,3)]\\n2: [(4,3), (7,2)]\\n3: [(5,1), (6,2)]\\n4: [(9,1), (10,1)]\\n5: [(8,2)]\\n6: [(8,1), (11,1)]\\n7: [(8,3), (9,4)]\\n8: [(12,3), (14,2)]\\n9: [(14,4)]\\n10: [(12,1), (14,1)]\\n11: [(13,1)]\\n12: [(15,6)]\\n13: [(15,3)]\\n14: [(15,7)]\\n15: []\\n", "answer": "8", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000715.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,10), (2,10), (3,10)]\\n1: [(4,2), (6,3), (7,2)]\\n2: [(4,2), (5,2), (6,2), (7,2)]\\n3: [(5,7), (7,6)]\\n4: [(10,1), (11,1)]\\n5: [(8,4), (9,4)]\\n6: [(8,3), (9,3), (10,3)]\\n7: [(10,6), (11,6)]\\n8: [(13,1), (14,2)]\\n9: [(12,2), (14,1)]\\n10: [(12,10)]\\n11: [(12,6), (13,6)]\\n12: [(15,10)]\\n13: [(15,3)]\\n14: [(15,1)]\\n15: []\\n", "answer": "14", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000716.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,9), (2,9), (3,8)]\\n1: [(4,1), (6,2), (7,1)]\\n2: [(4,4), (7,3)]\\n3: [(5,8)]\\n4: [(10,2), (11,2)]\\n5: [(8,2), (10,2)]\\n6: [(10,4), (11,3)]\\n7: [(9,9)]\\n8: [(12,4)]\\n9: [(13,10)]\\n10: [(13,5), (14,6)]\\n11: [(12,4), (13,4)]\\n12: [(15,10)]\\n13: [(15,10)]\\n14: [(15,3)]\\n15: []\\n", "answer": "14", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000717.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,4), (2,3), (3,3)]\\n1: [(4,3), (5,2), (6,3)]\\n2: [(4,4), (7,3)]\\n3: [(5,1), (6,1), (7,1)]\\n4: [(8,4), (9,4), (11,4)]\\n5: [(8,1), (9,1)]\\n6: [(9,1)]\\n7: [(8,1), (10,1), (11,1)]\\n8: [(12,8)]\\n9: [(14,2)]\\n10: [(12,1), (14,1)]\\n11: [(13,5)]\\n12: [(15,10)]\\n13: [(15,5)]\\n14: [(15,5)]\\n15: []\\n", "answer": "10", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000718.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,9), (2,9), (3,8)]\\n1: [(6,5)]\\n2: [(5,4), (7,4)]\\n3: [(4,6), (7,5)]\\n4: [(8,4), (11,4)]\\n5: [(8,1), (10,1), (11,1)]\\n6: [(9,1), (11,1)]\\n7: [(8,7), (10,6)]\\n8: [(12,6), (13,7)]\\n9: [(12,2), (13,1)]\\n10: [(12,4), (13,4), (14,3)]\\n11: [(14,10)]\\n12: [(15,8)]\\n13: [(15,10)]\\n14: [(15,10)]\\n15: []\\n", "answer": "17", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000719.png", "question": "Below is a layered directed acyclic graph (DAG) adjacency list (with capacities). Compute the maximum flow from node 0 to node 15. Answer with the maximum flow value (an integer).\\n\\n0: [(1,7), (2,7), (3,6)]\\n1: [(5,4)]\\n2: [(4,3), (6,3), (7,3)]\\n3: [(4,2), (5,1), (7,2)]\\n4: [(11,10)]\\n5: [(10,2)]\\n6: [(8,2), (9,2), (10,1)]\\n7: [(9,7)]\\n8: [(12,1)]\\n9: [(14,6)]\\n10: [(14,2)]\\n11: [(13,8), (14,7)]\\n12: [(15,1)]\\n13: [(15,5)]\\n14: [(15,10)]\\n15: []\\n", "answer": "13", "system": "nan", "category": "max_flow", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000720.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|0 0 S|\\n+ +-+ +\\n|0|0 0|\\n+ + +-+\\n|0|0 E|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down left down right", "system": "+-+-+-+\\n|0 0 S|\\n+ +-+ +\\n|0|0 0|\\n+ + +-+\\n|0|0 E|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000721.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|0 0 0|\\n+ +-+-+\\n|0 S 0|\\n+ +-+-+\\n|0 0 E|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left down right right", "system": "+-+-+-+\\n|0 0 0|\\n+ +-+-+\\n|0 S 0|\\n+ +-+-+\\n|0 0 E|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000722.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|0 0 S|\\n+-+-+ +\\n|0 E|0|\\n+ +-+ +\\n|0 0 0|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down left left up right", "system": "+-+-+-+\\n|0 0 S|\\n+-+-+ +\\n|0 E|0|\\n+ +-+ +\\n|0 0 0|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000723.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|S 0 0|\\n+-+ +-+\\n|0 0|E|\\n+ +-+ +\\n|0 0 0|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right down left down right right up", "system": "+-+-+-+\\n|S 0 0|\\n+-+ +-+\\n|0 0|E|\\n+ +-+ +\\n|0 0 0|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000724.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|0 0 0|\\n+ +-+-+\\n|0 0 0|\\n+ +-+ +\\n|0 S|E|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left up right right down", "system": "+-+-+-+\\n|0 0 0|\\n+ +-+-+\\n|0 0 0|\\n+ +-+ +\\n|0 S|E|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000725.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+\\n|0 0 S|\\n+ +-+-+\\n|0 0 0|\\n+-+-+ +\\n|E 0 0|\\n+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left left down right right down left left", "system": "+-+-+-+\\n|0 0 S|\\n+ +-+-+\\n|0 0 0|\\n+-+-+ +\\n|E 0 0|\\n+-+-+-+", "category": "maze", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000726.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|0 0 0 0 0|\\n+ +-+-+-+ +\\n|0|E|0 0|0|\\n+ + +-+ + +\\n|0 0|0 0|0|\\n+-+-+ +-+ +\\n|0|S 0 0|0|\\n+ + +-+ + +\\n|0 0 0|0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right right down right up up up up left left left left down down right up", "system": "+-+-+-+-+-+\\n|0 0 0 0 0|\\n+ +-+-+-+ +\\n|0|E|0 0|0|\\n+ + +-+ + +\\n|0 0|0 0|0|\\n+-+-+ +-+ +\\n|0|S 0 0|0|\\n+ + +-+ + +\\n|0 0 0|0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000727.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|S 0|0 0 0|\\n+ + + +-+ +\\n|0|0|E|0|0|\\n+ +-+-+ + +\\n|0|0 0 0|0|\\n+ + + + + +\\n|0 0|0|0|0|\\n+ +-+ +-+ +\\n|0 0|0 0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down down right up right down down right right up up up up left left down", "system": "+-+-+-+-+-+\\n|S 0|0 0 0|\\n+ + + +-+ +\\n|0|0|E|0|0|\\n+ +-+-+ + +\\n|0|0 0 0|0|\\n+ + + + + +\\n|0 0|0|0|0|\\n+ +-+ +-+ +\\n|0 0|0 0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000728.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|0 0|0 0 E|\\n+ + + +-+-+\\n|0|0|0 0|S|\\n+ + +-+ + +\\n|0|0 0 0|0|\\n+ +-+-+-+ +\\n|0 0 0 0|0|\\n+-+-+-+ + +\\n|0 0 0 0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down down left up left left left up up up right down down right right up left up right right", "system": "+-+-+-+-+-+\\n|0 0|0 0 E|\\n+ + + +-+-+\\n|0|0|0 0|S|\\n+ + +-+ + +\\n|0|0 0 0|0|\\n+ +-+-+-+ +\\n|0 0 0 0|0|\\n+-+-+-+ + +\\n|0 0 0 0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000729.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|0 0 0 0 0|\\n+-+-+-+ + +\\n|0 0 0 0|0|\\n+ +-+-+-+-+\\n|0 0 0 0 0|\\n+ +-+-+-+ +\\n|0|0 0 0|0|\\n+ + +-+-+ +\\n|S 0|E 0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up up right right right right down down left left", "system": "+-+-+-+-+-+\\n|0 0 0 0 0|\\n+-+-+-+ + +\\n|0 0 0 0|0|\\n+ +-+-+-+-+\\n|0 0 0 0 0|\\n+ +-+-+-+ +\\n|0|0 0 0|0|\\n+ + +-+-+ +\\n|S 0|E 0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000730.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|0|0 0 0 0|\\n+ + +-+ + +\\n|0 0 0|0|0|\\n+-+-+ + +-+\\n|0|S 0|0 0|\\n+ +-+-+-+ +\\n|0 0 0 0 0|\\n+-+-+-+-+ +\\n|E 0 0 0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right up left up right right down down right down down left left left left", "system": "+-+-+-+-+-+\\n|0|0 0 0 0|\\n+ + +-+ + +\\n|0 0 0|0|0|\\n+-+-+ + +-+\\n|0|S 0|0 0|\\n+ +-+-+-+ +\\n|0 0 0 0 0|\\n+-+-+-+-+ +\\n|E 0 0 0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000731.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+\\n|0|S 0 0 0|\\n+ + +-+-+ +\\n|0|0|0 0|0|\\n+ + + + +-+\\n|0|0|E|0 0|\\n+ + +-+-+ +\\n|0|0|0 0 0|\\n+ + + +-+ +\\n|0 0 0|0 0|\\n+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down down down right up right right up left up left down", "system": "+-+-+-+-+-+\\n|0|S 0 0 0|\\n+ + +-+-+ +\\n|0|0|0 0|0|\\n+ + + + +-+\\n|0|0|E|0 0|\\n+ + +-+-+ +\\n|0|0|0 0 0|\\n+ + + +-+ +\\n|0 0 0|0 0|\\n+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000732.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|0|0 0 0 0 0 0|\\n+ + +-+ +-+-+ +\\n|0 0 0|0|0 0|0|\\n+ +-+-+ + + +-+\\n|0 S|0 0|0|0 E|\\n+-+-+ + + +-+-+\\n|0 0 0|0|0 0|0|\\n+ +-+ +-+-+ + +\\n|0|0 0|0 0 0|0|\\n+ +-+ + +-+-+ +\\n|0 0|0|0|0 0 0|\\n+ + +-+ + +-+ +\\n|0|0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left up right up right right down down left down left left down down right down right right up up right right up left up up right down right", "system": "+-+-+-+-+-+-+-+\\n|0|0 0 0 0 0 0|\\n+ + +-+ +-+-+ +\\n|0 0 0|0|0 0|0|\\n+ +-+-+ + + +-+\\n|0 S|0 0|0|0 E|\\n+-+-+ + + +-+-+\\n|0 0 0|0|0 0|0|\\n+ +-+ +-+-+ + +\\n|0|0 0|0 0 0|0|\\n+ +-+ + +-+-+ +\\n|0 0|0|0|0 0 0|\\n+ + +-+ + +-+ +\\n|0|0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000733.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0 0|\\n+ +-+ +-+-+-+ +\\n|0|0|0 0 0 0|0|\\n+ + +-+-+-+ + +\\n|0|0 S 0 0 0 0|\\n+ +-+-+ +-+-+-+\\n|0 0 0|0|0 0 0|\\n+ +-+ +-+ +-+ +\\n|0 0|0 0|E|0|0|\\n+-+ +-+ +-+ + +\\n|0|0|0 0|0 0 0|\\n+ + + +-+ +-+-+\\n|0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right right right up left left left up left left down down down right right down right down left down right right up right right up up left left down", "system": "+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0 0|\\n+ +-+ +-+-+-+ +\\n|0|0|0 0 0 0|0|\\n+ + +-+-+-+ + +\\n|0|0 S 0 0 0 0|\\n+ +-+-+ +-+-+-+\\n|0 0 0|0|0 0 0|\\n+ +-+ +-+ +-+ +\\n|0 0|0 0|E|0|0|\\n+-+ +-+ +-+ + +\\n|0|0|0 0|0 0 0|\\n+ + + +-+ +-+-+\\n|0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000734.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|S|0 0 0 0 0 0|\\n+ + +-+-+ +-+ +\\n|0|0|0 0|0 0|0|\\n+ + +-+ +-+ + +\\n|0|0|0 0 0|0|0|\\n+ + + +-+ + +-+\\n|0 0|0|0 0|0 0|\\n+ +-+ +-+-+-+ +\\n|0|0 0 0|0 0 0|\\n+ +-+-+ + +-+ +\\n|0|0 0 0|0|0 0|\\n+ + +-+-+ + +-+\\n|0 0|E 0 0|0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down down right up up up right right right down right down down right down left left down down left left", "system": "+-+-+-+-+-+-+-+\\n|S|0 0 0 0 0 0|\\n+ + +-+-+ +-+ +\\n|0|0|0 0|0 0|0|\\n+ + +-+ +-+ + +\\n|0|0|0 0 0|0|0|\\n+ + + +-+ + +-+\\n|0 0|0|0 0|0 0|\\n+ +-+ +-+-+-+ +\\n|0|0 0 0|0 0 0|\\n+ +-+-+ + +-+ +\\n|0|0 0 0|0|0 0|\\n+ + +-+-+ + +-+\\n|0 0|E 0 0|0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000735.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|0 0 0 0 0 0 0|\\n+ +-+-+ +-+-+ +\\n|0 0|0 0|0 0|0|\\n+ + + +-+ + +-+\\n|S|0|0|E 0|0 0|\\n+-+ + +-+-+-+ +\\n|0 0|0 0 0 0|0|\\n+ +-+-+-+ +-+ +\\n|0|0 0 0|0|0 0|\\n+ + +-+ +-+ +-+\\n|0 0|0|0|0 0|0|\\n+ +-+ + + +-+ +\\n|0 0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up right down down left down down right up right right down down right up right up right up up left up left down left", "system": "+-+-+-+-+-+-+-+\\n|0 0 0 0 0 0 0|\\n+ +-+-+ +-+-+ +\\n|0 0|0 0|0 0|0|\\n+ + + +-+ + +-+\\n|S|0|0|E 0|0 0|\\n+-+ + +-+-+-+ +\\n|0 0|0 0 0 0|0|\\n+ +-+-+-+ +-+ +\\n|0|0 0 0|0|0 0|\\n+ + +-+ +-+ +-+\\n|0 0|0|0|0 0|0|\\n+ +-+ + + +-+ +\\n|0 0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000736.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|0|0 0 0 0 0 0|\\n+ + +-+-+-+ +-+\\n|0|0|0 0 0|0 0|\\n+ + + +-+ +-+ +\\n|0 0 0|0 0|0|0|\\n+-+-+-+ +-+ + +\\n|0 0|0 0 0 0|S|\\n+ + +-+-+-+-+ +\\n|0|0 0 0 0 0|0|\\n+ +-+-+-+-+ + +\\n|0 0|0|0 0 0|0|\\n+-+ + + +-+-+ +\\n|E 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down down left left left up right right up left left left left up left down down right down left", "system": "+-+-+-+-+-+-+-+\\n|0|0 0 0 0 0 0|\\n+ + +-+-+-+ +-+\\n|0|0|0 0 0|0 0|\\n+ + + +-+ +-+ +\\n|0 0 0|0 0|0|0|\\n+-+-+-+ +-+ + +\\n|0 0|0 0 0 0|S|\\n+ + +-+-+-+-+ +\\n|0|0 0 0 0 0|0|\\n+ +-+-+-+-+ + +\\n|0 0|0|0 0 0|0|\\n+-+ + + +-+-+ +\\n|E 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000737.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+\\n|0|0 0|0 0|0 0|\\n+ + + + + + + +\\n|0 0|0 0|0|0|0|\\n+ +-+-+-+ + + +\\n|0 0|0 0 0|0|S|\\n+-+ + +-+-+ +-+\\n|0|0|0|0 0 0|E|\\n+ + + + +-+-+ +\\n|0|0|0 0|0 0 0|\\n+ + +-+-+-+ +-+\\n|0 0|0 0 0|0 0|\\n+ +-+-+ + +-+ +\\n|0 0 0 0|0 0 0|\\n+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up up left down down down left left down left up up right right up up left down left up left down left down right down down down left down right right right up right down right right up left up right up", "system": "+-+-+-+-+-+-+-+\\n|0|0 0|0 0|0 0|\\n+ + + + + + + +\\n|0 0|0 0|0|0|0|\\n+ +-+-+-+ + + +\\n|0 0|0 0 0|0|S|\\n+-+ + +-+-+ +-+\\n|0|0|0|0 0 0|E|\\n+ + + + +-+-+ +\\n|0|0|0 0|0 0 0|\\n+ + +-+-+-+ +-+\\n|0 0|0 0 0|0 0|\\n+ +-+-+ + +-+ +\\n|0 0 0 0|0 0 0|\\n+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000738.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0|0 0 0 0|0 0 0 0|\\n+ + +-+ +-+ +-+ +-+\\n|0|0|0|0 0 0|E|0 0|\\n+ + + +-+-+-+ + + +\\n|0 0|0 0|0 0 0|0|0|\\n+ +-+ +-+ +-+-+-+ +\\n|0 0|0 0|0|0 0 0 0|\\n+-+ +-+ + + +-+-+-+\\n|0|0|0 0|0|0|0 S 0|\\n+ + + +-+ + +-+-+ +\\n|0 0|0|0 0|0|0 0 0|\\n+ +-+ + +-+ + +-+ +\\n|0|0 0|0 0 0|0|0|0|\\n+ + + +-+-+-+ + + +\\n|0 0|0 0 0|0 0|0|0|\\n+-+-+-+-+ + +-+ + +\\n|0 0 0 0 0 0|0 0 0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right down left left down down left down left up left left up left down left up up right up up left up right up up right right down right right up right right down right down down left left left down down down left left up right up up up right right up", "system": "+-+-+-+-+-+-+-+-+-+\\n|0|0 0 0 0|0 0 0 0|\\n+ + +-+ +-+ +-+ +-+\\n|0|0|0|0 0 0|E|0 0|\\n+ + + +-+-+-+ + + +\\n|0 0|0 0|0 0 0|0|0|\\n+ +-+ +-+ +-+-+-+ +\\n|0 0|0 0|0|0 0 0 0|\\n+-+ +-+ + + +-+-+-+\\n|0|0|0 0|0|0|0 S 0|\\n+ + + +-+ + +-+-+ +\\n|0 0|0|0 0|0|0 0 0|\\n+ +-+ + +-+ + +-+ +\\n|0|0 0|0 0 0|0|0|0|\\n+ + + +-+-+-+ + + +\\n|0 0|0 0 0|0 0|0|0|\\n+-+-+-+-+ + +-+ + +\\n|0 0 0 0 0 0|0 0 0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000739.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0|0 0 0|0|\\n+ +-+ + + + +-+ + +\\n|0 0|0 0|0|0|0 0 0|\\n+ +-+-+ + + +-+-+ +\\n|0|0 0|0|0|0|0 0|0|\\n+ + + +-+ + + + +-+\\n|0|0|0 0 0|0 0|0 0|\\n+ + +-+-+-+-+-+-+ +\\n|0|0|0 0 0 0 0 0 0|\\n+ + + +-+ +-+-+-+-+\\n|0|E|0 0|0|0 0 0 0|\\n+ +-+-+-+ + +-+-+ +\\n|0|0 0 0|0 0 S 0|0|\\n+ + +-+ +-+-+-+-+ +\\n|0 0|0|0 0 0|0 0|0|\\n+-+-+ +-+-+ + + + +\\n|0 0 0 0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left up right right right down down down left up left down left up left left up left left down left up up up up up up up right right down right up right down down down left left up left down down down", "system": "+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0|0 0 0|0|\\n+ +-+ + + + +-+ + +\\n|0 0|0 0|0|0|0 0 0|\\n+ +-+-+ + + +-+-+ +\\n|0|0 0|0|0|0|0 0|0|\\n+ + + +-+ + + + +-+\\n|0|0|0 0 0|0 0|0 0|\\n+ + +-+-+-+-+-+-+ +\\n|0|0|0 0 0 0 0 0 0|\\n+ + + +-+ +-+-+-+-+\\n|0|E|0 0|0|0 0 0 0|\\n+ +-+-+-+ + +-+-+ +\\n|0|0 0 0|0 0 S 0|0|\\n+ + +-+ +-+-+-+-+ +\\n|0 0|0|0 0 0|0 0|0|\\n+-+-+ +-+-+ + + + +\\n|0 0 0 0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000740.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0|0 0|\\n+ + +-+ +-+ + + + +\\n|0|0 0|0 0 0|0 0|0|\\n+ +-+ +-+-+-+ +-+-+\\n|0 0|0 0 0 0|0|0 0|\\n+-+ +-+-+-+ +-+ + +\\n|0|0|0|0 0|0 0 0|0|\\n+ + + + + +-+-+-+ +\\n|0|0|0|0|0 0 0 0 0|\\n+ + + + +-+-+-+-+ +\\n|0 0|0|0|0 0 0|0 0|\\n+ +-+ + +-+ + + +-+\\n|0 0|0|0 0|0|0 0 0|\\n+-+ + +-+ +-+-+-+-+\\n|S|0|0 0|0 0|E 0 0|\\n+ + + + +-+ +-+-+ +\\n|0 0 0|0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down right up up left up right up up up left up up right down right down right right right down right right up right down down left left left left up left down down down right down right down right right right up left left", "system": "+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0|0 0|\\n+ + +-+ +-+ + + + +\\n|0|0 0|0 0 0|0 0|0|\\n+ +-+ +-+-+-+ +-+-+\\n|0 0|0 0 0 0|0|0 0|\\n+-+ +-+-+-+ +-+ + +\\n|0|0|0|0 0|0 0 0|0|\\n+ + + + + +-+-+-+ +\\n|0|0|0|0|0 0 0 0 0|\\n+ + + + +-+-+-+-+ +\\n|0 0|0|0|0 0 0|0 0|\\n+ +-+ + +-+ + + +-+\\n|0 0|0|0 0|0|0 0 0|\\n+-+ + +-+ +-+-+-+-+\\n|S|0|0 0|0 0|E 0 0|\\n+ + + + +-+ +-+-+ +\\n|0 0 0|0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000741.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0 0 0 0|\\n+ +-+ + +-+ +-+-+ +\\n|0|0 0|0|0 0|0 0 0|\\n+ +-+-+ + +-+-+ +-+\\n|0 0 0 0|0 0 0|0 0|\\n+ +-+-+-+-+-+ +-+ +\\n|0|0 S 0|0 0 0|0 0|\\n+ + + +-+ +-+-+-+-+\\n|0 0|0|E|0 0 0 0 0|\\n+-+-+ + +-+-+ +-+ +\\n|0|0 0|0 0 0|0 0|0|\\n+ + +-+-+-+ +-+-+ +\\n|0 0|0 0 0|0 0 0|0|\\n+ +-+ +-+ +-+-+ + +\\n|0 0|0|0|0 0 0|0 0|\\n+-+ + + +-+-+ +-+-+\\n|0 0 0|0 0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "left down left up up right right right up up right right down left down right right down left left down right right right right down down down left up left left up left left up", "system": "+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0 0 0 0|\\n+ +-+ + +-+ +-+-+ +\\n|0|0 0|0|0 0|0 0 0|\\n+ +-+-+ + +-+-+ +-+\\n|0 0 0 0|0 0 0|0 0|\\n+ +-+-+-+-+-+ +-+ +\\n|0|0 S 0|0 0 0|0 0|\\n+ + + +-+ +-+-+-+-+\\n|0 0|0|E|0 0 0 0 0|\\n+-+-+ + +-+-+ +-+ +\\n|0|0 0|0 0 0|0 0|0|\\n+ + +-+-+-+ +-+-+ +\\n|0 0|0 0 0|0 0 0|0|\\n+ +-+ +-+ +-+-+ + +\\n|0 0|0|0|0 0 0|0 0|\\n+-+ + + +-+-+ +-+-+\\n|0 0 0|0 0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000742.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0 0|0 0 0 0|0 0 0|\\n+-+ + +-+-+ +-+ + +\\n|0 0|0 E|0|0|0 0|0|\\n+ +-+-+-+ + + +-+-+\\n|0 0 0 0 0 0|0 0 0|\\n+ +-+-+-+-+-+ +-+ +\\n|0|0|0 0 0 0|0|0 0|\\n+ + + + +-+ +-+ + +\\n|0|0 0|0|0 0 0|0|0|\\n+ +-+ + +-+-+ + + +\\n|0 0|0|0|0 0|0 0|0|\\n+-+ +-+ + + +-+-+ +\\n|0|0 0|0 0|0 0 0|S|\\n+ +-+ +-+-+-+ + + +\\n|0 0|0 0 0 0|0|0|0|\\n+ + +-+-+-+ +-+ + +\\n|0|0 0 0 0 0 0 0|0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up up up left down down left up left up left left down down down right up right down right right down down left left up left left left up left up left up up up right right right right right up up left left left down right", "system": "+-+-+-+-+-+-+-+-+-+\\n|0 0|0 0 0 0|0 0 0|\\n+-+ + +-+-+ +-+ + +\\n|0 0|0 E|0|0|0 0|0|\\n+ +-+-+-+ + + +-+-+\\n|0 0 0 0 0 0|0 0 0|\\n+ +-+-+-+-+-+ +-+ +\\n|0|0|0 0 0 0|0|0 0|\\n+ + + + +-+ +-+ + +\\n|0|0 0|0|0 0 0|0|0|\\n+ +-+ + +-+-+ + + +\\n|0 0|0|0|0 0|0 0|0|\\n+-+ +-+ + + +-+-+ +\\n|0|0 0|0 0|0 0 0|S|\\n+ +-+ +-+-+-+ + + +\\n|0 0|0 0 0 0|0|0|0|\\n+ + +-+-+-+ +-+ + +\\n|0|0 0 0 0 0 0 0|0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000743.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0|0 0 0 0|\\n+ +-+-+ + + + +-+-+\\n|0 0|0 0|0 0|0 0 0|\\n+ + + +-+-+-+-+-+ +\\n|0|0 0|0 0 0|0|0 0|\\n+ +-+-+-+ + + + + +\\n|0|0 0 0 0|0 0|0|0|\\n+ +-+ +-+-+-+ + +-+\\n|0 0|0|0 0 S 0|0 0|\\n+-+ + +-+-+-+-+-+ +\\n|0 0|0|0 0 0|0 0|0|\\n+ +-+ + +-+ + + + +\\n|0 0|0|0|0 0 0|0|0|\\n+-+ + + +-+-+-+ + +\\n|0|0 0|0|0 0 0|0 0|\\n+ +-+ + + +-+ +-+ +\\n|0 0 0|0 0|E 0|0 0|\\n+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "right up left up left down left left down down down down left up left up right up left up up up right down right up right up right down right up right down right right down left down down right down down down left up up left down left up left left down down down right up right right down left", "system": "+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0|0 0 0 0|\\n+ +-+-+ + + + +-+-+\\n|0 0|0 0|0 0|0 0 0|\\n+ + + +-+-+-+-+-+ +\\n|0|0 0|0 0 0|0|0 0|\\n+ +-+-+-+ + + + + +\\n|0|0 0 0 0|0 0|0|0|\\n+ +-+ +-+-+-+ + +-+\\n|0 0|0|0 0 S 0|0 0|\\n+-+ + +-+-+-+-+-+ +\\n|0 0|0|0 0 0|0 0|0|\\n+ +-+ + +-+ + + + +\\n|0 0|0|0|0 0 0|0|0|\\n+-+ + + +-+-+-+ + +\\n|0|0 0|0|0 0 0|0 0|\\n+ +-+ + + +-+ +-+ +\\n|0 0 0|0 0|E 0|0 0|\\n+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000744.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0 0|0 0 0|\\n+ +-+ + + +-+-+ + +-+ +\\n|0|0 0|0|0|0 0|0|0 0|0|\\n+ + +-+ + + + + +-+ + +\\n|0|0|0|0 0|0|0 0|0 0|0|\\n+ + + +-+-+ +-+-+ +-+ +\\n|0|0|0|0 0 0 0 0 0|0 0|\\n+-+ + + +-+-+-+-+-+-+-+\\n|0 0|0 0 0|0|0 0|0 0 0|\\n+ +-+-+-+ + + + + +-+ +\\n|0|0 0 0|0|0 0|0 0|0 0|\\n+ + +-+ + +-+-+-+-+ +-+\\n|0|0 0|0|0 0 0 0 0|0 0|\\n+ +-+ + +-+-+-+-+ +-+ +\\n|0 0 0|0 0|0 0 0|0 0|0|\\n+ +-+-+-+ + + +-+-+ + +\\n|0|S 0|0|0|E|0 0 0|0|0|\\n+ + + + + +-+-+ +-+ + +\\n|0|0|0 0|0|0 0|0 0 0|0|\\n+ + +-+ + + + +-+-+-+ +\\n|0 0|0 0|0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down down left up up up up up up right up up up right up right down down right up up right right right down down left up left down down left left down right down down right right right right down right down down left left up left up left down", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0 0|0 0 0|\\n+ +-+ + + +-+-+ + +-+ +\\n|0|0 0|0|0|0 0|0|0 0|0|\\n+ + +-+ + + + + +-+ + +\\n|0|0|0|0 0|0|0 0|0 0|0|\\n+ + + +-+-+ +-+-+ +-+ +\\n|0|0|0|0 0 0 0 0 0|0 0|\\n+-+ + + +-+-+-+-+-+-+-+\\n|0 0|0 0 0|0|0 0|0 0 0|\\n+ +-+-+-+ + + + + +-+ +\\n|0|0 0 0|0|0 0|0 0|0 0|\\n+ + +-+ + +-+-+-+-+ +-+\\n|0|0 0|0|0 0 0 0 0|0 0|\\n+ +-+ + +-+-+-+-+ +-+ +\\n|0 0 0|0 0|0 0 0|0 0|0|\\n+ +-+-+-+ + + +-+-+ + +\\n|0|S 0|0|0|E|0 0 0|0|0|\\n+ + + + + +-+-+ +-+ + +\\n|0|0|0 0|0|0 0|0 0 0|0|\\n+ + +-+ + + + +-+-+-+ +\\n|0 0|0 0|0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000745.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|S 0 0 0|0|0 0 0 0 0 0|\\n+ +-+-+ + + +-+-+-+-+ +\\n|0 0|0 0|0|0 0|0 0 0|0|\\n+-+ + +-+ +-+ + +-+ + +\\n|0 0|0 0 0 0|0|E|0 0|0|\\n+ +-+-+-+ +-+ +-+ + + +\\n|0|0 0 0 0|0 0|0 0|0|0|\\n+ + +-+-+-+ +-+ +-+-+ +\\n|0|0 0|0|0 0|0 0|0 0 0|\\n+ +-+ + + +-+ + + +-+-+\\n|0|0 0 0|0 0|0|0|0 0 0|\\n+ +-+-+ +-+ + + +-+-+-+\\n|0 0 0|0 0|0|0|0 0 0 0|\\n+ +-+ +-+ + +-+-+-+ + +\\n|0|0|0 0|0|0|0 0 0|0|0|\\n+ + +-+ +-+ + +-+ +-+ +\\n|0|0 0|0 0 0|0|0|0|0 0|\\n+ + + +-+-+-+ + + + + +\\n|0|0|0 0|0 0 0|0|0 0|0|\\n+ +-+ + +-+-+ + +-+-+ +\\n|0 0 0|0 0 0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down right down left down down down down down down down down right right up right down right right right up up up right right down down right up right up up left left left up up up right up right up left left down", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|S 0 0 0|0|0 0 0 0 0 0|\\n+ +-+-+ + + +-+-+-+-+ +\\n|0 0|0 0|0|0 0|0 0 0|0|\\n+-+ + +-+ +-+ + +-+ + +\\n|0 0|0 0 0 0|0|E|0 0|0|\\n+ +-+-+-+ +-+ +-+ + + +\\n|0|0 0 0 0|0 0|0 0|0|0|\\n+ + +-+-+-+ +-+ +-+-+ +\\n|0|0 0|0|0 0|0 0|0 0 0|\\n+ +-+ + + +-+ + + +-+-+\\n|0|0 0 0|0 0|0|0|0 0 0|\\n+ +-+-+ +-+ + + +-+-+-+\\n|0 0 0|0 0|0|0|0 0 0 0|\\n+ +-+ +-+ + +-+-+-+ + +\\n|0|0|0 0|0|0|0 0 0|0|0|\\n+ + +-+ +-+ + +-+ +-+ +\\n|0|0 0|0 0 0|0|0|0|0 0|\\n+ + + +-+-+-+ + + + + +\\n|0|0|0 0|0 0 0|0|0 0|0|\\n+ +-+ + +-+-+ + +-+-+ +\\n|0 0 0|0 0 0 0|0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000746.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0|0 0 0 0 0 0|0 0 0|\\n+ +-+ +-+-+-+ + + + +-+\\n|0 0 S|0 0|0 0|0|0|0 0|\\n+ +-+-+ + + +-+ +-+-+ +\\n|0|0|0 0|0|0|0 0 0 0 0|\\n+ + + + + + +-+-+-+-+ +\\n|0|0 0|0|0|0 0|0 0 0|0|\\n+ +-+ + +-+-+ +-+-+ + +\\n|0 0|0|0 0 0|0 0 0|0 0|\\n+-+ +-+-+ +-+-+-+ + +-+\\n|0 0 0 0|0 0 0|0|0|0 0|\\n+ +-+-+ +-+ + + + +-+-+\\n|0|E|0 0|0 0|0 0|0 0 0|\\n+-+ + +-+ + +-+-+-+-+ +\\n|0 0|0 0 0|0|0 0 0 0 0|\\n+ +-+-+-+-+-+ +-+-+-+ +\\n|0|0 0 0|0 0 0|0 0 0|0|\\n+ +-+ + + +-+-+-+ +-+ +\\n|0 0 0|0|0 0|0 0 0|0 0|\\n+-+-+-+ +-+ + +-+-+ +-+\\n|0 0 0 0 0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up right right right right down left down down right down right right down down right right down left left left left down left left down right down left left up up left down left left up up right up", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0|0 0 0 0 0 0|0 0 0|\\n+ +-+ +-+-+-+ + + + +-+\\n|0 0 S|0 0|0 0|0|0|0 0|\\n+ +-+-+ + + +-+ +-+-+ +\\n|0|0|0 0|0|0|0 0 0 0 0|\\n+ + + + + + +-+-+-+-+ +\\n|0|0 0|0|0|0 0|0 0 0|0|\\n+ +-+ + +-+-+ +-+-+ + +\\n|0 0|0|0 0 0|0 0 0|0 0|\\n+-+ +-+-+ +-+-+-+ + +-+\\n|0 0 0 0|0 0 0|0|0|0 0|\\n+ +-+-+ +-+ + + + +-+-+\\n|0|E|0 0|0 0|0 0|0 0 0|\\n+-+ + +-+ + +-+-+-+-+ +\\n|0 0|0 0 0|0|0 0 0 0 0|\\n+ +-+-+-+-+-+ +-+-+-+ +\\n|0|0 0 0|0 0 0|0 0 0|0|\\n+ +-+ + + +-+-+-+ +-+ +\\n|0 0 0|0|0 0|0 0 0|0 0|\\n+-+-+-+ +-+ + +-+-+ +-+\\n|0 0 0 0 0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000747.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0|0 0 0 0|\\n+ + + +-+ +-+ + +-+-+ +\\n|0|0|0|E 0|0 0|0|0|0 0|\\n+-+ + +-+-+ +-+ + + +-+\\n|0 0|0|0 0|0 0 0|0|0|0|\\n+ + +-+ + +-+-+-+ + + +\\n|0|0|0 S|0 0|0 0 0 0|0|\\n+ +-+ +-+ +-+ +-+-+-+ +\\n|0 0|0|0|0|0 0|0|0 0 0|\\n+ + + + + + +-+ + + + +\\n|0|0 0 0|0|0 0|0|0|0|0|\\n+-+-+-+-+ +-+ + + + +-+\\n|0 0 0 0|0 0|0|0|0|0 0|\\n+ +-+-+ + + + + + +-+ +\\n|0 0|0|0|0|0|0|0 0 0|0|\\n+ + + + + + + +-+-+-+ +\\n|0|0|0|0|0|0|0 0|0 0|0|\\n+-+ + + + +-+-+ + + + +\\n|0 0|0 0 0|0 0|0|0|0 0|\\n+ +-+-+-+-+ + + + +-+ +\\n|0 0 0 0 0 0|0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up right down down down down down down down left up up up left left left down right down down left down right right right right right up right down right up up left up up up left up right up right right right up up right up left left left down down left left up right up left left down left", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0|0 0 0|0 0 0 0|\\n+ + + +-+ +-+ + +-+-+ +\\n|0|0|0|E 0|0 0|0|0|0 0|\\n+-+ + +-+-+ +-+ + + +-+\\n|0 0|0|0 0|0 0 0|0|0|0|\\n+ + +-+ + +-+-+-+ + + +\\n|0|0|0 S|0 0|0 0 0 0|0|\\n+ +-+ +-+ +-+ +-+-+-+ +\\n|0 0|0|0|0|0 0|0|0 0 0|\\n+ + + + + + +-+ + + + +\\n|0|0 0 0|0|0 0|0|0|0|0|\\n+-+-+-+-+ +-+ + + + +-+\\n|0 0 0 0|0 0|0|0|0|0 0|\\n+ +-+-+ + + + + + +-+ +\\n|0 0|0|0|0|0|0|0 0 0|0|\\n+ + + + + + + +-+-+-+ +\\n|0|0|0|0|0|0|0 0|0 0|0|\\n+-+ + + + +-+-+ + + + +\\n|0 0|0 0 0|0 0|0|0|0 0|\\n+ +-+-+-+-+ + + + +-+ +\\n|0 0 0 0 0 0|0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000748.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0|0 0 0 0|0|\\n+ +-+ + + + +-+ +-+ + +\\n|0 0|0 0|0|0 0 0|0 0|0|\\n+-+ +-+-+ +-+-+-+ +-+ +\\n|0|0|0|0 0|0 0 0|0|0 0|\\n+ + + + +-+ +-+ + +-+ +\\n|0|0|0|0|0 0|0 0|0 0 0|\\n+ + + + + +-+ + +-+-+ +\\n|0|0 0|0|0|0|0|0 0 0|0|\\n+ +-+ + + + + +-+-+ + +\\n|0 0 0|0|0 0|0 0|0 S|0|\\n+-+-+-+ +-+-+-+ +-+-+ +\\n|0 0 0 0|E 0 0|0 0 0 0|\\n+ +-+ +-+-+-+ + +-+-+-+\\n|0 0|0|0 0 0|0|0|0 0 0|\\n+-+ + + +-+ + + + +-+-+\\n|0 0|0|0|0|0 0|0|0 0 0|\\n+ +-+-+ + +-+-+ +-+-+ +\\n|0|0 0 0|0 0 0|0 0 0 0|\\n+ + +-+-+ +-+ +-+-+-+ +\\n|0 0|0 0 0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "up left left up left down down right down right right right up up up left left up up right up left left down left left up left down down left down down down down left left left down right down left down down right up right right up up right right down right up up left left", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0|0 0 0|0 0 0 0|0|\\n+ +-+ + + + +-+ +-+ + +\\n|0 0|0 0|0|0 0 0|0 0|0|\\n+-+ +-+-+ +-+-+-+ +-+ +\\n|0|0|0|0 0|0 0 0|0|0 0|\\n+ + + + +-+ +-+ + +-+ +\\n|0|0|0|0|0 0|0 0|0 0 0|\\n+ + + + + +-+ + +-+-+ +\\n|0|0 0|0|0|0|0|0 0 0|0|\\n+ +-+ + + + + +-+-+ + +\\n|0 0 0|0|0 0|0 0|0 S|0|\\n+-+-+-+ +-+-+-+ +-+-+ +\\n|0 0 0 0|E 0 0|0 0 0 0|\\n+ +-+ +-+-+-+ + +-+-+-+\\n|0 0|0|0 0 0|0|0|0 0 0|\\n+-+ + + +-+ + + + +-+-+\\n|0 0|0|0|0|0 0|0|0 0 0|\\n+ +-+-+ + +-+-+ +-+-+ +\\n|0|0 0 0|0 0 0|0 0 0 0|\\n+ + +-+-+ +-+ +-+-+-+ +\\n|0 0|0 0 0 0|0 0 0 0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000749.png", "question": "\\nYour task is to solve the maze game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The maze consists of a grid of cells\\n2. Walls are represented by the '+', '-', and '|' characters between cells, not as cells themselves\\n3. You can move horizontally or vertically between adjacent cells if there is no wall between them\\n4. You can only move through one cell at a time in any direction\\n5. The goal is to find a path from the start cell (S) to the end cell (E)\\n\\n### Direction Definitions:\\n- \"up\": Move to the cell above the current position\\n- \"down\": Move to the cell below the current position\\n- \"left\": Move to the cell to the left of the current position\\n- \"right\": Move to the cell to the right of the current position\\n\\n### Example:\\nHere's a simple maze:\\n+-+-+\\n|S 0|\\n+ + +\\n|0|E|\\n+-+-+\\n\\nThe solution to this maze would be: right down\\nBecause:\\n1. From S, move right (to the cell with 0)\\n2. From that cell, move down (to the cell with 0)\\n\\n### Current Maze State:\\nThe maze is represented in text format as follows:\\n+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0 0|0 0|S|0 0 0|\\n+ +-+-+ + + + + + +-+ +\\n|0 0 0|0|0 0|0|0 0 0|0|\\n+-+-+ + +-+-+ +-+ +-+ +\\n|0 0 0|0|E 0|0 0|0|0 0|\\n+-+-+-+ +-+ +-+ +-+ + +\\n|0 0 0 0|0 0 0|0 0 0|0|\\n+ +-+-+-+ +-+-+-+-+-+ +\\n|0|0 0|0 0 0 0 0 0 0|0|\\n+ + +-+-+ +-+-+-+ +-+ +\\n|0|0 0 0|0|0 0 0|0 0|0|\\n+ +-+-+ + + +-+ +-+ + +\\n|0 0 0|0|0|0 0|0 0|0|0|\\n+ +-+-+ +-+-+ +-+ + + +\\n|0|0 0|0|0 0 0|0 0 0|0|\\n+ + + + + +-+-+-+-+-+ +\\n|0 0|0 0|0 0 0 0 0 0 0|\\n+-+-+-+-+ +-+-+-+-+-+-+\\n|0|0 0|0 0|0 0 0 0 0|0|\\n+ + + + +-+-+-+-+ + + +\\n|0 0|0 0 0 0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+\\n\\nIn this representation:\\n- '+' characters are wall intersections\\n- '-' characters are horizontal walls\\n- '|' characters are vertical walls\\n- '0' represent the cells (paths)\\n- 'S' marks the start position\\n- 'E' marks the end position\\n\\n### Output Format Requirements:\\nYour final answer should be in the format like: right down left up\\n", "answer": "down right up right right down down down down down down down down left left left left left left up right right up left up right right down right down right up up left up left left left left up right up left", "system": "+-+-+-+-+-+-+-+-+-+-+-+\\n|0 0 0 0 0|0 0|S|0 0 0|\\n+ +-+-+ + + + + + +-+ +\\n|0 0 0|0|0 0|0|0 0 0|0|\\n+-+-+ + +-+-+ +-+ +-+ +\\n|0 0 0|0|E 0|0 0|0|0 0|\\n+-+-+-+ +-+ +-+ +-+ + +\\n|0 0 0 0|0 0 0|0 0 0|0|\\n+ +-+-+-+ +-+-+-+-+-+ +\\n|0|0 0|0 0 0 0 0 0 0|0|\\n+ + +-+-+ +-+-+-+ +-+ +\\n|0|0 0 0|0|0 0 0|0 0|0|\\n+ +-+-+ + + +-+ +-+ + +\\n|0 0 0|0|0|0 0|0 0|0|0|\\n+ +-+-+ +-+-+ +-+ + + +\\n|0|0 0|0|0 0 0|0 0 0|0|\\n+ + + + + +-+-+-+-+-+ +\\n|0 0|0 0|0 0 0 0 0 0 0|\\n+-+-+-+-+ +-+-+-+-+-+-+\\n|0|0 0|0 0|0 0 0 0 0|0|\\n+ + + + +-+-+-+-+ + + +\\n|0 0|0 0 0 0 0 0 0|0 0|\\n+-+-+-+-+-+-+-+-+-+-+-+", "category": "maze", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'maze_evaluator'}"}}
{"image": "images/000750.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| |1|1|1| |\\n|1|2| |1| |\\n|1| |2|1| |\\n|1|1|1| | |\\n| | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 2),(2, 1)", "system": "| |1|1|1| |\\n|1|2| |1| |\\n|1| |2|1| |\\n|1|1|1| | |\\n| | | | | |", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000751.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | |1|1|\\n| | | |1| |\\n| | |1|2|2|\\n| | |1| |1|\\n| | |1|1|1|\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 4),(3, 3)", "system": "| | | |1|1|\\n| | | |1| |\\n| | |1|2|2|\\n| | |1| |1|\\n| | |1|1|1|", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000752.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | |1|1|1|\\n| | |1| |1|\\n| | |1|1|1|\\n|1|1| | | |\\n| |1| | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 3),(4, 0)", "system": "| | |1|1|1|\\n| | |1| |1|\\n| | |1|1|1|\\n|1|1| | | |\\n| |1| | | |", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000753.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1| | | |\\n| |1| | | |\\n|1|1| | | |\\n| | | |1|1|\\n| | | |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 0),(4, 4)", "system": "|1|1| | | |\\n| |1| | | |\\n|1|1| | | |\\n| | | |1|1|\\n| | | |1| |", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000754.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | |1|1|1|\\n|1|1|1| |1|\\n| |1|1|1|1|\\n|1|1| | | |\\n| | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 3),(2, 0)", "system": "| | |1|1|1|\\n|1|1|1| |1|\\n| |1|1|1|1|\\n|1|1| | | |\\n| | | | | |", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000755.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|2| |2| | |\\n|2| |2| | |\\n|1|1|1| | |\\n| | | | | |\\n| | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 1),(1, 1)", "system": "|2| |2| | |\\n|2| |2| | |\\n|1|1|1| | |\\n| | | | | |\\n| | | | | |", "category": "minesweeper", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000756.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | |1|2|2|\\n| | | |1| | |\\n| | | |1|3| |\\n| | | | |1|1|\\n| | | | | | |\\n| | | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 4),(1, 5),(2, 5)", "system": "| | | |1|2|2|\\n| | | |1| | |\\n| | | |1|3| |\\n| | | | |1|1|\\n| | | | | | |\\n| | | | | | |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000757.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | |1|1|\\n| | | | |1| |\\n| | |1|1|2|1|\\n| | |1| |1| |\\n| | |1|1|2|1|\\n| | | | |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 5),(3, 3),(5, 5)", "system": "| | | | |1|1|\\n| | | | |1| |\\n| | |1|1|2|1|\\n| | |1| |1| |\\n| | |1|1|2|1|\\n| | | | |1| |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000758.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1|1| |1|1|\\n|1| |1| |1| |\\n|1|1|1| |1|1|\\n| | | | | | |\\n| | |1|1|1| |\\n| | |1| |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 1),(1, 5),(5, 3)", "system": "|1|1|1| |1|1|\\n|1| |1| |1| |\\n|1|1|1| |1|1|\\n| | | | | | |\\n| | |1|1|1| |\\n| | |1| |1| |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000759.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | |\\n|1|1| | |1|1|\\n| |2| | |1| |\\n| |2| | |1|1|\\n|1|1| | | | |\\n| | | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 0),(2, 5),(3, 0)", "system": "| | | | | | |\\n|1|1| | |1|1|\\n| |2| | |1| |\\n| |2| | |1|1|\\n|1|1| | | | |\\n| | | | | | |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000760.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | |\\n| | | |1|1|1|\\n| | | |1| |1|\\n| | | |1|1|1|\\n|1|2|1|1| | |\\n| |2| |1| | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 4),(5, 0),(5, 2)", "system": "| | | | | | |\\n| | | |1|1|1|\\n| | | |1| |1|\\n| | | |1|1|1|\\n|1|2|1|1| | |\\n| |2| |1| | |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000761.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | |\\n|1|1| | | | |\\n| |2|1| | | |\\n|2| |2|1|1| |\\n|1|1|2| |1| |\\n| | |1|1|1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 0),(3, 1),(4, 3)", "system": "| | | | | | |\\n|1|1| | | | |\\n| |2|1| | | |\\n|2| |2|1|1| |\\n|1|1|2| |1| |\\n| | |1|1|1| |", "category": "minesweeper", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000762.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| |1| |1| | | |\\n| |1|1|1| |1|1|\\n|1|1| | | |1| |\\n| |1| | | |1|1|\\n|2|2|1| | | | |\\n|1| |1| | | | |\\n|1|1|1| | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 2),(2, 6),(3, 0),(5, 1)", "system": "| |1| |1| | | |\\n| |1|1|1| |1|1|\\n|1|1| | | |1| |\\n| |1| | | |1|1|\\n|2|2|1| | | | |\\n|1| |1| | | | |\\n|1|1|1| | | | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000763.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1| | | | | |\\n| |1| | | |1|1|\\n|1|1| | | |1| |\\n| | | | | |1|1|\\n| | | | | | | |\\n|1|1|1|1|1| | |\\n| |1|1| |1| | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 0),(2, 6),(6, 0),(6, 3)", "system": "|1|1| | | | | |\\n| |1| | | |1|1|\\n|1|1| | | |1| |\\n| | | | | |1|1|\\n| | | | | | | |\\n|1|1|1|1|1| | |\\n| |1|1| |1| | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000764.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1| |1|1| |1| |\\n|1|1|1|1|1|1| |\\n| | | | | | | |\\n| | | | |1|1|1|\\n|1|1| | |1| |1|\\n| |1| | |1|1|1|\\n|1|1| | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 1),(0, 4),(4, 5),(5, 0)", "system": "|1| |1|1| |1| |\\n|1|1|1|1|1|1| |\\n| | | | | | | |\\n| | | | |1|1|1|\\n|1|1| | |1| |1|\\n| |1| | |1|1|1|\\n|1|1| | | | | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000765.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1| | | | | |\\n| |1| | | | | |\\n|1|1| | | | | |\\n| | |1|1|1| | |\\n| | |1| |1| | |\\n|1|2|2|2|1| | |\\n| |2| |1| | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 0),(4, 3),(6, 0),(6, 2)", "system": "|1|1| | | | | |\\n| |1| | | | | |\\n|1|1| | | | | |\\n| | |1|1|1| | |\\n| | |1| |1| | |\\n|1|2|2|2|1| | |\\n| |2| |1| | | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000766.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|2|1|1| | | |\\n| |3| |1| | | |\\n|2| |2|1| | | |\\n|1|1|1| | | | |\\n| | |1|1|1| | |\\n| | |1| |1| | |\\n| | |1|1|1| | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 0),(1, 2),(2, 1),(5, 3)", "system": "|1|2|1|1| | | |\\n| |3| |1| | | |\\n|2| |2|1| | | |\\n|1|1|1| | | | |\\n| | |1|1|1| | |\\n| | |1| |1| | |\\n| | |1|1|1| | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000767.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | |1| |1| | |\\n| | |2|2|2| | |\\n| | |1| |2|1|1|\\n| | |1|1|3| |2|\\n| | | | |2| |2|\\n| | | | |1|1|1|\\n| | | | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 3),(2, 3),(3, 5),(4, 5)", "system": "| | |1| |1| | |\\n| | |2|2|2| | |\\n| | |1| |2|1|1|\\n| | |1|1|3| |2|\\n| | | | |2| |2|\\n| | | | |1|1|1|\\n| | | | | | | |", "category": "minesweeper", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000768.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1|1| | |1| |1|\\n|1| |1| | |1|1|1|\\n|1|1|1| | | | | |\\n| | | | | | | | |\\n|1|1| |1|2|2|1| |\\n| |1| |1| | |1| |\\n|1|1| |1|2|2|1| |\\n| | | | | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 6),(1, 1),(5, 0),(5, 4),(5, 5)", "system": "|1|1|1| | |1| |1|\\n|1| |1| | |1|1|1|\\n|1|1|1| | | | | |\\n| | | | | | | | |\\n|1|1| |1|2|2|1| |\\n| |1| |1| | |1| |\\n|1|1| |1|2|2|1| |\\n| | | | | | | | |", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000769.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | | | |\\n| | | | | | | | |\\n|1|1|2|1|1| | | |\\n|1| |2| |1|1|1|1|\\n|1|1|2|1|1|1| |1|\\n| | | | | |2|2|2|\\n|1|1|1| | |1| |1|\\n|1| |1| | |1|1|1|\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(3, 1),(3, 3),(4, 6),(6, 6),(7, 1)", "system": "| | | | | | | | |\\n| | | | | | | | |\\n|1|1|2|1|1| | | |\\n|1| |2| |1|1|1|1|\\n|1|1|2|1|1|1| |1|\\n| | | | | |2|2|2|\\n|1|1|1| | |1| |1|\\n|1| |1| | |1|1|1|", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000770.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | | | |\\n|1|1| | | | | | |\\n| |1| |1|2|2|1| |\\n|1|1| |1| | |1| |\\n| | | |1|2|2|1| |\\n| |1|1|1| | | | |\\n| |1| |1| | |1|1|\\n| |1|1|1| | |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 0),(3, 4),(3, 5),(6, 2),(7, 7)", "system": "| | | | | | | | |\\n|1|1| | | | | | |\\n| |1| |1|2|2|1| |\\n|1|1| |1| | |1| |\\n| | | |1|2|2|1| |\\n| |1|1|1| | | | |\\n| |1| |1| | |1|1|\\n| |1|1|1| | |1| |", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000771.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | | | |\\n|1|1| | | | | | |\\n| |1| | | |1|1|1|\\n|2|2|1| | |1| |1|\\n|1| |1| | |1|1|1|\\n|1|1|2|1|1| | | |\\n| | |1| |1|1|1|1|\\n| | |1|1|1|1| |1|\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 0),(3, 6),(4, 1),(6, 3),(7, 6)", "system": "| | | | | | | | |\\n|1|1| | | | | | |\\n| |1| | | |1|1|1|\\n|2|2|1| | |1| |1|\\n|1| |1| | |1|1|1|\\n|1|1|2|1|1| | | |\\n| | |1| |1|1|1|1|\\n| | |1|1|1|1| |1|", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000772.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1|1| | | | | | |\\n| |1| | | | |1|1|\\n|2|2| | | | |1| |\\n| |1| | | |1|2|2|\\n|1|1| | | |1| |1|\\n| | | | | |1|1|1|\\n| | | |1|1|1| | |\\n| | | |1| |1| | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(1, 0),(2, 7),(3, 0),(4, 6),(7, 4)", "system": "|1|1| | | | | | |\\n| |1| | | | |1|1|\\n|2|2| | | | |1| |\\n| |1| | | |1|2|2|\\n|1|1| | | |1| |1|\\n| | | | | |1|1|1|\\n| | | |1|1|1| | |\\n| | | |1| |1| | |", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000773.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | | | |\\n|1|1|1| |1|1|1| |\\n|1| |1| |1| |1| |\\n|1|1|1| |1|1|1| |\\n| | | | | | |1|1|\\n|1|1| | | | |1| |\\n| |1| | | |1|2|2|\\n|1|1| | | |1| |1|\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 1),(2, 5),(5, 7),(6, 0),(7, 6)", "system": "| | | | | | | | |\\n|1|1|1| |1|1|1| |\\n|1| |1| |1| |1| |\\n|1|1|1| |1|1|1| |\\n| | | | | | |1|1|\\n|1|1| | | | |1| |\\n| |1| | | |1|2|2|\\n|1|1| | | |1| |1|", "category": "minesweeper", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000774.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | |1| |1| | | |\\n|1|1| |1|1|1| | | |\\n| |1| | | | | | | |\\n|1|1| | | |1|1|2|1|\\n| | | | | |1| |2| |\\n| | | | | |1|1|2|1|\\n| | | | | |1|1|1| |\\n| | | |1|1|2| |1| |\\n| | | |1| |2|1|1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 4),(2, 0),(4, 6),(4, 8),(7, 6),(8, 4)", "system": "| | | |1| |1| | | |\\n|1|1| |1|1|1| | | |\\n| |1| | | | | | | |\\n|1|1| | | |1|1|2|1|\\n| | | | | |1| |2| |\\n| | | | | |1|1|2|1|\\n| | | | | |1|1|1| |\\n| | | |1|1|2| |1| |\\n| | | |1| |2|1|1| |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000775.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | |1| |1| |1| |\\n| | | |1|1|1| |1|1|\\n| | | | |1|1|1| | |\\n| |1|1|1|1| |1| | |\\n| |1| |1|1|1|1| | |\\n| |1|1|1| | | | | |\\n| | | | | | | | | |\\n|1|1| | | |1|1|1| |\\n| |1| | | |1| |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 4),(0, 8),(3, 5),(4, 2),(8, 0),(8, 6)", "system": "| | | |1| |1| |1| |\\n| | | |1|1|1| |1|1|\\n| | | | |1|1|1| | |\\n| |1|1|1|1| |1| | |\\n| |1| |1|1|1|1| | |\\n| |1|1|1| | | | | |\\n| | | | | | | | | |\\n|1|1| | | |1|1|1| |\\n| |1| | | |1| |1| |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000776.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | | | | | | | | |\\n|1|1| | | | | | | |\\n| |1| | | | | |1|1|\\n|1|1| | | | |1|3| |\\n| | |1|1|1| |1| | |\\n| | |1| |1| |1|2|2|\\n| | |1|1|1| | | | |\\n| |1|1|1| | | | | |\\n| |1| |1| | | | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(2, 0),(3, 8),(4, 7),(4, 8),(5, 3),(8, 2)", "system": "| | | | | | | | | |\\n|1|1| | | | | | | |\\n| |1| | | | | |1|1|\\n|1|1| | | | |1|3| |\\n| | |1|1|1| |1| | |\\n| | |1| |1| |1|2|2|\\n| | |1|1|1| | | | |\\n| |1|1|1| | | | | |\\n| |1| |1| | | | | |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000777.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | |1| |1| |1| |1|\\n| | |1|1|1| |1|1|1|\\n| | | | | | | |1|1|\\n| | | | | | | |1| |\\n| | | | | | | |1|1|\\n| | | | | | | | | |\\n| | | |1|1|1| | | |\\n|2|2|1|1| |1| | | |\\n| | |1|1|1|1| | | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 3),(0, 7),(3, 8),(7, 4),(8, 0),(8, 1)", "system": "| | |1| |1| |1| |1|\\n| | |1|1|1| |1|1|1|\\n| | | | | | | |1|1|\\n| | | | | | | |1| |\\n| | | | | | | |1|1|\\n| | | | | | | | | |\\n| | | |1|1|1| | | |\\n|2|2|1|1| |1| | | |\\n| | |1|1|1|1| | | |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000778.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n|1| |1| | | | | | |\\n|1|1|1| | | | | | |\\n| | | | | | | | | |\\n| |1|1|1| | | | | |\\n| |1| |1| | | | | |\\n| |1|1|2|1|2|1|2|1|\\n| | | |1| |2| |2| |\\n| | | |1|1|2|1|3|2|\\n| | | | | | | |1| |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 1),(4, 2),(6, 4),(6, 6),(6, 8),(8, 8)", "system": "|1| |1| | | | | | |\\n|1|1|1| | | | | | |\\n| | | | | | | | | |\\n| |1|1|1| | | | | |\\n| |1| |1| | | | | |\\n| |1|1|2|1|2|1|2|1|\\n| | | |1| |2| |2| |\\n| | | |1|1|2|1|3|2|\\n| | | | | | | |1| |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000779.png", "question": "Your task is to solve the Minesweeper puzzle according to the rules and the current state below:\\n\\n### Game Rules:\\n1. Minesweeper is played on a grid where some cells contain hidden mines.\\n2. Numbers on the grid represent how many mines are adjacent to that cell (including diagonally).\\n3. A cell with no number means it has no adjacent mines (this is represented as a blank cell).\\n4. The goal is to identify the location of all mines without detonating any.\\n5. You can mark a cell as containing a mine if you're certain based on logical deduction. \\n\\n### Initial State:\\n| | |1|1|1| |1| |1|\\n| | |1| |1| |1|1|1|\\n| | |1|1|1| |1|1|1|\\n| | | | | | |1| |2|\\n| | | | | | |1|2| |\\n| |1|1|1| | | |1|1|\\n| |1| |1|1|1|1| | |\\n| |1|1|1|1| |1| | |\\n| | | | |1|1|1| | |\\n\\n### Output Format Requirements:\\nYour final answer should list all mine locations using 0-based coordinates in the format (row,col).\\n\\n**Example answer format:**\\n(0,5),(0,7),(1,1),(1,2)\\n", "answer": "(0, 7),(1, 3),(3, 7),(4, 8),(6, 2),(7, 5)", "system": "| | |1|1|1| |1| |1|\\n| | |1| |1| |1|1|1|\\n| | |1|1|1| |1|1|1|\\n| | | | | | |1| |2|\\n| | | | | | |1|2| |\\n| |1|1|1| | | |1|1|\\n| |1| |1|1|1|1| | |\\n| |1|1|1|1| |1| | |\\n| | | | |1|1|1| | |", "category": "minesweeper", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'minesweeper_evaluator'}"}}
{"image": "images/000780.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (3,1) (2,1)\\nDirection: down\\nApples: (1,5)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "right up up right right right", "system": "Grid: 6x6\\nSnake: (3,1) (2,1)\\nDirection: down\\nApples: (1,5)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000781.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (5,4) (5,5)\\nDirection: left\\nApples: (1,5)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up up right", "system": "Grid: 6x6\\nSnake: (5,4) (5,5)\\nDirection: left\\nApples: (1,5)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000782.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (1,4) (0,4)\\nDirection: down\\nApples: (0,1)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "left up left left", "system": "Grid: 6x6\\nSnake: (1,4) (0,4)\\nDirection: down\\nApples: (0,1)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000783.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (2,4) (2,5)\\nDirection: left\\nApples: (3,1)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down left left left", "system": "Grid: 6x6\\nSnake: (2,4) (2,5)\\nDirection: left\\nApples: (3,1)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000784.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (3,3) (3,4)\\nDirection: left\\nApples: (3,5)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up right down right", "system": "Grid: 6x6\\nSnake: (3,3) (3,4)\\nDirection: left\\nApples: (3,5)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000785.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 6x6\\nSnake: (3,3) (2,3)\\nDirection: down\\nApples: (5,3)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down", "system": "Grid: 6x6\\nSnake: (3,3) (2,3)\\nDirection: down\\nApples: (5,3)\\nGoal: Eat 1 apple", "category": "nibbles", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000786.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (0,2) (0,3)\\nDirection: left\\nApples: (5,3) (2,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down down down down right", "system": "Grid: 7x7\\nSnake: (0,2) (0,3)\\nDirection: left\\nApples: (5,3) (2,2)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000787.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (5,2) (6,2)\\nDirection: up\\nApples: (6,1) (3,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up left down down down", "system": "Grid: 7x7\\nSnake: (5,2) (6,2)\\nDirection: up\\nApples: (6,1) (3,2)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000788.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (0,5) (1,5)\\nDirection: up\\nApples: (5,4) (6,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "left down down down down down down left left", "system": "Grid: 7x7\\nSnake: (0,5) (1,5)\\nDirection: up\\nApples: (5,4) (6,2)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000789.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (5,3) (6,3)\\nDirection: up\\nApples: (0,5) (2,3)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up up up right right", "system": "Grid: 7x7\\nSnake: (5,3) (6,3)\\nDirection: up\\nApples: (0,5) (2,3)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000790.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (5,0) (4,0)\\nDirection: down\\nApples: (2,1) (1,5)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "right up up up up right right right right", "system": "Grid: 7x7\\nSnake: (5,0) (4,0)\\nDirection: down\\nApples: (2,1) (1,5)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000791.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 7x7\\nSnake: (4,3) (4,2)\\nDirection: right\\nApples: (5,0) (0,3)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up up left down down down down down left left", "system": "Grid: 7x7\\nSnake: (4,3) (4,2)\\nDirection: right\\nApples: (5,0) (0,3)\\nGoal: Eat 2 apples", "category": "nibbles", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000792.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (0,6) (0,7)\\nDirection: left\\nApples: (5,1) (6,0) (2,6)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down down down down left left left left left down left", "system": "Grid: 8x8\\nSnake: (0,6) (0,7)\\nDirection: left\\nApples: (5,1) (6,0) (2,6)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000793.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (3,4) (3,5)\\nDirection: left\\nApples: (6,6) (5,5) (6,7)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down right down right right", "system": "Grid: 8x8\\nSnake: (3,4) (3,5)\\nDirection: left\\nApples: (6,6) (5,5) (6,7)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000794.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (4,7) (3,7)\\nDirection: down\\nApples: (6,3) (7,6) (7,5)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down down left left up left left", "system": "Grid: 8x8\\nSnake: (4,7) (3,7)\\nDirection: down\\nApples: (6,3) (7,6) (7,5)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000795.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (7,7) (6,7)\\nDirection: down\\nApples: (3,1) (2,0) (1,0)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "left up up up up left left left left left up left up", "system": "Grid: 8x8\\nSnake: (7,7) (6,7)\\nDirection: down\\nApples: (3,1) (2,0) (1,0)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000796.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (2,2) (2,1)\\nDirection: right\\nApples: (5,5) (5,4) (4,7)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down down right right right up right right", "system": "Grid: 8x8\\nSnake: (2,2) (2,1)\\nDirection: right\\nApples: (5,5) (5,4) (4,7)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000797.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 8x8\\nSnake: (5,5) (4,5)\\nDirection: down\\nApples: (6,4) (5,6) (6,1)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "right down left left left left left", "system": "Grid: 8x8\\nSnake: (5,5) (4,5)\\nDirection: down\\nApples: (6,4) (5,6) (6,1)\\nGoal: Eat 3 apples", "category": "nibbles", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000798.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (5,0) (5,1)\\nDirection: left\\nApples: (7,8) (2,0) (6,3) (6,7)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up right down down down down right right right right right right down right", "system": "Grid: 9x9\\nSnake: (5,0) (5,1)\\nDirection: left\\nApples: (7,8) (2,0) (6,3) (6,7)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000799.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (4,4) (5,4)\\nDirection: up\\nApples: (0,8) (8,2) (3,5) (8,7)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up right up up up right right right down down down down down down down down left left left left left left", "system": "Grid: 9x9\\nSnake: (4,4) (5,4)\\nDirection: up\\nApples: (0,8) (8,2) (3,5) (8,7)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000800.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (5,2) (5,3)\\nDirection: left\\nApples: (5,5) (4,7) (8,4) (8,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down down right right up up up right up right right", "system": "Grid: 9x9\\nSnake: (5,2) (5,3)\\nDirection: left\\nApples: (5,5) (4,7) (8,4) (8,2)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000801.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (0,8) (1,8)\\nDirection: up\\nApples: (4,1) (8,3) (3,6) (8,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "left down down down left down left left left left left down down down down right right", "system": "Grid: 9x9\\nSnake: (0,8) (1,8)\\nDirection: up\\nApples: (4,1) (8,3) (3,6) (8,2)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000802.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (7,8) (7,7)\\nDirection: right\\nApples: (0,1) (4,2) (6,8) (1,1)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up left left left left left left up up up left up", "system": "Grid: 9x9\\nSnake: (7,8) (7,7)\\nDirection: right\\nApples: (0,1) (4,2) (6,8) (1,1)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000803.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 9x9\\nSnake: (7,0) (7,1)\\nDirection: left\\nApples: (3,7) (1,3) (7,7) (0,2)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up up up up up up right right down right down down right right right right down down down down", "system": "Grid: 9x9\\nSnake: (7,0) (7,1)\\nDirection: left\\nApples: (3,7) (1,3) (7,7) (0,2)\\nGoal: Eat 4 apples", "category": "nibbles", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000804.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (0,1) (0,2)\\nDirection: left\\nApples: (9,2) (0,5) (8,5) (8,2) (0,0)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down left up right right right right right down down down down down down down down left left left down", "system": "Grid: 10x10\\nSnake: (0,1) (0,2)\\nDirection: left\\nApples: (9,2) (0,5) (8,5) (8,2) (0,0)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000805.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (1,1) (1,2)\\nDirection: left\\nApples: (5,5) (7,6) (5,4) (8,4) (0,9)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up right right right right right right right right down down down down down left left left left left down down down right up right", "system": "Grid: 10x10\\nSnake: (1,1) (1,2)\\nDirection: left\\nApples: (5,5) (7,6) (5,4) (8,4) (0,9)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000806.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (3,2) (3,1)\\nDirection: right\\nApples: (7,8) (0,4) (9,1) (4,2) (0,1)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up up left up right right right down down down down left left down down down down left down right right up up right right right right right", "system": "Grid: 10x10\\nSnake: (3,2) (3,1)\\nDirection: right\\nApples: (7,8) (0,4) (9,1) (4,2) (0,1)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000807.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (1,6) (0,6)\\nDirection: down\\nApples: (2,3) (5,5) (5,2) (4,0) (5,9)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down left left left down down left left left down right right right right right right right right right", "system": "Grid: 10x10\\nSnake: (1,6) (0,6)\\nDirection: down\\nApples: (2,3) (5,5) (5,2) (4,0) (5,9)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000808.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (1,9) (1,8)\\nDirection: right\\nApples: (3,8) (9,0) (9,2) (5,0) (0,4)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "down down left up up up left left left left down down down down down left left left left down down down down right right", "system": "Grid: 10x10\\nSnake: (1,9) (1,8)\\nDirection: right\\nApples: (3,8) (9,0) (9,2) (5,0) (0,4)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000809.png", "question": "\\n        You are a puzzle solver focusing on Snake puzzles.\\n\\n### Game Rules:\\n1. Control a snake to move around the grid using directional commands (up, down, left, right)\\n2. The snake must eat all apples on the grid to win\\n3. When the snake eats an apple, it grows longer by one segment\\n4. The snake cannot collide with walls or itself\\n5. The snake moves one cell at a time in the chosen direction\\n\\n### Initial state:\\nGrid: 10x10\\nSnake: (1,5) (1,4)\\nDirection: right\\nApples: (6,2) (4,9) (9,5) (0,5) (4,8)\\n\\n### Input:\\n- A grid showing the initial state with the snake and apples\\n- Snake head is marked with 'H', snake body with 'S', apples with 'A', empty cells with '.'\\n\\n### Goal:\\nFind a sequence of directional moves to eat all apples without the snake colliding with walls or itself.\\n\\n### Output Format Requirements:\\nYour answer should be a sequence of directional moves separated by spaces.\\nValid moves are: up, down, left, right\\nExample: up right down left up\\n        ", "answer": "up right down down down down right right right down down down down down left left left left up up up left left left", "system": "Grid: 10x10\\nSnake: (1,5) (1,4)\\nDirection: right\\nApples: (6,2) (4,9) (9,5) (0,5) (4,8)\\nGoal: Eat 5 apples", "category": "nibbles", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nibbles_evaluator'}"}}
{"image": "images/000810.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[4], [], [4], [4]]\\nColumn clues: [[1, 2], [1, 2], [1, 2], [1, 2]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXXX\\n....\\nXXXX\\nXXXX", "system": "[[[4], [], [4], [4]], [[1, 2], [1, 2], [1, 2], [1, 2]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000811.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[4], [1, 1], [1, 1], [4]]\\nColumn clues: [[4], [1, 1], [1, 1], [4]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXXX\\nX..X\\nX..X\\nXXXX", "system": "[[[4], [1, 1], [1, 1], [4]], [[4], [1, 1], [1, 1], [4]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000812.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [1, 1], [1, 1], [3]]\\nColumn clues: [[3], [1], [2], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "....\\nX..X\\nX.X.\\nXXX.", "system": "[[[], [1, 1], [1, 1], [3]], [[3], [1], [2], [1]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000813.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1], [1], [1, 1]]\\nColumn clues: [[1], [1], [1], [1, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "...X\\n..X.\\n.X..\\nX..X", "system": "[[[1], [1], [1], [1, 1]], [[1], [1], [1], [1, 1]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000814.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [1, 2], [2, 1], [2, 1]]\\nColumn clues: [[3], [2], [1], [3]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "....\\nX.XX\\nXX.X\\nXX.X", "system": "[[[], [1, 2], [2, 1], [2, 1]], [[3], [2], [1], [3]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000815.png", "question": "\\nThis is a 4x4 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [2], [4], [2]]\\nColumn clues: [[1], [3], [3], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "....\\n.XX.\\nXXXX\\n.XX.", "system": "[[[], [2], [4], [2]], [[1], [3], [3], [1]]]", "category": "nonogram", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000816.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1, 1], [1], [1], []]\\nColumn clues: [[1], [1], [1], [1], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "X....\\n.X..X\\n...X.\\n..X..\\n.....", "system": "[[[1], [1, 1], [1], [1], []], [[1], [1], [1], [1], [1]]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000817.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [], [1], [1], [1]]\\nColumn clues: [[1], [], [1], [], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": ".....\\n.....\\n....X\\nX....\\n..X..", "system": "[[[], [], [1], [1], [1]], [[1], [], [1], [], [1]]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000818.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[3], [1], [4], [4], [1, 1]]\\nColumn clues: [[3], [1, 2], [1, 3], [4], []]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": ".XXX.\\n...X.\\nXXXX.\\nXXXX.\\nX.X..", "system": "[[[3], [1], [4], [4], [1, 1]], [[3], [1, 2], [1, 3], [4], []]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000819.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1, 1, 1], [1, 1], [1], [1, 1], [1]]\\nColumn clues: [[2, 1], [], [1, 1, 1], [], [2, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "X.X.X\\nX...X\\n..X..\\nX...X\\n..X..", "system": "[[[1, 1, 1], [1, 1], [1], [1, 1], [1]], [[2, 1], [], [1, 1, 1], [], [2, 1]]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000820.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[5], [3, 1], [1, 1], [2, 2], [3, 1]]\\nColumn clues: [[5], [2, 2], [2, 1], [1, 1], [5]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXXXX\\nXXX.X\\nX...X\\nXX.XX\\nXXX.X", "system": "[[[5], [3, 1], [1, 1], [2, 2], [3, 1]], [[5], [2, 2], [2, 1], [1, 1], [5]]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000821.png", "question": "\\nThis is a 5x5 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[2, 2], [1, 1], [1], [2], [1]]\\nColumn clues: [[2, 1], [1, 1], [2, 1], [1], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XX.XX\\nX.X..\\n..X..\\nXX...\\n..X..", "system": "[[[2, 2], [1, 1], [1], [2], [1]], [[2, 1], [1, 1], [2, 1], [1], [1]]]", "category": "nonogram", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000822.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[2], [5], [1, 3], [2], [1], [3]]\\nColumn clues: [[], [2], [2], [3, 2], [3, 1], [3, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "..XX..\\n.XXXXX\\n.X.XXX\\n....XX\\n...X..\\n...XXX", "system": "[[[2], [5], [1, 3], [2], [1], [3]], [[], [2], [2], [3, 2], [3, 1], [3, 1]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000823.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[2], [], [1, 1], [], [], [2]]\\nColumn clues: [[1], [], [1, 1], [1, 1], [], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "..XX..\\n......\\nX....X\\n......\\n......\\n..XX..", "system": "[[[2], [], [1, 1], [], [], [2]], [[1], [], [1, 1], [1, 1], [], [1]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000824.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[6], [3], [1, 1], [1, 1], [2, 1], [3, 2]]\\nColumn clues: [[1, 1, 2], [1, 2], [1, 1, 1], [2], [2, 1], [6]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXXXXX\\n...XXX\\nX....X\\n..X..X\\nXX...X\\nXXX.XX", "system": "[[[6], [3], [1, 1], [1, 1], [2, 1], [3, 2]], [[1, 1, 2], [1, 2], [1, 1, 1], [2], [2, 1], [6]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000825.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[2], [3], [], [2], [2, 2], [1, 1]]\\nColumn clues: [[1], [2], [1, 1], [2, 1], [2, 2], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "...XX.\\n..XXX.\\n......\\n..XX..\\nXX..XX\\n.X..X.", "system": "[[[2], [3], [], [2], [2, 2], [1, 1]], [[1], [2], [1, 1], [2, 1], [2, 2], [1]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000826.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1], [1], [1, 1], [1], [1]]\\nColumn clues: [[1], [], [], [1, 1], [1, 1], [1, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "...X..\\n.....X\\n....X.\\nX..X..\\n.....X\\n....X.", "system": "[[[1], [1], [1], [1, 1], [1], [1]], [[1], [], [], [1, 1], [1, 1], [1, 1]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000827.png", "question": "\\nThis is a 6x6 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[5], [4], [2, 1], [4], [1], []]\\nColumn clues: [[], [1], [4], [4], [2, 1], [5]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": ".XXXXX\\n..XXXX\\n..XX.X\\n..XXXX\\n.....X\\n......", "system": "[[[5], [4], [2, 1], [4], [1], []], [[], [1], [4], [4], [2, 1], [5]]]", "category": "nonogram", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000828.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[5, 1], [2, 2], [1, 3], [1, 1], [1, 1, 1], [2, 1], [1, 4]]\\nColumn clues: [[7], [2, 1], [1, 1], [1, 1, 1, 1], [1, 1, 1], [2, 2], [2, 2]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXXXX.X\\nXX...XX\\nX..XXX.\\nX.....X\\nX..X..X\\nXX...X.\\nX.XXXX.", "system": "[[[5, 1], [2, 2], [1, 3], [1, 1], [1, 1, 1], [2, 1], [1, 4]], [[7], [2, 1], [1, 1], [1, 1, 1, 1], [1, 1, 1], [2, 2], [2, 2]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000829.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1, 2], [1], [1, 1, 1], [1, 1], [2, 1, 1], [1]]\\nColumn clues: [[1, 3], [1], [1], [1], [1, 1], [2, 1], [1, 2]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "X......\\n..X.XX.\\n.....X.\\nX...X.X\\nX....X.\\nXX.X..X\\n......X", "system": "[[[1], [1, 2], [1], [1, 1, 1], [1, 1], [2, 1, 1], [1]], [[1, 3], [1], [1], [1], [1, 1], [2, 1], [1, 2]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000830.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [], [1], [1, 1], [1], [], [1, 1, 1]]\\nColumn clues: [[1], [1], [1], [1, 1], [], [], [1, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": ".......\\n.......\\n.X.....\\n...X..X\\n..X....\\n.......\\nX..X..X", "system": "[[[], [], [1], [1, 1], [1], [], [1, 1, 1]], [[1], [1], [1], [1, 1], [], [], [1, 1]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000831.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [2], [2], [1, 2], [1, 1], [1, 3], [5, 1]]\\nColumn clues: [[4], [1, 1], [3, 1], [1, 2], [2, 2], [1, 1], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "....X..\\n....XX.\\n.XX....\\nX.XX...\\nX.X....\\nX..XXX.\\nXXXXX.X", "system": "[[[1], [2], [2], [1, 2], [1, 1], [1, 3], [5, 1]], [[4], [1, 1], [3, 1], [1, 2], [2, 2], [1, 1], [1]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000832.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[2, 1, 2], [1, 1], [1, 1], [1, 1], [], [2, 1, 2], []]\\nColumn clues: [[1, 1], [2, 1], [2], [1, 1], [2], [2, 1], [1, 1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XX.X.XX\\n.X...X.\\n..X.X..\\n..X.X..\\n.......\\nXX.X.XX\\n.......", "system": "[[[2, 1, 2], [1, 1], [1, 1], [1, 1], [], [2, 1, 2], []], [[1, 1], [2, 1], [2], [1, 1], [2], [2, 1], [1, 1]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000833.png", "question": "\\nThis is a 7x7 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[3, 3], [1, 1], [1], [1], [1, 1], [1], [1, 4]]\\nColumn clues: [[3], [1, 1, 1], [1], [1, 1], [1, 1], [1, 1], [2, 3]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "XXX.XXX\\nX.....X\\nX......\\n.X.....\\n...X..X\\n......X\\n.X.XXXX", "system": "[[[3, 3], [1, 1], [1], [1], [1, 1], [1], [1, 4]], [[3], [1, 1, 1], [1], [1, 1], [1, 1], [1, 1], [2, 3]]]", "category": "nonogram", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000834.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1, 1], [1], [1, 1], [1], [1], [1], []]\\nColumn clues: [[1], [], [1, 1], [1], [1, 1], [1], [1, 1], []]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "...X....\\n..X..X..\\n....X...\\nX.....X.\\n..X.....\\n....X...\\n......X.\\n........", "system": "[[[1], [1, 1], [1], [1, 1], [1], [1], [1], []], [[1], [], [1, 1], [1], [1, 1], [1], [1, 1], []]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000835.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [1], [1, 2, 2], [2, 1], [8], [8], [8], [6]]\\nColumn clues: [[5], [5], [1, 4], [1, 4], [5], [1, 4], [2, 4], [3]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "........\\n......X.\\nX.XX.XX.\\nXX..X...\\nXXXXXXXX\\nXXXXXXXX\\nXXXXXXXX\\n.XXXXXX.", "system": "[[[], [1], [1, 2, 2], [2, 1], [8], [8], [8], [6]], [[5], [5], [1, 4], [1, 4], [5], [1, 4], [2, 4], [3]]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000836.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[], [1, 2, 1], [4], [2], [2], [1, 2, 1], [], []]\\nColumn clues: [[1], [1], [1], [5], [5], [1], [1], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "........\\nX..XX..X\\n..XXXX..\\n...XX...\\n...XX...\\n.X.XX.X.\\n........\\n........", "system": "[[[], [1, 2, 1], [4], [2], [2], [1, 2, 1], [], []], [[1], [1], [1], [5], [5], [1], [1], [1]]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000837.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1, 1, 1], [1], [2, 1], [1], [1, 1, 1], [1], [2], [1, 5]]\\nColumn clues: [[1, 1, 2, 1], [1], [1, 1], [1, 1], [1], [1, 2], [2], [4]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "X..X.X..\\n.......X\\nXX.....X\\n.......X\\nX.X....X\\nX.......\\n.....XX.\\nX.XXXXX.", "system": "[[[1, 1, 1], [1], [2, 1], [1], [1, 1, 1], [1], [2], [1, 5]], [[1, 1, 2, 1], [1], [1, 1], [1, 1], [1], [1, 2], [2], [4]]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000838.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1, 2], [1, 1], [1, 1], [2, 1, 1, 1], [1], [1, 1], [1, 2, 1], [1, 1]]\\nColumn clues: [[3, 2], [1, 1], [1, 1], [1, 2], [1], [1, 2, 1], [2, 1], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "..X..XX.\\n.X....X.\\nX....X..\\nXX.X.X.X\\nX.......\\n...X.X..\\nX..XX.X.\\nX.X.....", "system": "[[[1, 2], [1, 1], [1, 1], [2, 1, 1, 1], [1], [1, 1], [1, 2, 1], [1, 1]], [[3, 2], [1, 1], [1, 1], [1, 2], [1], [1, 2, 1], [2, 1], [1]]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000839.png", "question": "\\nThis is a 8x8 Nonogram puzzle  and your task is to solve it.\\n\\n### Game Rules\\n- The numbers outside each row or column are clues.\\n- Each number indicates a continuous block of filled cells.\\n- The order of the numbers matches the order of the blocks from left to right (for rows) or top to bottom (for columns).\\n- There must be at least one empty cell between consecutive blocks in a row or column.\\n- Fill the grid so that all row and column clues are satisfied simultaneously.\\n\\n### Initial State:\\nRow clues: [[1], [1], [], [1], [1, 1], [1, 1], [1], [1]]\\nColumn clues: [[1, 1], [], [1, 1], [1], [1], [1, 1], [], [1]]\\n### Symbols\\n- 'X' → Filled cell\\n- '.' → Empty cell\\n\\n### Output Format\\nOutput the solution as a text-based grid using 'X' and '.'.\\nEach line represents a row in the solved grid.\\nNo spaces between characters.\\n\\n### Example:\\n.X...\\nX..X.\\n..X..\\nX..X.\\nX.X..\\n\\n### Task\\nCarefully analyze the given image of the Nonogram.\\nProduce the complete solved grid according to the rules.", "answer": "X.......\\n.....X..\\n........\\nX.......\\n..X..X..\\n....X..X\\n...X....\\n..X.....", "system": "[[[1], [1], [], [1], [1, 1], [1, 1], [1], [1]], [[1, 1], [], [1, 1], [1], [1], [1, 1], [], [1]]]", "category": "nonogram", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'nonogram_evaluator'}"}}
{"image": "images/000840.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|6|7|8|\\n|4|11|10|9|\\n|3|12|13|14|\\n|2|1|16|15|", "system": "\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000841.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|6|7|8|\\n|4|11|10|9|\\n|3|12|13|14|\\n|2|1|16|15|", "system": "\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000842.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|6|7|8|\\n|4|11|10|9|\\n|3|12|13|14|\\n|2|1|16|15|", "system": "\\n|5| |7| |\\n| |11| |9|\\n|3| |13| |\\n| |1|16|15|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000843.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |3| |\\n| |7| |1|\\n|15| |9| |\\n|16|13| |11|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|4|3|2|\\n|6|7|8|1|\\n|15|14|9|10|\\n|16|13|12|11|", "system": "\\n|5| |3| |\\n| |7| |1|\\n|15| |9| |\\n|16|13| |11|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000844.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|7| |5| |\\n| |9| |3|\\n|15| |11| |\\n|16|13| |1|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|7|6|5|4|\\n|8|9|10|3|\\n|15|14|11|2|\\n|16|13|12|1|", "system": "\\n|7| |5| |\\n| |9| |3|\\n|15| |11| |\\n|16|13| |1|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000845.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |3| |\\n| |7| |1|\\n|15| |9| |\\n|16|13| |11|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|4|3|2|\\n|6|7|8|1|\\n|15|14|9|10|\\n|16|13|12|11|", "system": "\\n|5| |3| |\\n| |7| |1|\\n|15| |9| |\\n|16|13| |11|", "category": "numbrix", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000846.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| |3| |17| |\\n|5| |1| |19|\\n| |7| |15| |\\n|9| |13| |21|\\n| |11| |23|24|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|4|3|2|17|18|\\n|5|6|1|16|19|\\n|8|7|14|15|20|\\n|9|12|13|22|21|\\n|10|11| |23|24|", "system": "\\n| |3| |17| |\\n|5| |1| |19|\\n| |7| |15| |\\n|9| |13| |21|\\n| |11| |23|24|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000847.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|17| |15| |11|\\n| |19| |13| |\\n|21| |7| |9|\\n| |23| |1| |\\n|25| |5| |3|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|17|16|15|12|11|\\n|18|19|14|13|10|\\n|21|20|7|8|9|\\n|22|23|6|1|2|\\n|25|24|5|4|3|", "system": "\\n|17| |15| |11|\\n| |19| |13| |\\n|21| |7| |9|\\n| |23| |1| |\\n|25| |5| |3|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000848.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| |7| |9|\\n| |13| |11| |\\n|3| |15| |17|\\n| |23| |21| |\\n|1| |25| |19|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|6|7|8|9|\\n|4|13|12|11|10|\\n|3|14|15|16|17|\\n|2|23|22|21|18|\\n|1|24|25|20|19|", "system": "\\n|5| |7| |9|\\n| |13| |11| |\\n|3| |15| |17|\\n| |23| |21| |\\n|1| |25| |19|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000849.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| |3| |5| |\\n|1| |9| |7|\\n| |11| |19| |\\n|13| |17| |21|\\n| |15| |23|24|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|2|3|4|5|6|\\n|1|10|9|8|7|\\n|12|11|18|19|20|\\n|13|16|17|22|21|\\n|14|15| |23|24|", "system": "\\n| |3| |5| |\\n|1| |9| |7|\\n| |11| |19| |\\n|13| |17| |21|\\n| |15| |23|24|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000850.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|3| |5| |7|\\n| |11| |9| |\\n|1| |13| |15|\\n| |23| |19| |\\n|25| |21| |17|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|3|4|5|6|7|\\n|2|11|10|9|8|\\n|1|12|13|14|15|\\n|24|23|20|19|16|\\n|25|22|21|18|17|", "system": "\\n|3| |5| |7|\\n| |11| |9| |\\n|1| |13| |15|\\n| |23| |19| |\\n|25| |21| |17|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000851.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|3| |9| |11|\\n| |1| |13| |\\n|5| |7| |15|\\n| |23| |19| |\\n|25| |21| |17|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|3|2|9|10|11|\\n|4|1|8|13|12|\\n|5|6|7|14|15|\\n|24|23|20|19|16|\\n|25|22|21|18|17|", "system": "\\n|3| |9| |11|\\n| |1| |13| |\\n|5| |7| |15|\\n| |23| |19| |\\n|25| |21| |17|", "category": "numbrix", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000852.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|4| | |1|10| |\\n| | |7| | | |\\n| | |16| |14|13|\\n|19|20| |22| | |\\n|34| |32| |28|25|\\n| |36|31| |27| |\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|4|3|2|1|10|11|\\n|5|6|7|8|9|12|\\n|18|17|16|15|14|13|\\n|19|20|21|22|23|24|\\n|34|33|32|29|28|25|\\n|35|36|31|30|27|26|", "system": "\\n|4| | |1|10| |\\n| | |7| | | |\\n| | |16| |14|13|\\n|19|20| |22| | |\\n|34| |32| |28|25|\\n| |36|31| |27| |", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000853.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | |10| | |7|\\n|13| | |16|17| |\\n|22| | |19| | |\\n| | |25|26|27|4|\\n|34| | |29|28| |\\n| |36|31| |1| |\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|12|11|10|9|8|7|\\n|13|14|15|16|17|6|\\n|22|21|20|19|18|5|\\n|23|24|25|26|27|4|\\n|34|33|32|29|28|3|\\n|35|36|31|30|1|2|", "system": "\\n| | |10| | |7|\\n|13| | |16|17| |\\n|22| | |19| | |\\n| | |25|26|27|4|\\n|34| | |29|28| |\\n| |36|31| |1| |", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000854.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|1| | |4|5| |\\n| | |10| | |7|\\n|13| | |16|17|18|\\n| | |22| | |19|\\n|25|28| | | |34|\\n| |27| |31|36| |\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|1|2|3|4|5|6|\\n|12|11|10|9|8|7|\\n|13|14|15|16|17|18|\\n|24|23|22|21|20|19|\\n|25|28|29|32|33|34|\\n|26|27|30|31|36|35|", "system": "\\n|1| | |4|5| |\\n| | |10| | |7|\\n|13| | |16|17|18|\\n| | |22| | |19|\\n|25|28| | | |34|\\n| |27| |31|36| |", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000855.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|6|7| | |10|11|\\n| |16| | |13| |\\n|4| | |19| |21|\\n| | |25| | |22|\\n| | | |31|34| |\\n|1|28| | |33|36|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|6|7|8|9|10|11|\\n|5|16|15|14|13|12|\\n|4|17|18|19|20|21|\\n|3|26|25|24|23|22|\\n|2|27|30|31|34|35|\\n|1|28|29|32|33|36|", "system": "\\n|6|7| | |10|11|\\n| |16| | |13| |\\n|4| | |19| |21|\\n| | |25| | |22|\\n| | | |31|34| |\\n|1|28| | |33|36|", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000856.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| |12|13| | |16|\\n|10| | |19| | |\\n| |22| | | |28|\\n| |7| |25| | |\\n| | |1| |31|36|\\n|4|3| |33|34|35|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|11|12|13|14|15|16|\\n|10|21|20|19|18|17|\\n|9|22|23|26|27|28|\\n|8|7|24|25|30|29|\\n|5|6|1|32|31|36|\\n|4|3|2|33|34|35|", "system": "\\n| |12|13| | |16|\\n|10| | |19| | |\\n| |22| | | |28|\\n| |7| |25| | |\\n| | |1| |31|36|\\n|4|3| |33|34|35|", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000857.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | |4| | |7|\\n|1|12| |10| |8|\\n|14|13| |19| | |\\n|15|16| | | |22|\\n|28| | |25|34| |\\n| | |31| | |36|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|2|3|4|5|6|7|\\n|1|12|11|10|9|8|\\n|14|13|18|19|20|21|\\n|15|16|17|24|23|22|\\n|28|27|26|25|34|35|\\n|29|30|31|32|33|36|", "system": "\\n| | |4| | |7|\\n|1|12| |10| |8|\\n|14|13| |19| | |\\n|15|16| | | |22|\\n|28| | |25|34| |\\n| | |31| | |36|", "category": "numbrix", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000858.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | | |13| | | |\\n|9| |21| | | |17|\\n|8|23| |25| | | |\\n| |34|33| | | |29|\\n|6| | |39|42| | |\\n|5|36|37| |41| |45|\\n| |3| |1| |47|48|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|10|11|12|13|14|15|16|\\n|9|22|21|20|19|18|17|\\n|8|23|24|25|26|27|28|\\n|7|34|33|32|31|30|29|\\n|6|35|38|39|42|43|44|\\n|5|36|37|40|41|46|45|\\n|4|3|2|1| |47|48|", "system": "\\n| | | |13| | | |\\n|9| |21| | | |17|\\n|8|23| |25| | | |\\n| |34|33| | | |29|\\n|6| | |39|42| | |\\n|5|36|37| |41| |45|\\n| |3| |1| |47|48|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000859.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|5| | | |9|10|11|\\n| |17|16| |14|13| |\\n| | | |20|21| | |\\n| |1| | | |25|24|\\n|31| |29| |41| | |\\n| | |36|39| |47| |\\n|33| |37| |49| |45|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|5|6|7|8|9|10|11|\\n|4|17|16|15|14|13|12|\\n|3|18|19|20|21|22|23|\\n|2|1|28|27|26|25|24|\\n|31|30|29|40|41|42|43|\\n|32|35|36|39|48|47|44|\\n|33|34|37|38|49|46|45|", "system": "\\n|5| | | |9|10|11|\\n| |17|16| |14|13| |\\n| | | |20|21| | |\\n| |1| | | |25|24|\\n|31| |29| |41| | |\\n| | |36|39| |47| |\\n|33| |37| |49| |45|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000860.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | | | | |13| |\\n| | | | | |16|15|\\n| | | |9| |17| |\\n| | | | |7| |19|\\n| | | |5| |21|22|\\n| | | |4|1| | |\\n| | | | |2|25|26|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n| | | | |12|13|14|\\n| | | | |11|16|15|\\n| | | |9|10|17|18|\\n| | | |8|7|20|19|\\n| | | |5|6|21|22|\\n| | | |4|1|24|23|\\n| | | |3|2|25|26|", "system": "\\n| | | | | |13| |\\n| | | | | |16|15|\\n| | | |9| |17| |\\n| | | | |7| |19|\\n| | | |5| |21|22|\\n| | | |4|1| | |\\n| | | | |2|25|26|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000861.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | |13| | | |17|\\n| |23| |21| | | |\\n|9|24|25| |27| |29|\\n| |35| |33| |31|30|\\n| |36|39|40| | |45|\\n| |37| |41| | | |\\n|5| | | |1|48|49|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|11|12|13|14|15|16|17|\\n|10|23|22|21|20|19|18|\\n|9|24|25|26|27|28|29|\\n|8|35|34|33|32|31|30|\\n|7|36|39|40|43|44|45|\\n|6|37|38|41|42|47|46|\\n|5|4|3|2|1|48|49|", "system": "\\n| | |13| | | |17|\\n| |23| |21| | | |\\n|9|24|25| |27| |29|\\n| |35| |33| |31|30|\\n| |36|39|40| | |45|\\n| |37| |41| | | |\\n|5| | | |1|48|49|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000862.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | |13| |15| |17|\\n| |23| |21|20| | |\\n|9| |25| | | |29|\\n| | | |33| | |30|\\n|7| | |40|43| |45|\\n| |37| |41| | |46|\\n|5|4| | |1|48|49|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|11|12|13|14|15|16|17|\\n|10|23|22|21|20|19|18|\\n|9|24|25|26|27|28|29|\\n|8|35|34|33|32|31|30|\\n|7|36|39|40|43|44|45|\\n|6|37|38|41|42|47|46|\\n|5|4|3|2|1|48|49|", "system": "\\n| | |13| |15| |17|\\n| |23| |21|20| | |\\n|9| |25| | | |29|\\n| | | |33| | |30|\\n|7| | |40|43| |45|\\n| |37| |41| | |46|\\n|5|4| | |1|48|49|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000863.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | | | | |13|14|\\n| | | | |11| | |\\n| | | |9|10|17| |\\n| | | | |7| |19|\\n| | | |5| |21|22|\\n| | | | |1|24| |\\n| | | |3|2|25|26|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n| | | | |12|13|14|\\n| | | | |11|16|15|\\n| | | |9|10|17|18|\\n| | | |8|7|20|19|\\n| | | |5|6|21|22|\\n| | | |4|1|24|23|\\n| | | |3|2|25|26|", "system": "\\n| | | | | |13|14|\\n| | | | |11| | |\\n| | | |9|10|17| |\\n| | | | |7| |19|\\n| | | |5| |21|22|\\n| | | | |1|24| |\\n| | | |3|2|25|26|", "category": "numbrix", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000864.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|4| |6|7| | |10| |\\n|3| |17| | | |13|12|\\n| |19| | |22| |24|25|\\n|1| |31|30| | | | |\\n|34|33| |39| | | |43|\\n| | |37| | |46| | |\\n| | | |49|58| | |63|\\n|53|54|55| | | |61|64|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|4|5|6|7|8|9|10|11|\\n|3|18|17|16|15|14|13|12|\\n|2|19|20|21|22|23|24|25|\\n|1|32|31|30|29|28|27|26|\\n|34|33|38|39|40|41|42|43|\\n|35|36|37|48|47|46|45|44|\\n|52|51|50|49|58|59|62|63|\\n|53|54|55|56|57|60|61|64|", "system": "\\n|4| |6|7| | |10| |\\n|3| |17| | | |13|12|\\n| |19| | |22| |24|25|\\n|1| |31|30| | | | |\\n|34|33| |39| | | |43|\\n| | |37| | |46| | |\\n| | | |49|58| | |63|\\n|53|54|55| | | |61|64|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000865.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|13| | | | | |7|6|\\n| | | | | |19|20| |\\n| | | |26|25| | |4|\\n|30|31| | | |23| | |\\n|43| | | | | |1|2|\\n|44|45|46| |38|37|60|61|\\n|49|48|47| |55| | | |\\n| | |52| | |57|64|63|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|13|12|11|10|9|8|7|6|\\n|14|15|16|17|18|19|20|5|\\n|29|28|27|26|25|24|21|4|\\n|30|31|32|33|34|23|22|3|\\n|43|42|41|40|35|36|1|2|\\n|44|45|46|39|38|37|60|61|\\n|49|48|47|54|55|58|59|62|\\n|50|51|52|53|56|57|64|63|", "system": "\\n|13| | | | | |7|6|\\n| | | | | |19|20| |\\n| | | |26|25| | |4|\\n|30|31| | | |23| | |\\n|43| | | | | |1|2|\\n|44|45|46| |38|37|60|61|\\n|49|48|47| |55| | | |\\n| | |52| | |57|64|63|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000866.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|13| | | | |18|19| |\\n| |27| |25| |23|22|21|\\n| | |29|30|31| | |34|\\n| |41| |39|38|37| | |\\n| |42|43| | |46| | |\\n|8|55| | | | | |49|\\n|7| |57| | | |61| |\\n| | | |3| |1|64|63|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|13|14|15|16|17|18|19|20|\\n|12|27|26|25|24|23|22|21|\\n|11|28|29|30|31|32|33|34|\\n|10|41|40|39|38|37|36|35|\\n|9|42|43|44|45|46|47|48|\\n|8|55|54|53|52|51|50|49|\\n|7|56|57|58|59|60|61|62|\\n|6|5|4|3|2|1|64|63|", "system": "\\n|13| | | | |18|19| |\\n| |27| |25| |23|22|21|\\n| | |29|30|31| | |34|\\n| |41| |39|38|37| | |\\n| |42|43| | |46| | |\\n|8|55| | | | | |49|\\n|7| |57| | | |61| |\\n| | | |3| |1|64|63|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000867.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|15| |13| | | | | |\\n| | |18|19| | |22|7|\\n|29| |27| |25| | | |\\n| |31|32|33| | | | |\\n|43|42|41| |39| |37| |\\n|44| |46| | |49| | |\\n| |62|59| |55| | | |\\n|64|61| | |56|53|52|1|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|15|14|13|12|11|10|9|8|\\n|16|17|18|19|20|21|22|7|\\n|29|28|27|26|25|24|23|6|\\n|30|31|32|33|34|35|36|5|\\n|43|42|41|40|39|38|37|4|\\n|44|45|46|47|48|49|50|3|\\n|63|62|59|58|55|54|51|2|\\n|64|61|60|57|56|53|52|1|", "system": "\\n|15| |13| | | | | |\\n| | |18|19| | |22|7|\\n|29| |27| |25| | | |\\n| |31|32|33| | | | |\\n|43|42|41| |39| |37| |\\n|44| |46| | |49| | |\\n| |62|59| |55| | | |\\n|64|61| | |56|53|52|1|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000868.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n| | |10| | |7| |5|\\n|13| | | | | |19| |\\n|26|25| | |22|21|20| |\\n| | | | |31| |33| |\\n| | | |37| | | |1|\\n|41|42|43|44| | | | |\\n|62|61| | |56| |52|49|\\n| |64|59|58|55| |51|50|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|12|11|10|9|8|7|6|5|\\n|13|14|15|16|17|18|19|4|\\n|26|25|24|23|22|21|20|3|\\n|27|28|29|30|31|32|33|2|\\n|40|39|38|37|36|35|34|1|\\n|41|42|43|44|45|46|47|48|\\n|62|61|60|57|56|53|52|49|\\n|63|64|59|58|55|54|51|50|", "system": "\\n| | |10| | |7| |5|\\n|13| | | | | |19| |\\n|26|25| | |22|21|20| |\\n| | | | |31| |33| |\\n| | | |37| | | |1|\\n|41|42|43|44| | | | |\\n|62|61| | |56| |52|49|\\n| |64|59|58|55| |51|50|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000869.png", "question": "\\nYour task is to solve the Numbrix puzzle based on the following rules and the current state:\\n\\n### Game Rules:\\n\\n1. Numbrix is played on a square grid, where some cells are already filled with numbers.\\n2. You must fill in the empty cells with numbers to create a continuous path starting from 1 up to the **maximum number in the sequence**, which is **not necessarily equal to the total number of cells (n²)**.\\n3. The numbers must be adjacent either horizontally or vertically (not diagonally).\\n4. Each number can only be used once.\\n5. The path must form a single continuous sequence where consecutive numbers are adjacent.\\n6. **Not every empty cell needs to be filled.** Depending on the puzzle configuration, some cells may remain empty.\\n\\n### Important Notes:\\n* The highest number in the puzzle might be equal or less than the total number of grid cells (e.g., $n^2 - 1$, or even smaller).\\n* It is your job to determine what the highest number is, based on the filled numbers and the constraints of the puzzle.\\n\\n### Current Numbrix State:\\nThe current state of the Numbrix puzzle is shown below:\\n\\n|13| | | | | |19|20|\\n| |27| |25| |23| | |\\n| | |29| |31| | |34|\\n| | | |39|38|37| | |\\n| |42|43|44|45| | | |\\n|8|55| |53| |51| |49|\\n|7| |57| | | |61| |\\n|6| | |3| |1|64|63|\\n\\nIn this representation:\\n\\n* Filled cells contain the given numbers.\\n* Empty cells are blank spaces.\\n* Your goal is to fill in the empty cells to complete a valid number sequence from 1 to the correct maximum number, following the rules above.\\n\\n### Output Format Requirements:\\n\\n1. The final answer should be the completed grid with all numbers from 1 to the correct highest number, aligned clearly in rows and columns.\\n\\n#### Example answer format for a 5x5 grid:\\n\\n|11|10|9|2|3|\\n|12|13|8|1|4|\\n|15|14|7|6|5|\\n|16|19|20|23|24|\\n|17|18|21|22|25|\\n", "answer": "\\n|13|14|15|16|17|18|19|20|\\n|12|27|26|25|24|23|22|21|\\n|11|28|29|30|31|32|33|34|\\n|10|41|40|39|38|37|36|35|\\n|9|42|43|44|45|46|47|48|\\n|8|55|54|53|52|51|50|49|\\n|7|56|57|58|59|60|61|62|\\n|6|5|4|3|2|1|64|63|", "system": "\\n|13| | | | | |19|20|\\n| |27| |25| |23| | |\\n| | |29| |31| | |34|\\n| | | |39|38|37| | |\\n| |42|43|44|45| | | |\\n|8|55| |53| |51| |49|\\n|7| |57| | | |61| |\\n|6| | |3| |1|64|63|", "category": "numbrix", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'numbrix_evaluator'}"}}
{"image": "images/000870.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0   B4   .  B4\\n 1   W2   .   .\\n 2    .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(1,2) (1,2)-(2,2) (2,2)-(2,1) (2,1)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\"B4\", \".\", \"B4\"], [\"W2\", \".\", \".\"], [\".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000871.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0    .  W2  B4\\n 1   W2   .   .\\n 2    .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(2,1) (2,1)-(2,2) (2,2)-(1,2) (1,2)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W2\", \"B4\"], [\"W2\", \".\", \".\"], [\".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000872.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0    .   .  B4\\n 1    .  B2  W2\\n 2    .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(1,1) (1,1)-(2,1) (2,1)-(2,2) (2,2)-(1,2) (1,2)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \".\", \"B4\"], [\".\", \"B2\", \"W2\"], [\".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000873.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0    .   .  B4\\n 1   B2   .  W2\\n 2    .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(2,2)-(2,1) (2,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0) (0,0)-(0,1) (0,1)-(0,2) (0,2)-(1,2) (1,2)-(2,2)", "system": "[[\".\", \".\", \"B4\"], [\"B2\", \".\", \"W2\"], [\".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000874.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0    .  W2  B4\\n 1    .  B2   .\\n 2    .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(1,1) (1,1)-(2,1) (2,1)-(2,2) (2,2)-(1,2) (1,2)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W2\", \"B4\"], [\".\", \"B2\", \".\"], [\".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000875.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 3 rows × 3 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2\\n 0   B3   .   .\\n 1   B2   .   .\\n 2    .  B2   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(1,1) (1,1)-(2,1) (2,1)-(2,2) (2,2)-(1,2) (1,2)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\"B3\", \".\", \".\"], [\"B2\", \".\", \".\"], [\".\", \"B2\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000876.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .   .   .   .\\n 1    .   .  W2   .\\n 2    .  B3   .   .\\n 3    .  W3   .  B4\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(3,3)-(2,3) (2,3)-(2,2) (2,2)-(2,1) (2,1)-(1,1) (1,1)-(1,2) (1,2)-(1,3) (1,3)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0) (0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(3,1) (3,1)-(3,2) (3,2)-(3,3)", "system": "[[\".\", \".\", \".\", \".\"], [\".\", \".\", \"W2\", \".\"], [\".\", \"B3\", \".\", \".\"], [\".\", \"W3\", \".\", \"B4\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000877.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .   .   .   .\\n 1    .   .   .  W3\\n 2   W3   .   .  W3\\n 3    .  W3   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(1,3) (1,3)-(2,3) (2,3)-(3,3) (3,3)-(3,2) (3,2)-(3,1) (3,1)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"W3\"], [\"W3\", \".\", \".\", \"W3\"], [\".\", \"W3\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000878.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .  W3  W3  B6\\n 1    .   .   .  W3\\n 2    .   .   .   .\\n 3    .   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(3,1) (3,1)-(3,2) (3,2)-(3,3) (3,3)-(2,3) (2,3)-(1,3) (1,3)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W3\", \"W3\", \"B6\"], [\".\", \".\", \".\", \"W3\"], [\".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000879.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .  W3   .   .\\n 1    .   .   .   .\\n 2   W3   .   .   .\\n 3   B6   .  W3   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(1,3) (1,3)-(2,3) (2,3)-(3,3) (3,3)-(3,2) (3,2)-(3,1) (3,1)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \"W3\", \".\", \".\"], [\".\", \".\", \".\", \".\"], [\"W3\", \".\", \".\", \".\"], [\"B6\", \".\", \"W3\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000880.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .  W3   .   .\\n 1    .   .   .   .\\n 2    .   .   .  W3\\n 3    .  W3  W3   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(3,1) (3,1)-(3,2) (3,2)-(3,3) (3,3)-(2,3) (2,3)-(1,3) (1,3)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W3\", \".\", \".\"], [\".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"W3\"], [\".\", \"W3\", \"W3\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000881.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 4 rows × 4 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3\\n 0    .  W3   .   .\\n 1   W3   .   .   .\\n 2    .   .   .   .\\n 3    .  W3  W3   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(3,1) (3,1)-(3,2) (3,2)-(3,3) (3,3)-(2,3) (2,3)-(1,3) (1,3)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W3\", \".\", \".\"], [\"W3\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\"], [\".\", \"W3\", \"W3\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000882.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .  W4   .   .   .\\n 1    .   .   .   .   .\\n 2    .   .   .   .   .\\n 3    .   .   .   .   .\\n 4   B8  W4   .   .  B8\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(1,4) (1,4)-(2,4) (2,4)-(3,4) (3,4)-(4,4) (4,4)-(4,3) (4,3)-(4,2) (4,2)-(4,1) (4,1)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \"W4\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\"B8\", \"W4\", \".\", \".\", \"B8\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000883.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .  W4  W4   .   .\\n 1    .   .   .   .   .\\n 2    .   .   .   .   .\\n 3    .   .   .   .   .\\n 4   B8   .   .  W4   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(4,1) (4,1)-(4,2) (4,2)-(4,3) (4,3)-(4,4) (4,4)-(3,4) (3,4)-(2,4) (2,4)-(1,4) (1,4)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W4\", \"W4\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\"B8\", \".\", \".\", \"W4\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000884.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .  W4   .   .   .\\n 1    .   .   .   .   .\\n 2    .   .   .   .  W4\\n 3    .   .   .   .   .\\n 4    .   .   .  W4  B8\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(4,1) (4,1)-(4,2) (4,2)-(4,3) (4,3)-(4,4) (4,4)-(3,4) (3,4)-(2,4) (2,4)-(1,4) (1,4)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W4\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \"W4\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"W4\", \"B8\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000885.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .  W4  W4   .   .\\n 1    .   .   .   .   .\\n 2   W4   .   .   .   .\\n 3    .   .   .   .   .\\n 4    .  W4   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(4,1) (4,1)-(4,2) (4,2)-(4,3) (4,3)-(4,4) (4,4)-(3,4) (3,4)-(2,4) (2,4)-(1,4) (1,4)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \"W4\", \"W4\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\"W4\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \"W4\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000886.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .   .   .  W4   .\\n 1    .   .   .   .  W4\\n 2    .   .   .   .   .\\n 3    .   .   .   .  W4\\n 4    .   .   .  W4   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(4,1) (4,1)-(4,2) (4,2)-(4,3) (4,3)-(4,4) (4,4)-(3,4) (3,4)-(2,4) (2,4)-(1,4) (1,4)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \".\", \".\", \"W4\", \".\"], [\".\", \".\", \".\", \".\", \"W4\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \"W4\"], [\".\", \".\", \".\", \"W4\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000887.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 5 rows × 5 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4\\n 0    .   .   .   .   .\\n 1    .   .   .   .  W4\\n 2    .   .   .   .  W4\\n 3   W4   .   .   .   .\\n 4    .  W4   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(4,1) (4,1)-(4,2) (4,2)-(4,3) (4,3)-(4,4) (4,4)-(3,4) (3,4)-(2,4) (2,4)-(1,4) (1,4)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \"W4\"], [\".\", \".\", \".\", \".\", \"W4\"], [\"W4\", \".\", \".\", \".\", \".\"], [\".\", \"W4\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000888.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .  W5   .   .   .\\n 1    .   .   .   .   .  W5\\n 2    .   .   .   .   .  W5\\n 3   W5   .   .   .   .   .\\n 4    .   .   .   .   .  W5\\n 5    .   .  W5   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(5,0) (5,0)-(5,1) (5,1)-(5,2) (5,2)-(5,3) (5,3)-(5,4) (5,4)-(5,5) (5,5)-(4,5) (4,5)-(3,5) (3,5)-(2,5) (2,5)-(1,5) (1,5)-(0,5) (0,5)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\".\", \".\", \"W5\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\".\", \".\", \"W5\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000889.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .   .   .   . B10\\n 1    .   .   .   .   .   .\\n 2   W5   .   .   .   .   .\\n 3    .   .   .   .   .   .\\n 4    .   .   .   .   .  W5\\n 5  B10  W5  W5   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(1,5) (1,5)-(2,5) (2,5)-(3,5) (3,5)-(4,5) (4,5)-(5,5) (5,5)-(5,4) (5,4)-(5,3) (5,3)-(5,2) (5,2)-(5,1) (5,1)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \".\", \".\", \".\", \"B10\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\"B10\", \"W5\", \"W5\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000890.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .   .   .   .   .\\n 1    .   .   .   .   .  W5\\n 2   W5   .   .   .   .   .\\n 3   W5   .   .   .   .   .\\n 4    .   .   .   .   .   .\\n 5    .  W5  W5   .   . B10\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(1,5) (1,5)-(2,5) (2,5)-(3,5) (3,5)-(4,5) (4,5)-(5,5) (5,5)-(5,4) (5,4)-(5,3) (5,3)-(5,2) (5,2)-(5,1) (5,1)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \"W5\", \"W5\", \".\", \".\", \"B10\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000891.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .  W5   .   .   .\\n 1   W5   .   .   .   .   .\\n 2    .   .   .   .   .   .\\n 3   W5   .   .   .   .   .\\n 4   W5   .   .   .   .   .\\n 5    .   .   .  W5  W5   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(1,5) (1,5)-(2,5) (2,5)-(3,5) (3,5)-(4,5) (4,5)-(5,5) (5,5)-(5,4) (5,4)-(5,3) (5,3)-(5,2) (5,2)-(5,1) (5,1)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \"W5\", \".\", \".\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"W5\", \"W5\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000892.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .   .   .   . B10\\n 1   W5   .   .   .   .  W5\\n 2    .   .   .   .   .  W5\\n 3    .   .   .   .   .   .\\n 4    .   .   .   .   .   .\\n 5    .  W5   .  W5   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(1,5) (1,5)-(2,5) (2,5)-(3,5) (3,5)-(4,5) (4,5)-(5,5) (5,5)-(5,4) (5,4)-(5,3) (5,3)-(5,2) (5,2)-(5,1) (5,1)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \".\", \".\", \".\", \"B10\"], [\"W5\", \".\", \".\", \".\", \".\", \"W5\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \"W5\", \".\", \"W5\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000893.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 6 rows × 6 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5\\n 0    .   .  W5   .  W5   .\\n 1   W5   .   .   .   .   .\\n 2    .   .   .   .   .   .\\n 3    .   .   .   .   .   .\\n 4    .   .   .   .   .  W5\\n 5    .   .  W5   .  W5   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(1,5) (1,5)-(2,5) (2,5)-(3,5) (3,5)-(4,5) (4,5)-(5,5) (5,5)-(5,4) (5,4)-(5,3) (5,3)-(5,2) (5,2)-(5,1) (5,1)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \"W5\", \".\", \"W5\", \".\"], [\"W5\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \"W5\"], [\".\", \".\", \"W5\", \".\", \"W5\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000894.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0  B12  W6  W6   .   .   .   .\\n 1    .   .   .   .   .   .   .\\n 2   W6   .   .   .   .   .   .\\n 3    .   .   .   .   .   .  W6\\n 4   W6   .   .   .   .   .   .\\n 5    .   .   .   .   .   .   .\\n 6    .  W6  W6   .   .  W6 B12\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(5,0) (5,0)-(6,0) (6,0)-(6,1) (6,1)-(6,2) (6,2)-(6,3) (6,3)-(6,4) (6,4)-(6,5) (6,5)-(6,6) (6,6)-(5,6) (5,6)-(4,6) (4,6)-(3,6) (3,6)-(2,6) (2,6)-(1,6) (1,6)-(0,6) (0,6)-(0,5) (0,5)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\"B12\", \"W6\", \"W6\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \"W6\", \"W6\", \".\", \".\", \"W6\", \"B12\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000895.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0  B12   .  W6   .   .   . B12\\n 1   W6   .   .   .   .   .  W6\\n 2   W6   .   .   .   .   .   .\\n 3    .   .   .   .   .   .   .\\n 4   W6   .   .   .   .   .   .\\n 5    .   .   .   .   .   .  W6\\n 6    .   .  W6   .   .   . B12\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(5,0) (5,0)-(6,0) (6,0)-(6,1) (6,1)-(6,2) (6,2)-(6,3) (6,3)-(6,4) (6,4)-(6,5) (6,5)-(6,6) (6,6)-(5,6) (5,6)-(4,6) (4,6)-(3,6) (3,6)-(2,6) (2,6)-(1,6) (1,6)-(0,6) (0,6)-(0,5) (0,5)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\"B12\", \".\", \"W6\", \".\", \".\", \".\", \"B12\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\".\", \".\", \"W6\", \".\", \".\", \".\", \"B12\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000896.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0  B12  W6  W6   .  W6  W6   .\\n 1    .   .   .   .   .   .  W6\\n 2    .   .   .   .   .   .   .\\n 3   W6   .   .   .   .   .   .\\n 4    .   .   .   .   .   .   .\\n 5    .   .   .   .   .   .   .\\n 6    .   .  W6   .  W6   . B12\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(5,0) (5,0)-(6,0) (6,0)-(6,1) (6,1)-(6,2) (6,2)-(6,3) (6,3)-(6,4) (6,4)-(6,5) (6,5)-(6,6) (6,6)-(5,6) (5,6)-(4,6) (4,6)-(3,6) (3,6)-(2,6) (2,6)-(1,6) (1,6)-(0,6) (0,6)-(0,5) (0,5)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\"B12\", \"W6\", \"W6\", \".\", \"W6\", \"W6\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \"W6\", \".\", \"W6\", \".\", \"B12\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000897.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0  B12  W6  W6  W6   .  W6 B12\\n 1    .   .   .   .   .   .   .\\n 2    .   .   .   .   .   .  W6\\n 3   W6   .   .   .   .   .   .\\n 4   W6   .   .   .   .   .   .\\n 5    .   .   .   .   .   .   .\\n 6    .   .   .  W6   .   .   .\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(1,0) (1,0)-(2,0) (2,0)-(3,0) (3,0)-(4,0) (4,0)-(5,0) (5,0)-(6,0) (6,0)-(6,1) (6,1)-(6,2) (6,2)-(6,3) (6,3)-(6,4) (6,4)-(6,5) (6,5)-(6,6) (6,6)-(5,6) (5,6)-(4,6) (4,6)-(3,6) (3,6)-(2,6) (2,6)-(1,6) (1,6)-(0,6) (0,6)-(0,5) (0,5)-(0,4) (0,4)-(0,3) (0,3)-(0,2) (0,2)-(0,1) (0,1)-(0,0)", "system": "[[\"B12\", \"W6\", \"W6\", \"W6\", \".\", \"W6\", \"B12\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \"W6\", \".\", \".\", \".\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000898.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0    .   .  W6  W6   .   .   .\\n 1    .   .   .   .   .   .   .\\n 2   W6   .   .   .   .   .  W6\\n 3    .   .   .   .   .   .   .\\n 4    .   .   .   .   .   .  W6\\n 5   W6   .   .   .   .   .   .\\n 6    .  W6  W6   .  W6   . B12\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(0,6) (0,6)-(1,6) (1,6)-(2,6) (2,6)-(3,6) (3,6)-(4,6) (4,6)-(5,6) (5,6)-(6,6) (6,6)-(6,5) (6,5)-(6,4) (6,4)-(6,3) (6,3)-(6,2) (6,2)-(6,1) (6,1)-(6,0) (6,0)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \"W6\", \"W6\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \"W6\", \"W6\", \".\", \"W6\", \".\", \"B12\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000899.png", "question": "\\nYou are given a Shingoki puzzle. This is a logic puzzle where you need to draw a single continuous loop on a grid.\\n\\nGame Rules:\\n1. Draw exactly one continuous loop without crossings or branches\\n2. The loop must eventually return to its starting point\\n3. White circles must be passed through in a straight line (no turning at white circles)\\n4. Black circles must be turned upon (the path must change direction at black circles)\\n5. Each circle has a number that represents the sum of the lengths of the two straight line segments extending from that circle\\n\\nGrid Information:\\n- Grid size: 7 rows × 7 columns\\n- (0,0) is the top-left corner\\n- Row numbers increase downward, column numbers increase rightward\\n- The loop connects adjacent grid points (no diagonal connections)\\n\\nObjective:\\nFind the single continuous loop that:\\n- Passes through all circles according to their type constraints\\n- Satisfies all circle value constraints (sum of line segment lengths)\\n- Forms a closed loop without crossings or branches\\n\\nOutput Format Requirements:\\n- Represent your solution as a sequence of connected line segments\\n- Each segment connects two adjacent grid points: (r1,c1)-(r2,c2)\\n- Adjacent points differ by exactly 1 in either row or column (no diagonals)\\n- List all segments separated by spaces in one continuous string\\n- The segments should form a complete closed loop\\n- Example format: (0,0)-(0,1) (0,1)-(1,1) (1,1)-(1,0) (1,0)-(0,0)\\n\\nGrid Layout:\\n      0   1   2   3   4   5   6\\n 0    .   .   .   .   .  W6   .\\n 1    .   .   .   .   .   .  W6\\n 2   W6   .   .   .   .   .  W6\\n 3   W6   .   .   .   .   .   .\\n 4    .   .   .   .   .   .   .\\n 5   W6   .   .   .   .   .   .\\n 6  B12   .  W6   .   .  W6 B12\\n\\nLegend: W# = White circle with value #, B# = Black circle with value #, . = Empty cell", "answer": "(0,0)-(0,1) (0,1)-(0,2) (0,2)-(0,3) (0,3)-(0,4) (0,4)-(0,5) (0,5)-(0,6) (0,6)-(1,6) (1,6)-(2,6) (2,6)-(3,6) (3,6)-(4,6) (4,6)-(5,6) (5,6)-(6,6) (6,6)-(6,5) (6,5)-(6,4) (6,4)-(6,3) (6,3)-(6,2) (6,2)-(6,1) (6,1)-(6,0) (6,0)-(5,0) (5,0)-(4,0) (4,0)-(3,0) (3,0)-(2,0) (2,0)-(1,0) (1,0)-(0,0)", "system": "[[\".\", \".\", \".\", \".\", \".\", \"W6\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \"W6\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"W6\", \".\", \".\", \".\", \".\", \".\", \".\"], [\"B12\", \".\", \"W6\", \".\", \".\", \"W6\", \"B12\"]]", "category": "shingoki", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'shingoki_evaluator'}"}}
{"image": "images/000900.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 5? Answer with a number (can be integer or decimal).0: [(1, 3), (3, 5)]\\n1: [(0, 3), (2, 2), (4, 1), (5, 2)]\\n2: [(1, 2), (4, 1), (5, 3)]\\n3: [(0, 5), (4, 1)]\\n4: [(1, 1), (2, 1), (3, 1), (5, 2)]\\n5: [(1, 2), (2, 3), (4, 2)]\\n", "answer": "5", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000901.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 5? Answer with a number (can be integer or decimal).0: [(1, 4), (3, 2)]\\n1: [(0, 4), (2, 3), (4, 4)]\\n2: [(1, 3), (4, 4), (5, 4)]\\n3: [(0, 2), (4, 4)]\\n4: [(1, 4), (2, 4), (3, 4), (5, 4)]\\n5: [(2, 4), (4, 4)]\\n", "answer": "10", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000902.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 5? Answer with a number (can be integer or decimal).0: [(1, 4), (3, 5)]\\n1: [(0, 4), (2, 1), (4, 1), (5, 4)]\\n2: [(1, 1), (4, 1), (5, 4)]\\n3: [(0, 5), (4, 2)]\\n4: [(1, 1), (2, 1), (3, 2), (5, 1)]\\n5: [(1, 4), (2, 4), (4, 1)]\\n", "answer": "6", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000903.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 3 to node 2? Answer with a number (can be integer or decimal).0: [(1, 1), (3, 3)]\\n1: [(0, 1), (2, 5), (3, 3), (4, 1), (5, 5)]\\n2: [(1, 5), (4, 1), (5, 4)]\\n3: [(0, 3), (1, 3), (4, 4)]\\n4: [(1, 1), (2, 1), (3, 4), (5, 1)]\\n5: [(1, 5), (2, 4), (4, 1)]\\n", "answer": "5", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000904.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 4? Answer with a number (can be integer or decimal).0: [(1, 4), (3, 4)]\\n1: [(0, 4), (2, 1), (4, 5)]\\n2: [(1, 1), (4, 5), (5, 2)]\\n3: [(0, 4), (4, 3)]\\n4: [(1, 5), (2, 5), (3, 3), (5, 1)]\\n5: [(2, 2), (4, 1)]\\n", "answer": "7", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000905.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 3 to node 2? Answer with a number (can be integer or decimal).0: [(1, 5), (3, 3), (4, 4)]\\n1: [(0, 5), (2, 3), (4, 4), (5, 3)]\\n2: [(1, 3), (4, 5), (5, 2)]\\n3: [(0, 3), (4, 4)]\\n4: [(0, 4), (1, 4), (2, 5), (3, 4), (5, 2)]\\n5: [(1, 3), (2, 2), (4, 2)]\\n", "answer": "8", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000906.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 2), (3, 1)]\\n1: [(0, 2), (2, 4), (3, 3), (4, 1)]\\n2: [(1, 4), (4, 4), (5, 3)]\\n3: [(0, 1), (1, 3), (4, 4), (6, 5)]\\n4: [(1, 1), (2, 4), (3, 4), (5, 5), (7, 4)]\\n5: [(2, 3), (4, 5), (7, 4), (8, 1)]\\n6: [(3, 5), (7, 3)]\\n7: [(4, 4), (5, 4), (6, 3), (8, 1)]\\n8: [(5, 1), (7, 1)]\\n", "answer": "8", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000907.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 5), (3, 1)]\\n1: [(0, 5), (2, 4), (4, 2)]\\n2: [(1, 4), (4, 2), (5, 1)]\\n3: [(0, 1), (4, 5), (6, 3)]\\n4: [(1, 2), (2, 2), (3, 5), (5, 5), (6, 4), (7, 1)]\\n5: [(2, 1), (4, 5), (7, 5), (8, 5)]\\n6: [(3, 3), (4, 4), (7, 5)]\\n7: [(4, 1), (5, 5), (6, 5), (8, 3)]\\n8: [(5, 5), (7, 3)]\\n", "answer": "10", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000908.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 4), (3, 4)]\\n1: [(0, 4), (2, 2), (4, 3)]\\n2: [(1, 2), (4, 4), (5, 3)]\\n3: [(0, 4), (4, 4), (6, 1)]\\n4: [(1, 3), (2, 4), (3, 4), (5, 4), (7, 3)]\\n5: [(2, 3), (4, 4), (7, 5), (8, 2)]\\n6: [(3, 1), (7, 4)]\\n7: [(4, 3), (5, 5), (6, 4), (8, 2)]\\n8: [(5, 2), (7, 2)]\\n", "answer": "11", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000909.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 5), (3, 3)]\\n1: [(0, 5), (2, 2), (4, 1)]\\n2: [(1, 2), (4, 1), (5, 2)]\\n3: [(0, 3), (4, 5), (6, 3), (7, 2)]\\n4: [(1, 1), (2, 1), (3, 5), (5, 1), (7, 4)]\\n5: [(2, 2), (4, 1), (7, 1), (8, 1)]\\n6: [(3, 3), (7, 4)]\\n7: [(3, 2), (4, 4), (5, 1), (6, 4), (8, 2)]\\n8: [(5, 1), (7, 2)]\\n", "answer": "7", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000910.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 5), (3, 4)]\\n1: [(0, 5), (2, 4), (4, 5), (5, 3)]\\n2: [(1, 4), (4, 4), (5, 1)]\\n3: [(0, 4), (4, 4), (6, 4)]\\n4: [(1, 5), (2, 4), (3, 4), (5, 5), (7, 3)]\\n5: [(1, 3), (2, 1), (4, 5), (7, 2), (8, 5)]\\n6: [(3, 4), (7, 5)]\\n7: [(4, 3), (5, 2), (6, 5), (8, 3)]\\n8: [(5, 5), (7, 3)]\\n", "answer": "13", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000911.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 8? Answer with a number (can be integer or decimal).0: [(1, 3), (3, 2)]\\n1: [(0, 3), (2, 4), (4, 1)]\\n2: [(1, 4), (4, 4), (5, 5)]\\n3: [(0, 2), (4, 2), (6, 5), (7, 5)]\\n4: [(1, 1), (2, 4), (3, 2), (5, 4), (7, 1)]\\n5: [(2, 5), (4, 4), (7, 4), (8, 2)]\\n6: [(3, 5), (7, 1)]\\n7: [(3, 5), (4, 1), (5, 4), (6, 1), (8, 5)]\\n8: [(5, 2), (7, 5)]\\n", "answer": "10", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000912.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 11? Answer with a number (can be integer or decimal).0: [(1, 8), (4, 6), (5, 5)]\\n1: [(0, 8), (2, 8), (5, 6)]\\n2: [(1, 8), (3, 1), (6, 3)]\\n3: [(2, 1), (6, 7), (7, 2)]\\n4: [(0, 6), (5, 7), (8, 8)]\\n5: [(0, 5), (1, 6), (4, 7), (6, 8), (9, 5)]\\n6: [(2, 3), (3, 7), (5, 8), (7, 7), (10, 6)]\\n7: [(3, 2), (6, 7), (10, 2), (11, 8)]\\n8: [(4, 8), (9, 2)]\\n9: [(5, 5), (8, 2), (10, 3)]\\n10: [(6, 6), (7, 2), (9, 3), (11, 1)]\\n11: [(7, 8), (10, 1)]\\n", "answer": "14", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000913.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 11? Answer with a number (can be integer or decimal).0: [(1, 3), (4, 4)]\\n1: [(0, 3), (2, 2), (5, 5)]\\n2: [(1, 2), (3, 5), (6, 1)]\\n3: [(2, 5), (6, 3), (7, 3)]\\n4: [(0, 4), (5, 2), (8, 5)]\\n5: [(1, 5), (4, 2), (6, 2), (9, 7)]\\n6: [(2, 1), (3, 3), (5, 2), (7, 7), (10, 4)]\\n7: [(3, 3), (6, 7), (10, 6), (11, 6)]\\n8: [(4, 5), (9, 8)]\\n9: [(5, 7), (8, 8), (10, 3)]\\n10: [(6, 4), (7, 6), (9, 3), (11, 5)]\\n11: [(7, 6), (10, 5)]\\n", "answer": "15", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000914.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 11? Answer with a number (can be integer or decimal).0: [(1, 7), (4, 6)]\\n1: [(0, 7), (2, 8), (5, 4), (6, 6)]\\n2: [(1, 8), (3, 6), (6, 6)]\\n3: [(2, 6), (6, 1), (7, 3)]\\n4: [(0, 6), (5, 5), (8, 7), (9, 8)]\\n5: [(1, 4), (4, 5), (6, 2), (9, 8)]\\n6: [(1, 6), (2, 6), (3, 1), (5, 2), (7, 2), (9, 3), (10, 7)]\\n7: [(3, 3), (6, 2), (10, 4), (11, 8)]\\n8: [(4, 7), (9, 7)]\\n9: [(4, 8), (5, 8), (6, 3), (8, 7), (10, 6)]\\n10: [(6, 7), (7, 4), (9, 6), (11, 7)]\\n11: [(7, 8), (10, 7)]\\n", "answer": "23", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000915.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 11? Answer with a number (can be integer or decimal).0: [(1, 3), (4, 5), (5, 3)]\\n1: [(0, 3), (2, 2), (5, 1)]\\n2: [(1, 2), (3, 2), (6, 3)]\\n3: [(2, 2), (6, 2), (7, 6)]\\n4: [(0, 5), (5, 5), (8, 6)]\\n5: [(0, 3), (1, 1), (4, 5), (6, 1), (9, 4)]\\n6: [(2, 3), (3, 2), (5, 1), (7, 5), (10, 3)]\\n7: [(3, 6), (6, 5), (10, 6), (11, 4)]\\n8: [(4, 6), (9, 6)]\\n9: [(5, 4), (8, 6), (10, 3)]\\n10: [(6, 3), (7, 6), (9, 3), (11, 8)]\\n11: [(7, 4), (10, 8)]\\n", "answer": "13", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000916.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 8 to node 2? Answer with a number (can be integer or decimal).0: [(1, 8), (4, 3)]\\n1: [(0, 8), (2, 3), (5, 6)]\\n2: [(1, 3), (3, 7), (6, 8), (7, 3)]\\n3: [(2, 7), (6, 6), (7, 4)]\\n4: [(0, 3), (5, 3), (8, 6)]\\n5: [(1, 6), (4, 3), (6, 7), (8, 3), (9, 7)]\\n6: [(2, 8), (3, 6), (5, 7), (7, 3), (10, 8)]\\n7: [(2, 3), (3, 4), (6, 3), (10, 6), (11, 6)]\\n8: [(4, 6), (5, 3), (9, 1)]\\n9: [(5, 7), (8, 1), (10, 4)]\\n10: [(6, 8), (7, 6), (9, 4), (11, 5)]\\n11: [(7, 6), (10, 5)]\\n", "answer": "12", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000917.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 11 to node 8? Answer with a number (can be integer or decimal).0: [(1, 5), (4, 7), (5, 1)]\\n1: [(0, 5), (2, 2), (5, 3)]\\n2: [(1, 2), (3, 6), (6, 2)]\\n3: [(2, 6), (6, 2), (7, 3)]\\n4: [(0, 7), (5, 5), (8, 1)]\\n5: [(0, 1), (1, 3), (4, 5), (6, 7), (9, 5)]\\n6: [(2, 2), (3, 2), (5, 7), (7, 6), (10, 4)]\\n7: [(3, 3), (6, 6), (10, 4), (11, 2)]\\n8: [(4, 1), (9, 7)]\\n9: [(5, 5), (8, 7), (10, 4)]\\n10: [(6, 4), (7, 4), (9, 4), (11, 4)]\\n11: [(7, 2), (10, 4)]\\n", "answer": "15", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000918.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 15? Answer with a number (can be integer or decimal).0: [(1, 6), (4, 8)]\\n1: [(0, 6), (2, 1), (5, 9)]\\n2: [(1, 1), (3, 6), (6, 2)]\\n3: [(2, 6), (6, 1), (7, 7)]\\n4: [(0, 8), (5, 9), (8, 9)]\\n5: [(1, 9), (4, 9), (6, 10), (9, 2), (10, 8)]\\n6: [(2, 2), (3, 1), (5, 10), (7, 3), (10, 10)]\\n7: [(3, 7), (6, 3), (10, 2), (11, 1)]\\n8: [(4, 9), (9, 10), (12, 2)]\\n9: [(5, 2), (8, 10), (10, 2), (13, 7)]\\n10: [(5, 8), (6, 10), (7, 2), (9, 2), (11, 2), (14, 8)]\\n11: [(7, 1), (10, 2), (14, 1), (15, 4)]\\n12: [(8, 2), (13, 7)]\\n13: [(9, 7), (12, 7), (14, 7)]\\n14: [(10, 8), (11, 1), (13, 7), (15, 5)]\\n15: [(11, 4), (14, 5)]\\n", "answer": "17", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000919.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 15? Answer with a number (can be integer or decimal).0: [(1, 9), (4, 6)]\\n1: [(0, 9), (2, 4), (5, 6)]\\n2: [(1, 4), (3, 5), (6, 8), (7, 7)]\\n3: [(2, 5), (6, 1), (7, 4)]\\n4: [(0, 6), (5, 8), (8, 1)]\\n5: [(1, 6), (4, 8), (6, 8), (8, 8), (9, 7), (10, 2)]\\n6: [(2, 8), (3, 1), (5, 8), (7, 3), (10, 1)]\\n7: [(2, 7), (3, 4), (6, 3), (10, 7), (11, 1)]\\n8: [(4, 1), (5, 8), (9, 8), (12, 5)]\\n9: [(5, 7), (8, 8), (10, 4), (13, 9)]\\n10: [(5, 2), (6, 1), (7, 7), (9, 4), (11, 10), (13, 2), (14, 2)]\\n11: [(7, 1), (10, 10), (14, 5), (15, 5)]\\n12: [(8, 5), (13, 6)]\\n13: [(9, 9), (10, 2), (12, 6), (14, 3)]\\n14: [(10, 2), (11, 5), (13, 3), (15, 4)]\\n15: [(11, 5), (14, 4)]\\n", "answer": "22", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000920.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 15? Answer with a number (can be integer or decimal).0: [(1, 2), (4, 7), (5, 7)]\\n1: [(0, 2), (2, 3), (5, 8)]\\n2: [(1, 3), (3, 3), (5, 10), (6, 4), (7, 4)]\\n3: [(2, 3), (6, 5), (7, 2)]\\n4: [(0, 7), (5, 3), (8, 7)]\\n5: [(0, 7), (1, 8), (2, 10), (4, 3), (6, 7), (8, 4), (9, 8)]\\n6: [(2, 4), (3, 5), (5, 7), (7, 1), (9, 9), (10, 8)]\\n7: [(2, 4), (3, 2), (6, 1), (10, 9), (11, 4)]\\n8: [(4, 7), (5, 4), (9, 7), (12, 9), (13, 4)]\\n9: [(5, 8), (6, 9), (8, 7), (10, 8), (13, 8), (14, 7)]\\n10: [(6, 8), (7, 9), (9, 8), (11, 10), (14, 8)]\\n11: [(7, 4), (10, 10), (14, 8), (15, 3)]\\n12: [(8, 9), (13, 5)]\\n13: [(8, 4), (9, 8), (12, 5), (14, 9)]\\n14: [(9, 7), (10, 8), (11, 8), (13, 9), (15, 9)]\\n15: [(11, 3), (14, 9)]\\n", "answer": "16", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000921.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 15? Answer with a number (can be integer or decimal).0: [(1, 3), (4, 6), (5, 1)]\\n1: [(0, 3), (2, 4), (5, 1), (6, 4)]\\n2: [(1, 4), (3, 3), (6, 1)]\\n3: [(2, 3), (6, 2), (7, 4)]\\n4: [(0, 6), (5, 9), (8, 1)]\\n5: [(0, 1), (1, 1), (4, 9), (6, 6), (8, 7), (9, 1)]\\n6: [(1, 4), (2, 1), (3, 2), (5, 6), (7, 1), (9, 9), (10, 3)]\\n7: [(3, 4), (6, 1), (10, 8), (11, 9)]\\n8: [(4, 1), (5, 7), (9, 4), (12, 10)]\\n9: [(5, 1), (6, 9), (8, 4), (10, 10), (13, 5), (14, 9)]\\n10: [(6, 3), (7, 8), (9, 10), (11, 7), (13, 2), (14, 7), (15, 9)]\\n11: [(7, 9), (10, 7), (14, 10), (15, 5)]\\n12: [(8, 10), (13, 7)]\\n13: [(9, 5), (10, 2), (12, 7), (14, 6)]\\n14: [(9, 9), (10, 7), (11, 10), (13, 6), (15, 6)]\\n15: [(10, 9), (11, 5), (14, 6)]\\n", "answer": "17", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000922.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 2 to node 8? Answer with a number (can be integer or decimal).0: [(1, 5), (4, 1), (5, 3)]\\n1: [(0, 5), (2, 9), (5, 8)]\\n2: [(1, 9), (3, 2), (6, 6), (7, 4)]\\n3: [(2, 2), (6, 3), (7, 6)]\\n4: [(0, 1), (5, 8), (8, 9)]\\n5: [(0, 3), (1, 8), (4, 8), (6, 10), (9, 3)]\\n6: [(2, 6), (3, 3), (5, 10), (7, 7), (10, 6)]\\n7: [(2, 4), (3, 6), (6, 7), (10, 7), (11, 5)]\\n8: [(4, 9), (9, 6), (12, 1), (13, 9)]\\n9: [(5, 3), (8, 6), (10, 7), (13, 10)]\\n10: [(6, 6), (7, 7), (9, 7), (11, 1), (14, 8)]\\n11: [(7, 5), (10, 1), (14, 2), (15, 2)]\\n12: [(8, 1), (13, 6)]\\n13: [(8, 9), (9, 10), (12, 6), (14, 2)]\\n14: [(10, 8), (11, 2), (13, 2), (15, 7)]\\n15: [(11, 2), (14, 7)]\\n", "answer": "20", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000923.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 15? Answer with a number (can be integer or decimal).0: [(1, 9), (4, 7)]\\n1: [(0, 9), (2, 5), (4, 6), (5, 7)]\\n2: [(1, 5), (3, 8), (6, 8)]\\n3: [(2, 8), (6, 7), (7, 5)]\\n4: [(0, 7), (1, 6), (5, 1), (8, 7)]\\n5: [(1, 7), (4, 1), (6, 6), (9, 3)]\\n6: [(2, 8), (3, 7), (5, 6), (7, 6), (10, 5), (11, 5)]\\n7: [(3, 5), (6, 6), (10, 8), (11, 1)]\\n8: [(4, 7), (9, 6), (12, 9)]\\n9: [(5, 3), (8, 6), (10, 1), (13, 8), (14, 7)]\\n10: [(6, 5), (7, 8), (9, 1), (11, 2), (14, 3)]\\n11: [(6, 5), (7, 1), (10, 2), (14, 8), (15, 10)]\\n12: [(8, 9), (13, 3)]\\n13: [(9, 8), (12, 3), (14, 6)]\\n14: [(9, 7), (10, 3), (11, 8), (13, 6), (15, 9)]\\n15: [(11, 10), (14, 9)]\\n", "answer": "24", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000924.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 8), (5, 4)]\\n1: [(0, 8), (2, 4), (6, 5)]\\n2: [(1, 4), (3, 9), (7, 6)]\\n3: [(2, 9), (4, 3), (8, 1)]\\n4: [(3, 3), (8, 5), (9, 1)]\\n5: [(0, 4), (6, 8), (10, 9)]\\n6: [(1, 5), (5, 8), (7, 8), (11, 3)]\\n7: [(2, 6), (6, 8), (8, 4), (12, 3)]\\n8: [(3, 1), (4, 5), (7, 4), (9, 2), (13, 9)]\\n9: [(4, 1), (8, 2), (13, 2), (14, 9)]\\n10: [(5, 9), (11, 9), (15, 1)]\\n11: [(6, 3), (10, 9), (12, 8), (16, 8)]\\n12: [(7, 3), (11, 8), (13, 2), (16, 3), (17, 5)]\\n13: [(8, 9), (9, 2), (12, 2), (14, 5), (18, 4), (19, 1)]\\n14: [(9, 9), (13, 5), (18, 9), (19, 3)]\\n15: [(10, 1), (16, 5), (20, 7)]\\n16: [(11, 8), (12, 3), (15, 5), (17, 3), (21, 6)]\\n17: [(12, 5), (16, 3), (18, 1), (21, 2), (22, 6)]\\n18: [(13, 4), (14, 9), (17, 1), (19, 10), (23, 9)]\\n19: [(13, 1), (14, 3), (18, 10), (23, 2), (24, 3)]\\n20: [(15, 7), (21, 6)]\\n21: [(16, 6), (17, 2), (20, 6), (22, 5)]\\n22: [(17, 6), (21, 5), (23, 5)]\\n23: [(18, 9), (19, 2), (22, 5), (24, 3)]\\n24: [(19, 3), (23, 3)]\\n", "answer": "27", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000925.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 4), (5, 3)]\\n1: [(0, 4), (2, 3), (6, 9)]\\n2: [(1, 3), (3, 8), (7, 5)]\\n3: [(2, 8), (4, 3), (8, 2)]\\n4: [(3, 3), (8, 6), (9, 3)]\\n5: [(0, 3), (6, 4), (10, 9)]\\n6: [(1, 9), (5, 4), (7, 6), (11, 10)]\\n7: [(2, 5), (6, 6), (8, 4), (12, 7)]\\n8: [(3, 2), (4, 6), (7, 4), (9, 1), (13, 10)]\\n9: [(4, 3), (8, 1), (13, 3), (14, 7)]\\n10: [(5, 9), (11, 10), (15, 6), (16, 10)]\\n11: [(6, 10), (10, 10), (12, 5), (16, 6)]\\n12: [(7, 7), (11, 5), (13, 5), (17, 2)]\\n13: [(8, 10), (9, 3), (12, 5), (14, 3), (18, 9)]\\n14: [(9, 7), (13, 3), (18, 1), (19, 9)]\\n15: [(10, 6), (16, 9), (20, 9), (21, 10)]\\n16: [(10, 10), (11, 6), (15, 9), (17, 10), (20, 3), (21, 6), (22, 4)]\\n17: [(12, 2), (16, 10), (18, 9), (22, 6)]\\n18: [(13, 9), (14, 1), (17, 9), (19, 9), (23, 2)]\\n19: [(14, 9), (18, 9), (23, 1), (24, 6)]\\n20: [(15, 9), (16, 3), (21, 5)]\\n21: [(15, 10), (16, 6), (20, 5), (22, 8)]\\n22: [(16, 4), (17, 6), (21, 8), (23, 10)]\\n23: [(18, 2), (19, 1), (22, 10), (24, 7)]\\n24: [(19, 6), (23, 7)]\\n", "answer": "33", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000926.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 5), (5, 10)]\\n1: [(0, 5), (2, 10), (6, 10)]\\n2: [(1, 10), (3, 6), (7, 8)]\\n3: [(2, 6), (4, 4), (8, 2)]\\n4: [(3, 4), (8, 6), (9, 5)]\\n5: [(0, 10), (6, 2), (10, 3)]\\n6: [(1, 10), (5, 2), (7, 3), (11, 2)]\\n7: [(2, 8), (6, 3), (8, 1), (12, 6), (13, 3)]\\n8: [(3, 2), (4, 6), (7, 1), (9, 5), (13, 8)]\\n9: [(4, 5), (8, 5), (13, 6), (14, 9)]\\n10: [(5, 3), (11, 7), (15, 7)]\\n11: [(6, 2), (10, 7), (12, 10), (16, 3)]\\n12: [(7, 6), (11, 10), (13, 8), (17, 5)]\\n13: [(7, 3), (8, 8), (9, 6), (12, 8), (14, 4), (18, 4)]\\n14: [(9, 9), (13, 4), (18, 2), (19, 4)]\\n15: [(10, 7), (16, 1), (20, 5)]\\n16: [(11, 3), (15, 1), (17, 8), (21, 7)]\\n17: [(12, 5), (16, 8), (18, 7), (22, 10)]\\n18: [(13, 4), (14, 2), (17, 7), (19, 10), (23, 5)]\\n19: [(14, 4), (18, 10), (23, 1), (24, 7)]\\n20: [(15, 5), (21, 1)]\\n21: [(16, 7), (20, 1), (22, 4)]\\n22: [(17, 10), (21, 4), (23, 10)]\\n23: [(18, 5), (19, 1), (22, 10), (24, 2)]\\n24: [(19, 7), (23, 2)]\\n", "answer": "29", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000927.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 6), (5, 10)]\\n1: [(0, 6), (2, 2), (5, 4), (6, 2)]\\n2: [(1, 2), (3, 10), (7, 1)]\\n3: [(2, 10), (4, 2), (8, 7)]\\n4: [(3, 2), (8, 1), (9, 1)]\\n5: [(0, 10), (1, 4), (6, 1), (10, 7), (11, 4)]\\n6: [(1, 2), (5, 1), (7, 10), (11, 9)]\\n7: [(2, 1), (6, 10), (8, 5), (12, 5), (13, 9)]\\n8: [(3, 7), (4, 1), (7, 5), (9, 1), (13, 7)]\\n9: [(4, 1), (8, 1), (13, 4), (14, 3)]\\n10: [(5, 7), (11, 6), (15, 10)]\\n11: [(5, 4), (6, 9), (10, 6), (12, 10), (16, 9)]\\n12: [(7, 5), (11, 10), (13, 1), (17, 9), (18, 6)]\\n13: [(7, 9), (8, 7), (9, 4), (12, 1), (14, 10), (18, 3)]\\n14: [(9, 3), (13, 10), (18, 8), (19, 3)]\\n15: [(10, 10), (16, 3), (20, 10)]\\n16: [(11, 9), (15, 3), (17, 1), (21, 3)]\\n17: [(12, 9), (16, 1), (18, 8), (22, 5), (23, 2)]\\n18: [(12, 6), (13, 3), (14, 8), (17, 8), (19, 8), (23, 5)]\\n19: [(14, 3), (18, 8), (23, 4), (24, 3)]\\n20: [(15, 10), (21, 10)]\\n21: [(16, 3), (20, 10), (22, 2)]\\n22: [(17, 5), (21, 2), (23, 5)]\\n23: [(17, 2), (18, 5), (19, 4), (22, 5), (24, 8)]\\n24: [(19, 3), (23, 8)]\\n", "answer": "24", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000928.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 1), (5, 8)]\\n1: [(0, 1), (2, 1), (6, 6)]\\n2: [(1, 1), (3, 4), (7, 1)]\\n3: [(2, 4), (4, 4), (8, 3)]\\n4: [(3, 4), (8, 1), (9, 3)]\\n5: [(0, 8), (6, 1), (10, 4)]\\n6: [(1, 6), (5, 1), (7, 6), (11, 4)]\\n7: [(2, 1), (6, 6), (8, 10), (12, 4)]\\n8: [(3, 3), (4, 1), (7, 10), (9, 8), (13, 2)]\\n9: [(4, 3), (8, 8), (13, 10), (14, 10)]\\n10: [(5, 4), (11, 6), (15, 10), (16, 9)]\\n11: [(6, 4), (10, 6), (12, 10), (16, 6), (17, 9)]\\n12: [(7, 4), (11, 10), (13, 1), (16, 8), (17, 1), (18, 10)]\\n13: [(8, 2), (9, 10), (12, 1), (14, 6), (18, 8)]\\n14: [(9, 10), (13, 6), (18, 6), (19, 9)]\\n15: [(10, 10), (16, 7), (20, 6), (21, 7)]\\n16: [(10, 9), (11, 6), (12, 8), (15, 7), (17, 7), (20, 7), (21, 1)]\\n17: [(11, 9), (12, 1), (16, 7), (18, 5), (22, 8)]\\n18: [(12, 10), (13, 8), (14, 6), (17, 5), (19, 6), (23, 6)]\\n19: [(14, 9), (18, 6), (23, 5), (24, 7)]\\n20: [(15, 6), (16, 7), (21, 6)]\\n21: [(15, 7), (16, 1), (20, 6), (22, 2)]\\n22: [(17, 8), (21, 2), (23, 10)]\\n23: [(18, 6), (19, 5), (22, 10), (24, 6)]\\n24: [(19, 7), (23, 6)]\\n", "answer": "25", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000929.png", "question": "Given a weighted undirected graph with adjacency list below (format: node: [(neighbor, weight), ...]), what is the shortest distance from node 0 to node 24? Answer with a number (can be integer or decimal).0: [(1, 4), (5, 9)]\\n1: [(0, 4), (2, 8), (6, 6)]\\n2: [(1, 8), (3, 1), (7, 1)]\\n3: [(2, 1), (4, 9), (8, 6)]\\n4: [(3, 9), (8, 10), (9, 2)]\\n5: [(0, 9), (6, 8), (10, 9)]\\n6: [(1, 6), (5, 8), (7, 7), (11, 1)]\\n7: [(2, 1), (6, 7), (8, 5), (12, 3)]\\n8: [(3, 6), (4, 10), (7, 5), (9, 6), (13, 5)]\\n9: [(4, 2), (8, 6), (13, 8), (14, 1)]\\n10: [(5, 9), (11, 2), (15, 4)]\\n11: [(6, 1), (10, 2), (12, 9), (15, 2), (16, 9)]\\n12: [(7, 3), (11, 9), (13, 2), (17, 10)]\\n13: [(8, 5), (9, 8), (12, 2), (14, 1), (18, 9)]\\n14: [(9, 1), (13, 1), (18, 3), (19, 7)]\\n15: [(10, 4), (11, 2), (16, 3), (20, 3)]\\n16: [(11, 9), (15, 3), (17, 7), (21, 8), (22, 2)]\\n17: [(12, 10), (16, 7), (18, 6), (22, 3)]\\n18: [(13, 9), (14, 3), (17, 6), (19, 6), (23, 1)]\\n19: [(14, 7), (18, 6), (23, 1), (24, 5)]\\n20: [(15, 3), (21, 10)]\\n21: [(16, 8), (20, 10), (22, 4)]\\n22: [(16, 2), (17, 3), (21, 4), (23, 1)]\\n23: [(18, 1), (19, 1), (22, 1), (24, 8)]\\n24: [(19, 5), (23, 8)]\\n", "answer": "25", "system": "nan", "category": "shortest_distance_weighted", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/000930.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 3 2\\n1 X X X 2\\n3 X X X 1\\n2 X X X 2\\n  2 1 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 1, 2], [1, 2, 3], [2, 3, 1]]", "system": "{'n': 3, 'top': [1, 3, 2], 'bottom': [2, 1, 2], 'left': [1, 3, 2], 'right': [2, 1, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000931.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 2 2\\n1 X X X 2\\n2 X X X 2\\n3 X X X 1\\n  3 2 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 1, 2], [2, 3, 1], [1, 2, 3]]", "system": "{'n': 3, 'top': [1, 2, 2], 'bottom': [3, 2, 1], 'left': [1, 2, 3], 'right': [2, 2, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000932.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 3 1\\n2 X X X 1\\n1 X X X 3\\n2 X X X 2\\n  2 1 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 1, 3], [3, 2, 1], [1, 3, 2]]", "system": "{'n': 3, 'top': [2, 3, 1], 'bottom': [2, 1, 2], 'left': [2, 1, 2], 'right': [1, 3, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000933.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 1 3\\n2 X X X 2\\n1 X X X 2\\n3 X X X 1\\n  2 2 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1], [3, 1, 2], [1, 2, 3]]", "system": "{'n': 3, 'top': [2, 1, 3], 'bottom': [2, 2, 1], 'left': [2, 1, 3], 'right': [2, 2, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000934.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 1 2\\n2 X X X 2\\n2 X X X 1\\n1 X X X 3\\n  1 2 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 3, 2], [2, 1, 3], [3, 2, 1]]", "system": "{'n': 3, 'top': [3, 1, 2], 'bottom': [1, 2, 2], 'left': [2, 2, 1], 'right': [2, 1, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000935.png", "question": "Arrange skyscrapers of heights 1-3 on this 3x3 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 3).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 3 2\\n1 X X X 2\\n3 X X X 1\\n2 X X X 2\\n  2 1 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 1, 2], [1, 2, 3], [2, 3, 1]]", "system": "{'n': 3, 'top': [1, 3, 2], 'bottom': [2, 1, 2], 'left': [1, 3, 2], 'right': [2, 1, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000936.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 1 2 3\\n2 X X X X 3\\n3 X X X X 2\\n3 X X X X 1\\n1 X X X X 3\\n  1 3 2 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 4, 2, 1], [1, 2, 4, 3], [2, 3, 1, 4], [4, 1, 3, 2]]", "system": "{'n': 4, 'top': [2, 1, 2, 3], 'bottom': [1, 3, 2, 2], 'left': [2, 3, 3, 1], 'right': [3, 2, 1, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000937.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 1 2 2\\n2 X X X X 2\\n2 X X X X 2\\n1 X X X X 3\\n3 X X X X 1\\n  2 3 2 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 4, 2, 3], [3, 2, 4, 1], [4, 3, 1, 2], [2, 1, 3, 4]]", "system": "{'n': 4, 'top': [3, 1, 2, 2], 'bottom': [2, 3, 2, 1], 'left': [2, 2, 1, 3], 'right': [2, 2, 3, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000938.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 3 2 2\\n1 X X X X 2\\n3 X X X X 2\\n4 X X X X 1\\n2 X X X X 2\\n  2 1 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 1, 2, 3], [2, 3, 4, 1], [1, 2, 3, 4], [3, 4, 1, 2]]", "system": "{'n': 4, 'top': [1, 3, 2, 2], 'bottom': [2, 1, 3, 2], 'left': [1, 3, 4, 2], 'right': [2, 2, 1, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000939.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 2 1 3\\n2 X X X X 2\\n2 X X X X 2\\n3 X X X X 1\\n1 X X X X 3\\n  1 2 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 4, 1], [1, 4, 2, 3], [2, 1, 3, 4], [4, 3, 1, 2]]", "system": "{'n': 4, 'top': [2, 2, 1, 3], 'bottom': [1, 2, 3, 2], 'left': [2, 2, 3, 1], 'right': [2, 2, 1, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000940.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 1 2 2\\n2 X X X X 2\\n2 X X X X 2\\n3 X X X X 1\\n1 X X X X 3\\n  1 2 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 4, 2, 3], [3, 2, 4, 1], [2, 1, 3, 4], [4, 3, 1, 2]]", "system": "{'n': 4, 'top': [3, 1, 2, 2], 'bottom': [1, 2, 3, 2], 'left': [2, 2, 3, 1], 'right': [2, 2, 1, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000941.png", "question": "Arrange skyscrapers of heights 1-4 on this 4x4 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 4).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 2 2 3\\n1 X X X X 3\\n2 X X X X 2\\n2 X X X X 1\\n3 X X X X 2\\n  3 2 1 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 2, 3, 1], [2, 4, 1, 3], [3, 1, 2, 4], [1, 3, 4, 2]]", "system": "{'n': 4, 'top': [1, 2, 2, 3], 'bottom': [3, 2, 1, 2], 'left': [1, 2, 2, 3], 'right': [3, 2, 1, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000942.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 2 3 2 1\\n3 X X X X X 1\\n3 X X X X X 2\\n2 X X X X X 4\\n1 X X X X X 3\\n2 X X X X X 3\\n  2 3 1 3 4\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 4, 3, 1, 5], [1, 3, 2, 5, 4], [3, 5, 4, 2, 1], [5, 2, 1, 4, 3], [4, 1, 5, 3, 2]]", "system": "{'n': 5, 'top': [3, 2, 3, 2, 1], 'bottom': [2, 3, 1, 3, 4], 'left': [3, 3, 2, 1, 2], 'right': [1, 2, 4, 3, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000943.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 2 2 2 1\\n4 X X X X X 1\\n3 X X X X X 2\\n1 X X X X X 3\\n2 X X X X X 3\\n3 X X X X X 2\\n  3 2 4 1 5\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 1, 4, 5], [1, 2, 5, 3, 4], [5, 1, 4, 2, 3], [4, 5, 3, 1, 2], [3, 4, 2, 5, 1]]", "system": "{'n': 5, 'top': [2, 2, 2, 2, 1], 'bottom': [3, 2, 4, 1, 5], 'left': [4, 3, 1, 2, 3], 'right': [1, 2, 3, 3, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000944.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  5 1 3 2 4\\n2 X X X X X 3\\n3 X X X X X 2\\n2 X X X X X 2\\n2 X X X X X 1\\n1 X X X X X 4\\n  1 2 2 2 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 5, 3, 4, 2], [2, 1, 4, 5, 3], [3, 2, 5, 1, 4], [4, 3, 1, 2, 5], [5, 4, 2, 3, 1]]", "system": "{'n': 5, 'top': [5, 1, 3, 2, 4], 'bottom': [1, 2, 2, 2, 2], 'left': [2, 3, 2, 2, 1], 'right': [3, 2, 2, 1, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000945.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 2 1 2 3\\n2 X X X X X 3\\n2 X X X X X 4\\n1 X X X X X 5\\n2 X X X X X 2\\n2 X X X X X 1\\n  2 3 4 2 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 1, 5, 4, 3], [1, 5, 4, 3, 2], [5, 4, 3, 2, 1], [3, 2, 1, 5, 4], [4, 3, 2, 1, 5]]", "system": "{'n': 5, 'top': [2, 2, 1, 2, 3], 'bottom': [2, 3, 4, 2, 1], 'left': [2, 2, 1, 2, 2], 'right': [3, 4, 5, 2, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000946.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 3 2 4 1\\n4 X X X X X 1\\n3 X X X X X 3\\n1 X X X X X 2\\n2 X X X X X 3\\n2 X X X X X 2\\n  2 2 3 1 3\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[1, 3, 4, 2, 5], [2, 4, 5, 3, 1], [5, 2, 3, 1, 4], [3, 5, 1, 4, 2], [4, 1, 2, 5, 3]]", "system": "{'n': 5, 'top': [3, 3, 2, 4, 1], 'bottom': [2, 2, 3, 1, 3], 'left': [4, 3, 1, 2, 2], 'right': [1, 3, 2, 3, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000947.png", "question": "Arrange skyscrapers of heights 1-5 on this 5x5 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 5).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 3 2 4 1\\n4 X X X X X 1\\n3 X X X X X 3\\n1 X X X X X 3\\n2 X X X X X 3\\n4 X X X X X 2\\n  3 2 2 1 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 4, 1, 5], [3, 4, 5, 2, 1], [5, 1, 2, 4, 3], [4, 5, 1, 3, 2], [1, 2, 3, 5, 4]]", "system": "{'n': 5, 'top': [3, 3, 2, 4, 1], 'bottom': [3, 2, 2, 1, 2], 'left': [4, 3, 1, 2, 4], 'right': [1, 3, 3, 3, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000948.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 2 2 3 2 3\\n1 X X X X X X 5\\n2 X X X X X X 2\\n3 X X X X X X 2\\n3 X X X X X X 4\\n3 X X X X X X 3\\n2 X X X X X X 1\\n  2 4 2 2 3 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[6, 2, 5, 4, 3, 1], [4, 6, 3, 2, 1, 5], [3, 5, 2, 1, 6, 4], [1, 3, 6, 5, 4, 2], [2, 4, 1, 6, 5, 3], [5, 1, 4, 3, 2, 6]]", "system": "{'n': 6, 'top': [1, 2, 2, 3, 2, 3], 'bottom': [2, 4, 2, 2, 3, 1], 'left': [1, 2, 3, 3, 3, 2], 'right': [5, 2, 2, 4, 3, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000949.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  4 3 1 3 2 2\\n3 X X X X X X 3\\n3 X X X X X X 1\\n4 X X X X X X 3\\n3 X X X X X X 2\\n2 X X X X X X 4\\n1 X X X X X X 4\\n  1 2 3 2 2 3\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 3, 6, 1, 5, 4], [4, 5, 2, 3, 1, 6], [1, 2, 5, 6, 4, 3], [3, 4, 1, 2, 6, 5], [5, 6, 3, 4, 2, 1], [6, 1, 4, 5, 3, 2]]", "system": "{'n': 6, 'top': [4, 3, 1, 3, 2, 2], 'bottom': [1, 2, 3, 2, 2, 3], 'left': [3, 3, 4, 3, 2, 1], 'right': [3, 1, 3, 2, 4, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000950.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 3 2 1 2 2\\n3 X X X X X X 3\\n1 X X X X X X 5\\n2 X X X X X X 1\\n2 X X X X X X 2\\n3 X X X X X X 2\\n2 X X X X X X 4\\n  5 1 3 2 2 4\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 1, 4, 6, 5, 3], [6, 5, 2, 4, 3, 1], [5, 4, 1, 3, 2, 6], [4, 3, 6, 2, 1, 5], [3, 2, 5, 1, 6, 4], [1, 6, 3, 5, 4, 2]]", "system": "{'n': 6, 'top': [2, 3, 2, 1, 2, 2], 'bottom': [5, 1, 3, 2, 2, 4], 'left': [3, 1, 2, 2, 3, 2], 'right': [3, 5, 1, 2, 2, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000951.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 2 2 4 3 1\\n3 X X X X X X 1\\n2 X X X X X X 3\\n1 X X X X X X 3\\n3 X X X X X X 2\\n2 X X X X X X 2\\n2 X X X X X X 4\\n  3 1 2 3 2 4\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 5, 4, 1, 3, 6], [4, 1, 6, 3, 5, 2], [6, 3, 2, 5, 1, 4], [1, 4, 3, 6, 2, 5], [5, 2, 1, 4, 6, 3], [3, 6, 5, 2, 4, 1]]", "system": "{'n': 6, 'top': [3, 2, 2, 4, 3, 1], 'bottom': [3, 1, 2, 3, 2, 4], 'left': [3, 2, 1, 3, 2, 2], 'right': [1, 3, 3, 2, 2, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000952.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 3 4 1 2 3\\n2 X X X X X X 3\\n3 X X X X X X 2\\n1 X X X X X X 3\\n3 X X X X X X 1\\n2 X X X X X X 2\\n2 X X X X X X 4\\n  2 2 1 2 3 3\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[5, 3, 1, 6, 4, 2], [1, 5, 3, 2, 6, 4], [6, 4, 2, 1, 5, 3], [3, 1, 5, 4, 2, 6], [2, 6, 4, 3, 1, 5], [4, 2, 6, 5, 3, 1]]", "system": "{'n': 6, 'top': [2, 3, 4, 1, 2, 3], 'bottom': [2, 2, 1, 2, 3, 3], 'left': [2, 3, 1, 3, 2, 2], 'right': [3, 2, 3, 1, 2, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000953.png", "question": "Arrange skyscrapers of heights 1-6 on this 6x6 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 6).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 1 3 2 2 4\\n2 X X X X X X 3\\n3 X X X X X X 2\\n2 X X X X X X 2\\n3 X X X X X X 2\\n1 X X X X X X 3\\n4 X X X X X X 1\\n  2 3 3 2 2 1\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 6, 3, 5, 1, 2], [3, 5, 2, 4, 6, 1], [5, 1, 4, 6, 2, 3], [1, 3, 6, 2, 4, 5], [6, 2, 5, 1, 3, 4], [2, 4, 1, 3, 5, 6]]", "system": "{'n': 6, 'top': [3, 1, 3, 2, 2, 4], 'bottom': [2, 3, 3, 2, 2, 1], 'left': [2, 3, 2, 3, 1, 4], 'right': [3, 2, 2, 2, 3, 1]}", "category": "Skyscrapers", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000954.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 3 2 2 4 3 3\\n1 X X X X X X X 4\\n3 X X X X X X X 2\\n2 X X X X X X X 2\\n3 X X X X X X X 1\\n3 X X X X X X X 3\\n2 X X X X X X X 3\\n2 X X X X X X X 2\\n  4 1 3 4 2 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[7, 4, 6, 5, 2, 1, 3], [2, 6, 1, 7, 4, 3, 5], [6, 3, 5, 4, 1, 7, 2], [4, 1, 3, 2, 6, 5, 7], [1, 5, 7, 6, 3, 2, 4], [5, 2, 4, 3, 7, 6, 1], [3, 7, 2, 1, 5, 4, 6]]", "system": "{'n': 7, 'top': [1, 3, 2, 2, 4, 3, 3], 'bottom': [4, 1, 3, 4, 2, 3, 2], 'left': [1, 3, 2, 3, 3, 2, 2], 'right': [4, 2, 2, 1, 3, 3, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000955.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 4 4 1 3 4 3\\n2 X X X X X X X 3\\n1 X X X X X X X 3\\n3 X X X X X X X 1\\n2 X X X X X X X 4\\n3 X X X X X X X 2\\n3 X X X X X X X 2\\n2 X X X X X X X 3\\n  4 1 3 4 2 2 3\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[6, 3, 1, 7, 5, 2, 4], [7, 4, 2, 1, 6, 3, 5], [2, 6, 4, 3, 1, 5, 7], [5, 2, 7, 6, 4, 1, 3], [4, 1, 6, 5, 3, 7, 2], [1, 5, 3, 2, 7, 4, 6], [3, 7, 5, 4, 2, 6, 1]]", "system": "{'n': 7, 'top': [2, 4, 4, 1, 3, 4, 3], 'bottom': [4, 1, 3, 4, 2, 2, 3], 'left': [2, 1, 3, 2, 3, 3, 2], 'right': [3, 3, 1, 4, 2, 2, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000956.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  4 4 5 3 1 2 2\\n3 X X X X X X X 2\\n3 X X X X X X X 2\\n4 X X X X X X X 1\\n2 X X X X X X X 3\\n2 X X X X X X X 4\\n1 X X X X X X X 5\\n2 X X X X X X X 3\\n  2 3 1 2 2 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[3, 2, 1, 4, 7, 5, 6], [5, 4, 3, 6, 2, 7, 1], [4, 3, 2, 5, 1, 6, 7], [6, 5, 4, 7, 3, 1, 2], [1, 7, 6, 2, 5, 3, 4], [7, 6, 5, 1, 4, 2, 3], [2, 1, 7, 3, 6, 4, 5]]", "system": "{'n': 7, 'top': [4, 4, 5, 3, 1, 2, 2], 'bottom': [2, 3, 1, 2, 2, 3, 2], 'left': [3, 3, 4, 2, 2, 1, 2], 'right': [2, 2, 1, 3, 4, 5, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000957.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  2 2 3 2 3 1 2\\n3 X X X X X X X 2\\n1 X X X X X X X 4\\n3 X X X X X X X 1\\n3 X X X X X X X 3\\n3 X X X X X X X 2\\n2 X X X X X X X 3\\n2 X X X X X X X 4\\n  2 2 1 3 2 3 4\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[2, 6, 3, 5, 1, 7, 4], [7, 4, 1, 3, 6, 5, 2], [5, 2, 6, 1, 4, 3, 7], [1, 5, 2, 4, 7, 6, 3], [4, 1, 5, 7, 3, 2, 6], [3, 7, 4, 6, 2, 1, 5], [6, 3, 7, 2, 5, 4, 1]]", "system": "{'n': 7, 'top': [2, 2, 3, 2, 3, 1, 2], 'bottom': [2, 2, 1, 3, 2, 3, 4], 'left': [3, 1, 3, 3, 3, 2, 2], 'right': [2, 4, 1, 3, 2, 3, 4]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000958.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  3 3 3 3 1 2 2\\n3 X X X X X X X 2\\n4 X X X X X X X 2\\n3 X X X X X X X 1\\n2 X X X X X X X 3\\n1 X X X X X X X 3\\n2 X X X X X X X 3\\n3 X X X X X X X 3\\n  3 2 1 2 3 4 3\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[4, 1, 2, 5, 7, 3, 6], [1, 5, 6, 2, 4, 7, 3], [5, 2, 3, 6, 1, 4, 7], [3, 7, 1, 4, 6, 2, 5], [7, 4, 5, 1, 3, 6, 2], [6, 3, 4, 7, 2, 5, 1], [2, 6, 7, 3, 5, 1, 4]]", "system": "{'n': 7, 'top': [3, 3, 3, 3, 1, 2, 2], 'bottom': [3, 2, 1, 2, 3, 4, 3], 'left': [3, 4, 3, 2, 1, 2, 3], 'right': [2, 2, 1, 3, 3, 3, 3]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000959.png", "question": "Arrange skyscrapers of heights 1-7 on this 7x7 grid. The rules are as follows: \\n1. Each row and column must contain exactly one of each height (1 to 7).\\n2. The numbers around the grid indicate how many skyscrapers are visible when looking from that direction, with taller buildings obscuring shorter ones behind them.\\nGrid: Grid Layout:\\n  1 2 3 2 4 2 2\\n1 X X X X X X X 2\\n3 X X X X X X X 3\\n2 X X X X X X X 4\\n2 X X X X X X X 3\\n3 X X X X X X X 2\\n4 X X X X X X X 1\\n2 X X X X X X X 2\\n  2 4 4 5 1 3 2\\n\\nPlease provide your answer as a two-dimensional list.\\nExample answer format: [[1, 2, 3, 4], [4, 3, 2, 1], [2, 1, 4, 3], [3, 4, 1, 2]].", "answer": "[[7, 4, 2, 3, 1, 5, 6], [4, 1, 6, 7, 5, 2, 3], [3, 7, 5, 6, 4, 1, 2], [5, 2, 7, 1, 6, 3, 4], [2, 6, 4, 5, 3, 7, 1], [1, 5, 3, 4, 2, 6, 7], [6, 3, 1, 2, 7, 4, 5]]", "system": "{'n': 7, 'top': [1, 2, 3, 2, 4, 2, 2], 'bottom': [2, 4, 4, 5, 1, 3, 2], 'left': [1, 3, 2, 2, 3, 4, 2], 'right': [2, 3, 4, 3, 2, 1, 2]}", "category": "Skyscrapers", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'skyscrapers_evaluator'}"}}
{"image": "images/000960.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 10, 12], [13, 14, 11, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left up left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 10, 12], [13, 14, 11, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000961.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000962.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000963.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000964.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 0, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000965.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 0, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 0, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000966.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down left up up", "system": "[[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000967.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down left up up", "system": "[[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000968.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down left up up", "system": "[[1, 2, 3, 4], [5, 6, 11, 7], [9, 0, 10, 8], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000969.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 14, 10, 12], [0, 13, 11, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down left up left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 14, 10, 12], [0, 13, 11, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000970.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 7, 8], [9, 14, 10, 12], [0, 13, 11, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down left up left", "system": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 14, 10, 12], [0, 13, 11, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000971.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 11, 7], [9, 10, 8, 0], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right down left up up", "system": "[[1, 2, 3, 4], [5, 6, 11, 7], [9, 10, 8, 0], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000972.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[0, 2, 3, 4], [1, 6, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "up up up left left left", "system": "[[0, 2, 3, 4], [1, 6, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000973.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[0, 2, 3, 4], [1, 6, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "up up up left left left", "system": "[[0, 2, 3, 4], [1, 6, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000974.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 6, 2, 4], [5, 0, 3, 8], [9, 10, 7, 11], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down left up up left up", "system": "[[1, 6, 2, 4], [5, 0, 3, 8], [9, 10, 7, 11], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000975.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 6, 2, 4], [5, 0, 3, 8], [9, 10, 7, 11], [13, 14, 15, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down left up up left up", "system": "[[1, 6, 2, 4], [5, 0, 3, 8], [9, 10, 7, 11], [13, 14, 15, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000976.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 10, 0, 8], [9, 7, 6, 12], [13, 14, 11, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "up right down left up up left", "system": "[[1, 2, 3, 4], [5, 10, 0, 8], [9, 7, 6, 12], [13, 14, 11, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000977.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 0, 3, 4], [6, 2, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "up right up up left left left", "system": "[[1, 0, 3, 4], [6, 2, 7, 8], [5, 10, 11, 12], [9, 13, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000978.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 8, 15], [13, 14, 11, 0]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down right down left up right up left", "system": "[[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 8, 15], [13, 14, 11, 0]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000979.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 8, 15], [13, 14, 11, 0]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down right down left up right up left", "system": "[[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 8, 15], [13, 14, 11, 0]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000980.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 11, 8], [13, 14, 15, 0]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right down down left up right up left", "system": "[[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 11, 8], [13, 14, 15, 0]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000981.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 11, 8], [13, 14, 15, 0]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right down down left up right up left", "system": "[[1, 2, 3, 4], [5, 6, 12, 7], [9, 10, 11, 8], [13, 14, 15, 0]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000982.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[2, 5, 3, 4], [1, 0, 7, 8], [9, 6, 11, 12], [13, 10, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down right up left up up left left", "system": "[[2, 5, 3, 4], [1, 0, 7, 8], [9, 6, 11, 12], [13, 10, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000983.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[2, 5, 3, 4], [1, 0, 7, 8], [9, 6, 11, 12], [13, 10, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "down right up left up up left left", "system": "[[2, 5, 3, 4], [1, 0, 7, 8], [9, 6, 11, 12], [13, 10, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000984.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[9, 1, 3, 4], [0, 10, 2, 7], [13, 5, 6, 8], [14, 15, 11, 12]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left left up up right right down down down left up up right down left left left up up", "system": "[[9, 1, 3, 4], [0, 10, 2, 7], [13, 5, 6, 8], [14, 15, 11, 12]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000985.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[2, 6, 3, 4], [1, 11, 0, 7], [5, 15, 8, 12], [9, 13, 10, 14]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right down right up up up left left left down right right up left down down left up up", "system": "[[2, 6, 3, 4], [1, 11, 0, 7], [5, 15, 8, 12], [9, 13, 10, 14]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000986.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[2, 6, 3, 4], [1, 11, 0, 7], [5, 15, 8, 12], [9, 13, 10, 14]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right down right up up up left left left down right right up left down down left up up", "system": "[[2, 6, 3, 4], [1, 11, 0, 7], [5, 15, 8, 12], [9, 13, 10, 14]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000987.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 7, 0, 3], [5, 2, 6, 4], [9, 10, 12, 8], [13, 14, 11, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "right up left down left up up right up left", "system": "[[1, 7, 0, 3], [5, 2, 6, 4], [9, 10, 12, 8], [13, 14, 11, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000988.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[1, 2, 4, 7], [6, 12, 0, 3], [5, 9, 11, 8], [13, 10, 14, 15]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "left down right up right right up left up left down down left up right up left", "system": "[[1, 2, 4, 7], [6, 12, 0, 3], [5, 9, 11, 8], [13, 10, 14, 15]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000989.png", "question": "\\nYour task is to solve the 15-puzzle game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The puzzle is played on a 4x4 grid with 15 numbered tiles and one empty space\\n2. You can only move tiles horizontally or vertically into the empty space\\n3. The goal is to arrange the tiles in numerical order with:\\n   - First row: 1, 2, 3, 4\\n   - Second row: 5, 6, 7, 8\\n   - Third row: 9, 10, 11, 12\\n   - Fourth row: 13, 14, 15, empty space\\n\\n### Coordinate System:\\n- The grid positions are numbered from left to right and top to bottom\\n- Columns (horizontal): numbered 1, 2, 3, 4 from left to right\\n- Rows (vertical): numbered 1, 2, 3, 4 from top to bottom\\n- Each position can be identified by its row and column (row, column)\\n\\n### Current Puzzle State:\\nThe initial_state [[2, 5, 3, 4], [1, 10, 6, 8], [9, 14, 0, 12], [13, 15, 11, 7]] represents a 4x4 grid reading from left to right, top to bottom, where 0 represents the empty space and numbers 1-15 represent the tiles.\\n\\n### Output Format Requirements:\\n\"up\" means the tile below the empty space moves up into the empty space\\n\"down\" means the tile above the empty space moves down into the empty space\\n\"left\" means the tile to the right of the empty space moves left into the empty space\\n\"right\" means the tile to the left of the empty space moves right into the empty space\\n\\nYour final answer format should be given like: up down up left right\\n", "answer": "up left down right up right down down down right up left left up left up", "system": "[[2, 5, 3, 4], [1, 10, 6, 8], [9, 14, 0, 12], [13, 15, 11, 7]]", "category": "slidingpuzzle", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sliding_puzzle_evaluator'}"}}
{"image": "images/000990.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null], [null, null, null, null, null], [null, null, \"E\", null, null], [null, null, null, null, null], [null, null, null, null, \"S\"]]\\n\\nGrid size: 5×5\\nRow counts: 0, 0, 1, 1, 3\\nColumn counts: 0, 0, 3, 1, 1\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,4) (4,3) (4,2) (3,2) (2,2)", "system": "[[None, None, None, None, None], [None, None, None, None, None], [None, None, 'E', None, None], [None, None, None, None, None], [None, None, None, None, 'S']]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000991.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[\"E\", null, null, null, null], [null, null, null, null, null], [null, null, null, null, null], [\"S\", null, null, null, null], [null, null, null, null, null]]\\n\\nGrid size: 5×5\\nRow counts: 1, 1, 1, 1, 0\\nColumn counts: 4, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(3,0) (2,0) (1,0) (0,0)", "system": "[['E', None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], ['S', None, None, None, None], [None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000992.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null], [null, null, null, null, null], [\"S\", null, null, null, null], [null, null, null, null, null], [null, \"E\", null, null, null]]\\n\\nGrid size: 5×5\\nRow counts: 0, 0, 1, 1, 2\\nColumn counts: 3, 1, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(2,0) (3,0) (4,0) (4,1)", "system": "[[None, None, None, None, None], [None, None, None, None, None], ['S', None, None, None, None], [None, None, None, None, None], [None, 'E', None, None, None]]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000993.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null], [null, null, null, null, null], [null, null, null, null, null], [null, null, \"S\", null, null], [null, null, null, \"E\", null]]\\n\\nGrid size: 5×5\\nRow counts: 0, 0, 0, 1, 2\\nColumn counts: 0, 0, 2, 1, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(3,2) (4,2) (4,3)", "system": "[[None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], [None, None, 'S', None, None], [None, None, None, 'E', None]]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000994.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null], [null, null, null, null, null], [null, null, null, null, null], [\"E\", null, \"S\", null, null], [null, null, null, null, null]]\\n\\nGrid size: 5×5\\nRow counts: 0, 0, 0, 3, 0\\nColumn counts: 1, 1, 1, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(3,2) (3,1) (3,0)", "system": "[[None, None, None, None, None], [None, None, None, None, None], [None, None, None, None, None], ['E', None, 'S', None, None], [None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000995.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, \"E\", null, null], [null, null, null, null, null], [null, null, null, \"S\", null], [null, null, null, null, null], [null, null, null, null, null]]\\n\\nGrid size: 5×5\\nRow counts: 2, 1, 1, 0, 0\\nColumn counts: 0, 0, 1, 3, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(2,3) (1,3) (0,3) (0,2)", "system": "[[None, None, 'E', None, None], [None, None, None, None, None], [None, None, None, 'S', None], [None, None, None, None, None], [None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000996.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, \"E\", null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [\"S\", null, null, null, null, null, null]]\\n\\nGrid size: 7×7\\nRow counts: 1, 6, 1, 1, 1, 1, 1\\nColumn counts: 6, 1, 1, 1, 1, 2, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(6,0) (5,0) (4,0) (3,0) (2,0) (1,0) (1,1) (1,2) (1,3) (1,4) (1,5) (0,5)", "system": "[[None, None, None, None, None, 'E', None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], ['S', None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000997.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, \"S\"], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, \"E\", null], [null, null, null, null, null, null, null]]\\n\\nGrid size: 7×7\\nRow counts: 0, 0, 1, 1, 1, 2, 0\\nColumn counts: 0, 0, 0, 0, 0, 1, 4\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(2,6) (3,6) (4,6) (5,6) (5,5)", "system": "[[None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, 'S'], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, 'E', None], [None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000998.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, \"E\", null, null, null, null], [null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null], [null, null, null, null, null, null, null]]\\n\\nGrid size: 7×7\\nRow counts: 0, 0, 0, 2, 1, 1, 0\\nColumn counts: 0, 3, 1, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(5,1) (4,1) (3,1) (3,2)", "system": "[[None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, 'E', None, None, None, None], [None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None], [None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/000999.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, \"E\", null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, \"S\", null, null]]\\n\\nGrid size: 7×7\\nRow counts: 0, 0, 2, 1, 1, 1, 3\\nColumn counts: 0, 1, 5, 1, 1, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(6,4) (6,3) (6,2) (5,2) (4,2) (3,2) (2,2) (2,1)", "system": "[[None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, 'E', None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, 'S', None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001000.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null], [\"E\", null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null]]\\n\\nGrid size: 7×7\\nRow counts: 0, 2, 1, 1, 1, 0, 0\\nColumn counts: 1, 4, 0, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,1) (3,1) (2,1) (1,1) (1,0)", "system": "[[None, None, None, None, None, None, None], ['E', None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001001.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null], [\"E\", null, null, null, null, \"S\", null], [null, null, null, null, null, null, null], [null, null, null, null, null, null, null]]\\n\\nGrid size: 7×7\\nRow counts: 0, 0, 0, 0, 6, 0, 0\\nColumn counts: 1, 1, 1, 1, 1, 1, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,5) (4,4) (4,3) (4,2) (4,1) (4,0)", "system": "[[None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], ['E', None, None, None, None, 'S', None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001002.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, \"E\", null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, \"S\", null]]\\n\\nGrid size: 9×9\\nRow counts: 0, 0, 1, 1, 7, 1, 1, 1, 1\\nColumn counts: 0, 3, 1, 1, 1, 1, 1, 5, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(8,7) (7,7) (6,7) (5,7) (4,7) (4,6) (4,5) (4,4) (4,3) (4,2) (4,1) (3,1) (2,1)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, 'E', None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, 'S', None]]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001003.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, \"S\", null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, \"E\", null, null, null, null, null, null]]\\n\\nGrid size: 9×9\\nRow counts: 0, 0, 1, 1, 1, 1, 1, 1, 3\\nColumn counts: 0, 0, 1, 1, 7, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(2,4) (3,4) (4,4) (5,4) (6,4) (7,4) (8,4) (8,3) (8,2)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, 'S', None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, 'E', None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001004.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, \"E\", null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, \"S\", null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 9×9\\nRow counts: 0, 0, 0, 1, 3, 1, 1, 0, 0\\nColumn counts: 0, 0, 0, 0, 0, 3, 1, 2, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(6,5) (5,5) (4,5) (4,6) (4,7) (3,7)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, 'E', None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, 'S', None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001005.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, \"S\", null], [null, null, null, null, null, null, null, null, null], [null, null, null, \"E\", null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 9×9\\nRow counts: 0, 4, 1, 2, 0, 0, 0, 0, 0\\nColumn counts: 0, 0, 0, 1, 3, 1, 1, 1, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(1,7) (1,6) (1,5) (1,4) (2,4) (3,4) (3,3)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, 'S', None], [None, None, None, None, None, None, None, None, None], [None, None, None, 'E', None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001006.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [\"S\", null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, \"E\", null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 9×9\\nRow counts: 0, 0, 0, 3, 1, 2, 0, 0, 0\\nColumn counts: 1, 1, 3, 1, 0, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(3,0) (3,1) (3,2) (4,2) (5,2) (5,3)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], ['S', None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, 'E', None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001007.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, \"E\"]]\\n\\nGrid size: 9×9\\nRow counts: 0, 0, 0, 0, 8, 1, 1, 1, 1\\nColumn counts: 0, 1, 1, 1, 1, 1, 1, 1, 5\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,1) (4,2) (4,3) (4,4) (4,5) (4,6) (4,7) (4,8) (5,8) (6,8) (7,8) (8,8)", "system": "[[None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, 'E']]", "category": "snake", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001008.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, \"E\", null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 0, 0, 0, 0, 0, 0, 1, 1, 6, 0\\nColumn counts: 0, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(9,1) (9,2) (9,3) (9,4) (9,5) (9,6) (8,6) (7,6)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, 'E', None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001009.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, \"E\", null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 1, 1, 1, 5, 0, 0, 0, 0, 0, 0\\nColumn counts: 0, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,1) (4,2) (4,3) (4,4) (4,5) (3,5) (2,5) (1,5)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, 'E', None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001010.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, \"E\", null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, \"S\", null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0\\nColumn counts: 0, 0, 0, 0, 0, 1, 1, 1, 4, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(4,8) (3,8) (2,8) (1,8) (1,7) (1,6) (1,5)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, 'E', None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, 'S', None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001011.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [\"E\", null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, \"S\", null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 0, 0, 0, 1, 1, 4, 0, 0, 0, 0\\nColumn counts: 3, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(6,3) (6,2) (6,1) (6,0) (5,0) (4,0)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], ['E', None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, 'S', None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001012.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [\"E\", null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, \"S\", null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 0, 0, 0, 0, 0, 0, 1, 6, 0, 0\\nColumn counts: 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(8,5) (8,4) (8,3) (8,2) (8,1) (8,0) (7,0)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], ['E', None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, 'S', None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001013.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, \"S\", null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, \"E\", null, null, null]]\\n\\nGrid size: 11×11\\nRow counts: 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2\\nColumn counts: 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(5,6) (6,6) (7,6) (8,6) (9,6) (10,6) (10,7)", "system": "[[None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, 'S', None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, 'E', None, None, None]]", "category": "snake", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001014.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, \"S\", null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, \"E\", null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 0, 0, 0, 0, 0, 9, 1, 1, 1, 1, 2, 0\\nColumn counts: 0, 0, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(6,11) (6,10) (6,9) (6,8) (6,7) (6,6) (6,5) (6,4) (6,3) (7,3) (8,3) (9,3) (10,3) (11,3) (11,2)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, 'S', None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, 'E', None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001015.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, \"S\", null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, \"E\", null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1\\nColumn counts: 0, 0, 0, 0, 0, 0, 9, 1, 1, 1, 1, 2, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(3,6) (4,6) (5,6) (6,6) (7,6) (8,6) (9,6) (10,6) (11,6) (11,7) (11,8) (11,9) (11,10) (11,11) (12,11)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, 'S', None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, 'E', None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001016.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, \"S\", null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, \"E\", null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 0, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0\\nColumn counts: 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 5, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(2,11) (3,11) (4,11) (5,11) (6,11) (6,10) (6,9)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, 'S', None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, 'E', None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001017.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, \"S\", null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, \"E\", null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 0\\nColumn counts: 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 10, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(1,10) (2,10) (3,10) (4,10) (5,10) (6,10) (7,10) (8,10) (9,10) (10,10) (10,9) (10,8) (10,7) (10,6) (10,5) (11,5)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, 'S', None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, 'E', None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001018.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, \"E\", null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, \"S\", null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 0\\nColumn counts: 0, 0, 9, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(11,10) (11,9) (11,8) (11,7) (11,6) (11,5) (11,4) (11,3) (11,2) (10,2) (9,2) (8,2) (7,2) (6,2) (5,2) (4,2) (3,2)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, 'E', None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, 'S', None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001019.png", "question": "Please examine the grid carefully. The grid shows a Snake puzzle.\\n\\nRules:\\n1. Draw a single, non-intersecting snake path from S to E.\\n2. The snake cannot touch itself, even diagonally.\\n3. The numbers outside the grid indicate the count of snake cells per row and column.\\n\\nRefer to the initial_state below instead of an image:\\ninitial_state (list grid):\\n[[null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, \"E\", null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, \"S\", null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null]]\\n\\nGrid size: 13×13\\nRow counts: 0, 0, 0, 0, 2, 1, 1, 1, 1, 9, 0, 0, 0\\nColumn counts: 0, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 0, 0\\n\\nOutput: a coordinate sequence like (r,c) with zero-based indices.", "answer": "(9,1) (9,2) (9,3) (9,4) (9,5) (9,6) (9,7) (9,8) (9,9) (8,9) (7,9) (6,9) (5,9) (4,9) (4,10)", "system": "[[None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, 'E', None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, 'S', None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None]]", "category": "snake", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'snake_evaluator'}"}}
{"image": "images/001020.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n######\\n#    #\\n#   $#\\n#  @ #\\n#   .#\\n#    #\\n######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up right down down", "system": "######\\n#    #\\n#   $#\\n#  @ #\\n#   .#\\n#    #\\n######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001021.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#     #\\n#  @ $#\\n#     #\\n#     #\\n#    .#\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right up right down down down", "system": "#######\\n#     #\\n#  @ $#\\n#     #\\n#     #\\n#    .#\\n#######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001022.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#.  $ #\\n#@### #\\n#     #\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "down right right right right up up left left left", "system": "#######\\n#.  $ #\\n#@### #\\n#     #\\n#######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001023.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n######\\n# $ .#\\n#    #\\n#    #\\n#@   #\\n#    #\\n######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up up right right", "system": "######\\n# $ .#\\n#    #\\n#    #\\n#@   #\\n#    #\\n######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001024.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#     #\\n#  #  #\\n#$#   #\\n# # @ #\\n#.    #\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up up left left left down down down", "system": "#######\\n#     #\\n#  #  #\\n#$#   #\\n# # @ #\\n#.    #\\n#######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001025.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n# . $ #\\n#  ## #\\n#  @  #\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right right up up left left", "system": "#######\\n# . $ #\\n#  ## #\\n#  @  #\\n#######", "category": "sokoban", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001026.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#########\\n#       #\\n#    #$ #\\n#  ###  #\\n#   ##@ #\\n#   # . #\\n#       #\\n#########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up right up up left down down down", "system": "#########\\n#       #\\n#    #$ #\\n#  ###  #\\n#   ##@ #\\n#   # . #\\n#       #\\n#########", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001027.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#########\\n#       #\\n#     $ #\\n# @#    #\\n#       #\\n# #  #. #\\n#       #\\n#########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up right right right up right down down down", "system": "#########\\n#       #\\n#     $ #\\n# @#    #\\n#       #\\n# #  #. #\\n#       #\\n#########", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001028.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#     #\\n#     #\\n# @   #\\n#    $#\\n#  #  #\\n#     #\\n#    .#\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right right right down down down", "system": "#######\\n#     #\\n#     #\\n# @   #\\n#    $#\\n#  #  #\\n#     #\\n#    .#\\n#######", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001029.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n########\\n#  $ . #\\n#      #\\n#      #\\n#  ## @#\\n#      #\\n#      #\\n########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up left left left left up right right", "system": "########\\n#  $ . #\\n#      #\\n#      #\\n#  ## @#\\n#      #\\n#      #\\n########", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001030.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#  @  #\\n#$#   #\\n#     #\\n# #   #\\n#.    #\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left left down down down", "system": "#######\\n#  @  #\\n#$#   #\\n#     #\\n# #   #\\n#.    #\\n#######", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001031.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#######\\n#     #\\n#     #\\n#$#   #\\n# #   #\\n#.#@  #\\n#     #\\n#     #\\n#######\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up up left left down down", "system": "#######\\n#     #\\n#     #\\n#$#   #\\n# #   #\\n#.#@  #\\n#     #\\n#     #\\n#######", "category": "sokoban", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001032.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n########\\n#.  $  #\\n#@#    #\\n#      #\\n# # ## #\\n#  $   #\\n#   ## #\\n#  .   #\\n########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "down right right down down down up up up up right right up left left left", "system": "########\\n#.  $  #\\n#@#    #\\n#      #\\n# # ## #\\n#  $   #\\n#   ## #\\n#  .   #\\n########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001033.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#########\\n#       #\\n#$  ## $#\\n#  ###  #\\n# ### #.#\\n#  ##@  #\\n#  ##   #\\n#.      #\\n#########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right right up up left up up right down down up left up left left left left left down down down down down", "system": "#########\\n#       #\\n#$  ## $#\\n#  ###  #\\n# ### #.#\\n#  ##@  #\\n#  ##   #\\n#.      #\\n#########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001034.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n########\\n# @ $ .#\\n#      #\\n#$###  #\\n# ###  #\\n#      #\\n#.     #\\n########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right right right left left left left down down down down", "system": "########\\n# @ $ .#\\n#      #\\n#$###  #\\n# ###  #\\n#      #\\n#.     #\\n########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001035.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#########\\n#.    $ #\\n#       #\\n#  ##  $#\\n# ## ## #\\n#    #  #\\n#      .#\\n#   @   #\\n#########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up left left left up up right up right right right right right down down down up up up up left left left left left", "system": "#########\\n#.    $ #\\n#       #\\n#  ##  $#\\n# ## ## #\\n#    #  #\\n#      .#\\n#   @   #\\n#########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001036.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n########\\n#  $ @.#\\n# $ ## #\\n#   ## #\\n#  .#  #\\n#      #\\n#   #  #\\n#      #\\n########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left left down down left left up up right down down left down right up up up right right right", "system": "########\\n#  $ @.#\\n# $ ## #\\n#   ## #\\n#  .#  #\\n#      #\\n#   #  #\\n#      #\\n########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001037.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#########\\n# $    .#\\n#   ##  #\\n#$####@ #\\n# #     #\\n#.   #  #\\n#########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up left left left down left left down down up up up right right right right right", "system": "#########\\n# $    .#\\n#   ##  #\\n#$####@ #\\n# #     #\\n#.   #  #\\n#########", "category": "sokoban", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001038.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n############\\n#  .    $  #\\n#  #  #   @#\\n# ## ##### #\\n#     #  # #\\n#     #  #$#\\n# # # ## # #\\n#  #  #   .#\\n#  #  #  # #\\n#          #\\n############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "down down down down up up up up up left left left left left left", "system": "############\\n#  .    $  #\\n#  #  #   @#\\n# ## ##### #\\n#     #  # #\\n#     #  #$#\\n# # # ## # #\\n#  #  #   .#\\n#  #  #  # #\\n#          #\\n############", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001039.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n###########\\n#  $ .    #\\n#  #  #   #\\n# #  ### @#\\n#     #   #\\n#         #\\n# ####### #\\n#  #  #   #\\n#     #   #\\n# ##  #   #\\n#  # $#   #\\n#     .   #\\n###########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left down left down left left up left left left left up up up right right right down down down down left left left down down right down right right right down down left down right", "system": "###########\\n#  $ .    #\\n#  #  #   #\\n# #  ### @#\\n#     #   #\\n#         #\\n# ####### #\\n#  #  #   #\\n#     #   #\\n# ##  #   #\\n#  # $#   #\\n#     .   #\\n###########", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001040.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#############\\n# . $ @     #\\n#           #\\n#  #        #\\n#  #  #     #\\n#  ## #     #\\n# ######### #\\n#    ###   $#\\n#           #\\n#          .#\\n#     #     #\\n#           #\\n#############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left left left right right right right right right right right down down down down down down down", "system": "#############\\n# . $ @     #\\n#           #\\n#  #        #\\n#  #  #     #\\n#  ## #     #\\n# ######### #\\n#    ###   $#\\n#           #\\n#          .#\\n#     #     #\\n#           #\\n#############", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001041.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#############\\n#     $ .   #\\n#     # #   #\\n#  #  # #   #\\n#$ #  # #   #\\n# # ### ### #\\n#   ###     #\\n#.          #\\n#     #     #\\n#          @#\\n#############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up up up up up up up left left left left left left down left left up right right right right left left left left left left down down down down down", "system": "#############\\n#     $ .   #\\n#     # #   #\\n#  #  # #   #\\n#$ #  # #   #\\n# # ### ### #\\n#   ###     #\\n#.          #\\n#     #     #\\n#          @#\\n#############", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001042.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n###########\\n#         #\\n#    #$  @#\\n#         #\\n# ####    #\\n#     .   #\\n# #### ## #\\n#    #    #\\n# $##     #\\n#    #    #\\n# .       #\\n#         #\\n###########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left left up left down down down up left left left left left down down down down right down down", "system": "###########\\n#         #\\n#    #$  @#\\n#         #\\n# ####    #\\n#     .   #\\n# #### ## #\\n#    #    #\\n# $##     #\\n#    #    #\\n# .       #\\n#         #\\n###########", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001043.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n############\\n#   $ .    #\\n#  #  #  # #\\n# ### ##   #\\n#  #     # #\\n#$    #   @#\\n# ##  #  # #\\n#  #  #    #\\n#. #       #\\n# ## ##### #\\n#  #  #  # #\\n#          #\\n############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "left left left up left left left down left left up left down down down up up up up up up right right right right", "system": "############\\n#   $ .    #\\n#  #  #  # #\\n# ### ##   #\\n#  #     # #\\n#$    #   @#\\n# ##  #  # #\\n#  #  #    #\\n#. #       #\\n# ## ##### #\\n#  #  #  # #\\n#          #\\n############", "category": "sokoban", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001044.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n###########\\n# .  $    #\\n#  #     $#\\n#  ## #   #\\n#  #  #   #\\n# $   #  .#\\n#@ #### # #\\n#  #  #   #\\n# .#      #\\n#  #  ### #\\n#         #\\n###########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up up right down down down up up right right up right up up right up left left left right right right right right right down down down", "system": "###########\\n# .  $    #\\n#  #     $#\\n#  ## #   #\\n#  #  #   #\\n# $   #  .#\\n#@ #### # #\\n#  #  #   #\\n# .#      #\\n#  #  ### #\\n#         #\\n###########", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001045.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n############\\n#          #\\n#     #   $#\\n#  #  #    #\\n#  #  #    #\\n#  # ###  .#\\n# ### ## $ #\\n#$##  #@   #\\n# #   #    #\\n# ### #    #\\n#.         #\\n#        . #\\n############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right up up right down down down down down up up up up up up up up up right down down down left left left up up up left left left left left left down down down down down down down down", "system": "############\\n#          #\\n#     #   $#\\n#  #  #    #\\n#  #  #    #\\n#  # ###  .#\\n# ### ## $ #\\n#$##  #@   #\\n# #   #    #\\n# ### #    #\\n#.         #\\n#        . #\\n############", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001046.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n###########\\n#  $  . @ #\\n#  #  ##  #\\n#    ### $#\\n#  #   #  #\\n#  #  ##  #\\n#$ ##### .#\\n#  ####   #\\n#. #  #   #\\n# ### # # #\\n#  #  #   #\\n#         #\\n###########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right down down down down up up up up left left left left left down down left left left down down down down up up up up up up right right right right", "system": "###########\\n#  $  . @ #\\n#  #  ##  #\\n#    ### $#\\n#  #   #  #\\n#  #  ##  #\\n#$ ##### .#\\n#  ####   #\\n#. #  #   #\\n# ### # # #\\n#  #  #   #\\n#         #\\n###########", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001047.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#############\\n#  $    .  @#\\n#  #  #  #  #\\n#  #   ##   #\\n#  #  #  #  #\\n#  #  #     #\\n#   # ## ##$#\\n#  #        #\\n#  $     # .#\\n# ## ##  #  #\\n#     #  #  #\\n#  .        #\\n#############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "down down down down down down left left left left left left left down down down left left left up up right right right right right right up right down down down up up up right right down down down down left left left left left left up up up left left up up up up up up up right right right right right", "system": "#############\\n#  $    .  @#\\n#  #  #  #  #\\n#  #   ##   #\\n#  #  #  #  #\\n#  #  #     #\\n#   # ## ##$#\\n#  #        #\\n#  $     # .#\\n# ## ##  #  #\\n#     #  #  #\\n#  .        #\\n#############", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001048.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n#############\\n#  .  $     #\\n#$    #     #\\n#     #     #\\n#  #  #     #\\n# ## ### ## #\\n#    ##     #\\n#.   ##   $ #\\n#  @  #     #\\n#         . #\\n#############\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "right right down right right up up right right up right down down up up left left up up up up up left left left left down left left up left down down down down down", "system": "#############\\n#  .  $     #\\n#$    #     #\\n#     #     #\\n#  #  #     #\\n# ## ### ## #\\n#    ##     #\\n#.   ##   $ #\\n#  @  #     #\\n#         . #\\n#############", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001049.png", "question": "\\nYour task is to solve the Sokoban puzzle according to the rules and current state shown in the image:\\n\\n### Game Rules:\\n1. You are the player and can move up, down, left, or right\\n2. You can push boxes one space at a time\\n3. You cannot pull boxes\\n4. Boxes can only be pushed if there's an empty space behind them\\n5. The goal is to push all boxes onto target positions\\n6. Walls cannot be moved through or pushed\\n\\n### You will be given sokoban state\\n\\n1. @ represent the player\\n2. $ represent boxes\\n3. . circles represent target positions\\n4. # blocks represent walls\\n\\n### Direction Definitions:\\n- \"up\": Move up\\n- \"down\": Move down\\n- \"left\": Move left\\n- \"right\": Move right\\n\\n### Current Sokoban State is shown below:\\n###########\\n#         #\\n#    #    #\\n#   ##    #\\n#  $ ##   #\\n# $       #\\n#  #####  #\\n# $       #\\n# .. #    #\\n#  .@#    #\\n#    #    #\\n#         #\\n###########\\n\\n### Output Format Requirements:\\nYour final answer should be in the format of a space-separated sequence of moves like: up right down left\\n", "answer": "up left left left up up right down down left down right up up up left up up right down down down left down right up up up right right up left up left down down down down", "system": "###########\\n#         #\\n#    #    #\\n#   ##    #\\n#  $ ##   #\\n# $       #\\n#  #####  #\\n# $       #\\n# .. #    #\\n#  .@#    #\\n#    #    #\\n#         #\\n###########", "category": "sokoban", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sokoban_evaluator'}"}}
{"image": "images/001050.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[3, 0, 2, 0, 6, 4, 0, 1, 7], [1, 7, 9, 2, 3, 8, 5, 6, 4], [6, 4, 5, 9, 1, 7, 2, 3, 8], [7, 9, 3, 6, 0, 2, 1, 4, 5], [8, 2, 6, 1, 4, 5, 3, 7, 9], [4, 5, 0, 3, 7, 9, 6, 8, 2], [5, 1, 7, 0, 9, 3, 4, 2, 6], [2, 6, 4, 0, 5, 1, 0, 9, 3], [9, 3, 8, 0, 2, 6, 7, 5, 1]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 8, 2, 5, 6, 4, 9, 1, 7], [1, 7, 9, 2, 3, 8, 5, 6, 4], [6, 4, 5, 9, 1, 7, 2, 3, 8], [7, 9, 3, 6, 8, 2, 1, 4, 5], [8, 2, 6, 1, 4, 5, 3, 7, 9], [4, 5, 1, 3, 7, 9, 6, 8, 2], [5, 1, 7, 8, 9, 3, 4, 2, 6], [2, 6, 4, 7, 5, 1, 8, 9, 3], [9, 3, 8, 4, 2, 6, 7, 5, 1]]", "system": "[[3, 0, 2, 0, 6, 4, 0, 1, 7], [1, 7, 9, 2, 3, 8, 5, 6, 4], [6, 4, 5, 9, 1, 7, 2, 3, 8], [7, 9, 3, 6, 0, 2, 1, 4, 5], [8, 2, 6, 1, 4, 5, 3, 7, 9], [4, 5, 0, 3, 7, 9, 6, 8, 2], [5, 1, 7, 0, 9, 3, 4, 2, 6], [2, 6, 4, 0, 5, 1, 0, 9, 3], [9, 3, 8, 0, 2, 6, 7, 5, 1]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001051.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[4, 8, 6, 3, 9, 7, 1, 2, 5], [2, 5, 1, 4, 0, 6, 0, 0, 9], [0, 9, 7, 2, 5, 1, 6, 4, 8], [5, 1, 3, 8, 6, 2, 4, 9, 7], [0, 7, 4, 5, 1, 3, 2, 8, 6], [8, 6, 2, 9, 7, 4, 3, 5, 1], [7, 0, 8, 1, 3, 0, 5, 0, 2], [6, 2, 5, 7, 4, 8, 9, 1, 3], [1, 3, 9, 6, 2, 0, 8, 7, 4]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[4, 8, 6, 3, 9, 7, 1, 2, 5], [2, 5, 1, 4, 8, 6, 7, 3, 9], [3, 9, 7, 2, 5, 1, 6, 4, 8], [5, 1, 3, 8, 6, 2, 4, 9, 7], [9, 7, 4, 5, 1, 3, 2, 8, 6], [8, 6, 2, 9, 7, 4, 3, 5, 1], [7, 4, 8, 1, 3, 9, 5, 6, 2], [6, 2, 5, 7, 4, 8, 9, 1, 3], [1, 3, 9, 6, 2, 5, 8, 7, 4]]", "system": "[[4, 8, 6, 3, 9, 7, 1, 2, 5], [2, 5, 1, 4, 0, 6, 0, 0, 9], [0, 9, 7, 2, 5, 1, 6, 4, 8], [5, 1, 3, 8, 6, 2, 4, 9, 7], [0, 7, 4, 5, 1, 3, 2, 8, 6], [8, 6, 2, 9, 7, 4, 3, 5, 1], [7, 0, 8, 1, 3, 0, 5, 0, 2], [6, 2, 5, 7, 4, 8, 9, 1, 3], [1, 3, 9, 6, 2, 0, 8, 7, 4]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001052.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[8, 9, 7, 5, 4, 2, 3, 1, 6], [6, 3, 1, 0, 9, 7, 4, 2, 5], [5, 4, 0, 6, 3, 1, 9, 0, 8], [9, 1, 6, 4, 7, 8, 2, 0, 3], [4, 7, 8, 3, 2, 5, 1, 6, 9], [3, 2, 5, 9, 1, 0, 7, 0, 4], [0, 6, 9, 2, 8, 4, 5, 3, 1], [1, 5, 0, 7, 6, 9, 8, 4, 2], [2, 8, 4, 1, 5, 3, 6, 0, 7]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[8, 9, 7, 5, 4, 2, 3, 1, 6], [6, 3, 1, 8, 9, 7, 4, 2, 5], [5, 4, 2, 6, 3, 1, 9, 7, 8], [9, 1, 6, 4, 7, 8, 2, 5, 3], [4, 7, 8, 3, 2, 5, 1, 6, 9], [3, 2, 5, 9, 1, 6, 7, 8, 4], [7, 6, 9, 2, 8, 4, 5, 3, 1], [1, 5, 3, 7, 6, 9, 8, 4, 2], [2, 8, 4, 1, 5, 3, 6, 9, 7]]", "system": "[[8, 9, 7, 5, 4, 2, 3, 1, 6], [6, 3, 1, 0, 9, 7, 4, 2, 5], [5, 4, 0, 6, 3, 1, 9, 0, 8], [9, 1, 6, 4, 7, 8, 2, 0, 3], [4, 7, 8, 3, 2, 5, 1, 6, 9], [3, 2, 5, 9, 1, 0, 7, 0, 4], [0, 6, 9, 2, 8, 4, 5, 3, 1], [1, 5, 0, 7, 6, 9, 8, 4, 2], [2, 8, 4, 1, 5, 3, 6, 0, 7]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001053.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[6, 4, 1, 9, 3, 5, 8, 0, 2], [9, 3, 5, 7, 2, 8, 1, 6, 4], [7, 2, 8, 6, 0, 0, 5, 9, 3], [1, 9, 0, 5, 7, 3, 2, 8, 6], [8, 0, 2, 1, 9, 4, 0, 5, 7], [5, 7, 3, 8, 6, 2, 4, 1, 9], [4, 5, 9, 0, 8, 7, 6, 2, 1], [3, 8, 7, 0, 1, 6, 9, 4, 5], [2, 1, 6, 4, 0, 9, 7, 3, 8]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[6, 4, 1, 9, 3, 5, 8, 7, 2], [9, 3, 5, 7, 2, 8, 1, 6, 4], [7, 2, 8, 6, 4, 1, 5, 9, 3], [1, 9, 4, 5, 7, 3, 2, 8, 6], [8, 6, 2, 1, 9, 4, 3, 5, 7], [5, 7, 3, 8, 6, 2, 4, 1, 9], [4, 5, 9, 3, 8, 7, 6, 2, 1], [3, 8, 7, 2, 1, 6, 9, 4, 5], [2, 1, 6, 4, 5, 9, 7, 3, 8]]", "system": "[[6, 4, 1, 9, 3, 5, 8, 0, 2], [9, 3, 5, 7, 2, 8, 1, 6, 4], [7, 2, 8, 6, 0, 0, 5, 9, 3], [1, 9, 0, 5, 7, 3, 2, 8, 6], [8, 0, 2, 1, 9, 4, 0, 5, 7], [5, 7, 3, 8, 6, 2, 4, 1, 9], [4, 5, 9, 0, 8, 7, 6, 2, 1], [3, 8, 7, 0, 1, 6, 9, 4, 5], [2, 1, 6, 4, 0, 9, 7, 3, 8]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001054.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[9, 4, 6, 0, 3, 2, 7, 1, 5], [0, 5, 7, 6, 4, 9, 8, 2, 3], [2, 3, 8, 7, 5, 0, 0, 9, 4], [6, 9, 3, 5, 2, 8, 4, 7, 1], [8, 2, 5, 4, 1, 7, 3, 6, 0], [7, 1, 4, 3, 9, 0, 5, 8, 2], [0, 7, 9, 2, 6, 3, 1, 5, 8], [5, 0, 1, 9, 0, 4, 2, 3, 6], [3, 6, 2, 1, 8, 5, 9, 4, 7]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[9, 4, 6, 8, 3, 2, 7, 1, 5], [1, 5, 7, 6, 4, 9, 8, 2, 3], [2, 3, 8, 7, 5, 1, 6, 9, 4], [6, 9, 3, 5, 2, 8, 4, 7, 1], [8, 2, 5, 4, 1, 7, 3, 6, 9], [7, 1, 4, 3, 9, 6, 5, 8, 2], [4, 7, 9, 2, 6, 3, 1, 5, 8], [5, 8, 1, 9, 7, 4, 2, 3, 6], [3, 6, 2, 1, 8, 5, 9, 4, 7]]", "system": "[[9, 4, 6, 0, 3, 2, 7, 1, 5], [0, 5, 7, 6, 4, 9, 8, 2, 3], [2, 3, 8, 7, 5, 0, 0, 9, 4], [6, 9, 3, 5, 2, 8, 4, 7, 1], [8, 2, 5, 4, 1, 7, 3, 6, 0], [7, 1, 4, 3, 9, 0, 5, 8, 2], [0, 7, 9, 2, 6, 3, 1, 5, 8], [5, 0, 1, 9, 0, 4, 2, 3, 6], [3, 6, 2, 1, 8, 5, 9, 4, 7]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001055.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[7, 8, 9, 1, 0, 2, 4, 6, 3], [0, 6, 3, 8, 0, 9, 5, 1, 2], [5, 1, 2, 6, 4, 3, 0, 8, 9], [3, 5, 1, 4, 9, 6, 2, 7, 8], [9, 4, 6, 7, 2, 8, 3, 5, 1], [2, 7, 8, 5, 3, 1, 9, 4, 6], [8, 9, 4, 2, 1, 7, 6, 0, 5], [1, 2, 7, 0, 6, 0, 8, 9, 0], [6, 0, 5, 9, 8, 4, 1, 2, 7]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[7, 8, 9, 1, 5, 2, 4, 6, 3], [4, 6, 3, 8, 7, 9, 5, 1, 2], [5, 1, 2, 6, 4, 3, 7, 8, 9], [3, 5, 1, 4, 9, 6, 2, 7, 8], [9, 4, 6, 7, 2, 8, 3, 5, 1], [2, 7, 8, 5, 3, 1, 9, 4, 6], [8, 9, 4, 2, 1, 7, 6, 3, 5], [1, 2, 7, 3, 6, 5, 8, 9, 4], [6, 3, 5, 9, 8, 4, 1, 2, 7]]", "system": "[[7, 8, 9, 1, 0, 2, 4, 6, 3], [0, 6, 3, 8, 0, 9, 5, 1, 2], [5, 1, 2, 6, 4, 3, 0, 8, 9], [3, 5, 1, 4, 9, 6, 2, 7, 8], [9, 4, 6, 7, 2, 8, 3, 5, 1], [2, 7, 8, 5, 3, 1, 9, 4, 6], [8, 9, 4, 2, 1, 7, 6, 0, 5], [1, 2, 7, 0, 6, 0, 8, 9, 0], [6, 0, 5, 9, 8, 4, 1, 2, 7]]", "category": "sudoku", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001056.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[7, 9, 2, 6, 0, 5, 4, 0, 0], [5, 1, 6, 8, 4, 3, 9, 7, 2], [3, 4, 8, 2, 9, 0, 0, 5, 6], [8, 5, 4, 0, 3, 0, 7, 6, 0], [6, 0, 0, 4, 0, 8, 3, 2, 9], [2, 3, 9, 1, 0, 6, 5, 8, 4], [9, 8, 3, 7, 2, 0, 0, 4, 0], [1, 2, 0, 5, 6, 4, 0, 9, 3], [4, 6, 5, 3, 0, 9, 2, 1, 7]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[7, 9, 2, 6, 1, 5, 4, 3, 8], [5, 1, 6, 8, 4, 3, 9, 7, 2], [3, 4, 8, 2, 9, 7, 1, 5, 6], [8, 5, 4, 9, 3, 2, 7, 6, 1], [6, 7, 1, 4, 5, 8, 3, 2, 9], [2, 3, 9, 1, 7, 6, 5, 8, 4], [9, 8, 3, 7, 2, 1, 6, 4, 5], [1, 2, 7, 5, 6, 4, 8, 9, 3], [4, 6, 5, 3, 8, 9, 2, 1, 7]]", "system": "[[7, 9, 2, 6, 0, 5, 4, 0, 0], [5, 1, 6, 8, 4, 3, 9, 7, 2], [3, 4, 8, 2, 9, 0, 0, 5, 6], [8, 5, 4, 0, 3, 0, 7, 6, 0], [6, 0, 0, 4, 0, 8, 3, 2, 9], [2, 3, 9, 1, 0, 6, 5, 8, 4], [9, 8, 3, 7, 2, 0, 0, 4, 0], [1, 2, 0, 5, 6, 4, 0, 9, 3], [4, 6, 5, 3, 0, 9, 2, 1, 7]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001057.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 0, 1, 5, 7, 6, 8, 2, 3], [0, 6, 0, 3, 8, 2, 1, 4, 9], [3, 2, 8, 9, 1, 4, 7, 6, 5], [4, 0, 0, 6, 9, 0, 5, 7, 0], [2, 7, 5, 0, 3, 8, 9, 1, 6], [6, 1, 9, 2, 5, 7, 0, 0, 4], [8, 5, 2, 1, 0, 3, 0, 9, 7], [7, 9, 6, 0, 2, 5, 0, 3, 1], [1, 3, 4, 7, 0, 0, 2, 5, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[9, 4, 1, 5, 7, 6, 8, 2, 3], [5, 6, 7, 3, 8, 2, 1, 4, 9], [3, 2, 8, 9, 1, 4, 7, 6, 5], [4, 8, 3, 6, 9, 1, 5, 7, 2], [2, 7, 5, 4, 3, 8, 9, 1, 6], [6, 1, 9, 2, 5, 7, 3, 8, 4], [8, 5, 2, 1, 4, 3, 6, 9, 7], [7, 9, 6, 8, 2, 5, 4, 3, 1], [1, 3, 4, 7, 6, 9, 2, 5, 8]]", "system": "[[0, 0, 1, 5, 7, 6, 8, 2, 3], [0, 6, 0, 3, 8, 2, 1, 4, 9], [3, 2, 8, 9, 1, 4, 7, 6, 5], [4, 0, 0, 6, 9, 0, 5, 7, 0], [2, 7, 5, 0, 3, 8, 9, 1, 6], [6, 1, 9, 2, 5, 7, 0, 0, 4], [8, 5, 2, 1, 0, 3, 0, 9, 7], [7, 9, 6, 0, 2, 5, 0, 3, 1], [1, 3, 4, 7, 0, 0, 2, 5, 0]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001058.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 7, 9, 4, 2, 6, 1, 8, 5], [6, 2, 0, 0, 1, 8, 7, 0, 9], [8, 0, 5, 9, 7, 3, 0, 6, 4], [0, 0, 6, 0, 5, 7, 9, 2, 3], [2, 9, 3, 6, 4, 0, 5, 7, 8], [0, 0, 8, 3, 9, 2, 0, 1, 6], [0, 0, 2, 0, 6, 5, 8, 9, 7], [0, 6, 1, 0, 8, 9, 3, 4, 2], [9, 8, 7, 2, 3, 4, 6, 5, 1]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 7, 9, 4, 2, 6, 1, 8, 5], [6, 2, 4, 5, 1, 8, 7, 3, 9], [8, 1, 5, 9, 7, 3, 2, 6, 4], [1, 4, 6, 8, 5, 7, 9, 2, 3], [2, 9, 3, 6, 4, 1, 5, 7, 8], [7, 5, 8, 3, 9, 2, 4, 1, 6], [4, 3, 2, 1, 6, 5, 8, 9, 7], [5, 6, 1, 7, 8, 9, 3, 4, 2], [9, 8, 7, 2, 3, 4, 6, 5, 1]]", "system": "[[0, 7, 9, 4, 2, 6, 1, 8, 5], [6, 2, 0, 0, 1, 8, 7, 0, 9], [8, 0, 5, 9, 7, 3, 0, 6, 4], [0, 0, 6, 0, 5, 7, 9, 2, 3], [2, 9, 3, 6, 4, 0, 5, 7, 8], [0, 0, 8, 3, 9, 2, 0, 1, 6], [0, 0, 2, 0, 6, 5, 8, 9, 7], [0, 6, 1, 0, 8, 9, 3, 4, 2], [9, 8, 7, 2, 3, 4, 6, 5, 1]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001059.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 0, 7, 4, 3, 0, 1, 9, 8], [3, 4, 2, 1, 9, 8, 5, 6, 7], [0, 1, 8, 0, 0, 0, 4, 3, 2], [7, 0, 4, 0, 0, 1, 9, 8, 5], [8, 9, 5, 6, 0, 4, 3, 2, 1], [0, 3, 1, 9, 8, 0, 6, 7, 4], [5, 8, 6, 7, 4, 3, 2, 0, 9], [4, 0, 3, 2, 0, 9, 8, 5, 6], [1, 2, 9, 8, 5, 6, 0, 4, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[6, 5, 7, 4, 3, 2, 1, 9, 8], [3, 4, 2, 1, 9, 8, 5, 6, 7], [9, 1, 8, 5, 6, 7, 4, 3, 2], [7, 6, 4, 3, 2, 1, 9, 8, 5], [8, 9, 5, 6, 7, 4, 3, 2, 1], [2, 3, 1, 9, 8, 5, 6, 7, 4], [5, 8, 6, 7, 4, 3, 2, 1, 9], [4, 7, 3, 2, 1, 9, 8, 5, 6], [1, 2, 9, 8, 5, 6, 7, 4, 3]]", "system": "[[0, 0, 7, 4, 3, 0, 1, 9, 8], [3, 4, 2, 1, 9, 8, 5, 6, 7], [0, 1, 8, 0, 0, 0, 4, 3, 2], [7, 0, 4, 0, 0, 1, 9, 8, 5], [8, 9, 5, 6, 0, 4, 3, 2, 1], [0, 3, 1, 9, 8, 0, 6, 7, 4], [5, 8, 6, 7, 4, 3, 2, 0, 9], [4, 0, 3, 2, 0, 9, 8, 5, 6], [1, 2, 9, 8, 5, 6, 0, 4, 0]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001060.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[3, 0, 8, 9, 5, 2, 1, 6, 7], [6, 1, 7, 4, 0, 3, 9, 2, 5], [2, 9, 0, 0, 7, 0, 4, 0, 8], [9, 7, 0, 8, 3, 1, 5, 4, 2], [4, 5, 0, 7, 0, 9, 8, 1, 3], [0, 8, 3, 0, 2, 4, 7, 9, 0], [5, 6, 9, 0, 1, 0, 2, 8, 4], [7, 3, 1, 2, 0, 8, 0, 5, 9], [8, 0, 4, 0, 9, 5, 3, 7, 1]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 4, 8, 9, 5, 2, 1, 6, 7], [6, 1, 7, 4, 8, 3, 9, 2, 5], [2, 9, 5, 1, 7, 6, 4, 3, 8], [9, 7, 6, 8, 3, 1, 5, 4, 2], [4, 5, 2, 7, 6, 9, 8, 1, 3], [1, 8, 3, 5, 2, 4, 7, 9, 6], [5, 6, 9, 3, 1, 7, 2, 8, 4], [7, 3, 1, 2, 4, 8, 6, 5, 9], [8, 2, 4, 6, 9, 5, 3, 7, 1]]", "system": "[[3, 0, 8, 9, 5, 2, 1, 6, 7], [6, 1, 7, 4, 0, 3, 9, 2, 5], [2, 9, 0, 0, 7, 0, 4, 0, 8], [9, 7, 0, 8, 3, 1, 5, 4, 2], [4, 5, 0, 7, 0, 9, 8, 1, 3], [0, 8, 3, 0, 2, 4, 7, 9, 0], [5, 6, 9, 0, 1, 0, 2, 8, 4], [7, 3, 1, 2, 0, 8, 0, 5, 9], [8, 0, 4, 0, 9, 5, 3, 7, 1]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001061.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[6, 7, 5, 0, 2, 4, 1, 3, 9], [4, 0, 0, 0, 3, 1, 0, 5, 0], [1, 9, 3, 7, 0, 6, 0, 2, 8], [0, 5, 6, 2, 0, 9, 7, 1, 3], [9, 2, 4, 3, 1, 7, 8, 0, 0], [7, 3, 1, 5, 6, 8, 9, 4, 2], [2, 6, 8, 4, 9, 3, 5, 0, 1], [0, 1, 7, 6, 8, 2, 3, 9, 0], [0, 4, 0, 1, 7, 5, 2, 0, 6]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[6, 7, 5, 8, 2, 4, 1, 3, 9], [4, 8, 2, 9, 3, 1, 6, 5, 7], [1, 9, 3, 7, 5, 6, 4, 2, 8], [8, 5, 6, 2, 4, 9, 7, 1, 3], [9, 2, 4, 3, 1, 7, 8, 6, 5], [7, 3, 1, 5, 6, 8, 9, 4, 2], [2, 6, 8, 4, 9, 3, 5, 7, 1], [5, 1, 7, 6, 8, 2, 3, 9, 4], [3, 4, 9, 1, 7, 5, 2, 8, 6]]", "system": "[[6, 7, 5, 0, 2, 4, 1, 3, 9], [4, 0, 0, 0, 3, 1, 0, 5, 0], [1, 9, 3, 7, 0, 6, 0, 2, 8], [0, 5, 6, 2, 0, 9, 7, 1, 3], [9, 2, 4, 3, 1, 7, 8, 0, 0], [7, 3, 1, 5, 6, 8, 9, 4, 2], [2, 6, 8, 4, 9, 3, 5, 0, 1], [0, 1, 7, 6, 8, 2, 3, 9, 0], [0, 4, 0, 1, 7, 5, 2, 0, 6]]", "category": "sudoku", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001062.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[4, 0, 9, 5, 8, 2, 1, 6, 7], [0, 1, 7, 0, 4, 9, 5, 0, 2], [0, 0, 0, 0, 6, 7, 0, 4, 9], [0, 7, 6, 9, 5, 0, 2, 0, 0], [1, 2, 8, 7, 0, 0, 9, 5, 4], [5, 0, 0, 2, 1, 0, 0, 3, 6], [2, 0, 5, 0, 0, 1, 6, 9, 3], [7, 8, 1, 6, 9, 3, 0, 2, 5], [0, 6, 0, 4, 2, 5, 0, 0, 1]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[4, 3, 9, 5, 8, 2, 1, 6, 7], [6, 1, 7, 3, 4, 9, 5, 8, 2], [8, 5, 2, 1, 6, 7, 3, 4, 9], [3, 7, 6, 9, 5, 4, 2, 1, 8], [1, 2, 8, 7, 3, 6, 9, 5, 4], [5, 9, 4, 2, 1, 8, 7, 3, 6], [2, 4, 5, 8, 7, 1, 6, 9, 3], [7, 8, 1, 6, 9, 3, 4, 2, 5], [9, 6, 3, 4, 2, 5, 8, 7, 1]]", "system": "[[4, 0, 9, 5, 8, 2, 1, 6, 7], [0, 1, 7, 0, 4, 9, 5, 0, 2], [0, 0, 0, 0, 6, 7, 0, 4, 9], [0, 7, 6, 9, 5, 0, 2, 0, 0], [1, 2, 8, 7, 0, 0, 9, 5, 4], [5, 0, 0, 2, 1, 0, 0, 3, 6], [2, 0, 5, 0, 0, 1, 6, 9, 3], [7, 8, 1, 6, 9, 3, 0, 2, 5], [0, 6, 0, 4, 2, 5, 0, 0, 1]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001063.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[4, 0, 0, 0, 1, 2, 6, 5, 9], [0, 0, 0, 9, 6, 0, 3, 7, 0], [9, 6, 0, 4, 3, 7, 0, 0, 0], [7, 4, 6, 2, 8, 0, 9, 1, 0], [5, 9, 0, 0, 0, 6, 0, 0, 2], [2, 8, 3, 5, 0, 1, 4, 6, 7], [6, 0, 9, 3, 0, 4, 0, 8, 1], [3, 2, 0, 1, 5, 8, 0, 0, 6], [1, 5, 0, 6, 7, 9, 2, 4, 3]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[4, 3, 7, 8, 1, 2, 6, 5, 9], [8, 1, 2, 9, 6, 5, 3, 7, 4], [9, 6, 5, 4, 3, 7, 1, 2, 8], [7, 4, 6, 2, 8, 3, 9, 1, 5], [5, 9, 1, 7, 4, 6, 8, 3, 2], [2, 8, 3, 5, 9, 1, 4, 6, 7], [6, 7, 9, 3, 2, 4, 5, 8, 1], [3, 2, 4, 1, 5, 8, 7, 9, 6], [1, 5, 8, 6, 7, 9, 2, 4, 3]]", "system": "[[4, 0, 0, 0, 1, 2, 6, 5, 9], [0, 0, 0, 9, 6, 0, 3, 7, 0], [9, 6, 0, 4, 3, 7, 0, 0, 0], [7, 4, 6, 2, 8, 0, 9, 1, 0], [5, 9, 0, 0, 0, 6, 0, 0, 2], [2, 8, 3, 5, 0, 1, 4, 6, 7], [6, 0, 9, 3, 0, 4, 0, 8, 1], [3, 2, 0, 1, 5, 8, 0, 0, 6], [1, 5, 0, 6, 7, 9, 2, 4, 3]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001064.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[3, 0, 5, 0, 0, 7, 2, 0, 6], [2, 6, 0, 5, 3, 8, 1, 4, 7], [1, 7, 4, 0, 0, 6, 3, 5, 8], [5, 3, 6, 8, 0, 1, 9, 0, 2], [0, 0, 0, 0, 9, 0, 0, 6, 3], [9, 2, 0, 6, 5, 0, 4, 8, 1], [7, 9, 1, 2, 0, 0, 8, 0, 4], [8, 0, 0, 1, 0, 0, 6, 2, 5], [6, 5, 2, 0, 8, 4, 7, 0, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 8, 5, 4, 1, 7, 2, 9, 6], [2, 6, 9, 5, 3, 8, 1, 4, 7], [1, 7, 4, 9, 2, 6, 3, 5, 8], [5, 3, 6, 8, 4, 1, 9, 7, 2], [4, 1, 8, 7, 9, 2, 5, 6, 3], [9, 2, 7, 6, 5, 3, 4, 8, 1], [7, 9, 1, 2, 6, 5, 8, 3, 4], [8, 4, 3, 1, 7, 9, 6, 2, 5], [6, 5, 2, 3, 8, 4, 7, 1, 9]]", "system": "[[3, 0, 5, 0, 0, 7, 2, 0, 6], [2, 6, 0, 5, 3, 8, 1, 4, 7], [1, 7, 4, 0, 0, 6, 3, 5, 8], [5, 3, 6, 8, 0, 1, 9, 0, 2], [0, 0, 0, 0, 9, 0, 0, 6, 3], [9, 2, 0, 6, 5, 0, 4, 8, 1], [7, 9, 1, 2, 0, 0, 8, 0, 4], [8, 0, 0, 1, 0, 0, 6, 2, 5], [6, 5, 2, 0, 8, 4, 7, 0, 0]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001065.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 1, 7, 0, 3, 8, 0, 0, 4], [5, 4, 0, 0, 7, 0, 2, 3, 0], [2, 0, 3, 5, 9, 4, 6, 0, 1], [0, 7, 0, 1, 2, 3, 8, 5, 9], [8, 9, 5, 0, 0, 7, 1, 0, 0], [0, 3, 0, 0, 5, 9, 4, 6, 0], [0, 6, 0, 0, 1, 2, 3, 8, 5], [0, 0, 8, 9, 4, 0, 7, 0, 2], [7, 2, 1, 3, 8, 5, 9, 4, 6]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[6, 1, 7, 2, 3, 8, 5, 9, 4], [5, 4, 9, 6, 7, 1, 2, 3, 8], [2, 8, 3, 5, 9, 4, 6, 7, 1], [4, 7, 6, 1, 2, 3, 8, 5, 9], [8, 9, 5, 4, 6, 7, 1, 2, 3], [1, 3, 2, 8, 5, 9, 4, 6, 7], [9, 6, 4, 7, 1, 2, 3, 8, 5], [3, 5, 8, 9, 4, 6, 7, 1, 2], [7, 2, 1, 3, 8, 5, 9, 4, 6]]", "system": "[[0, 1, 7, 0, 3, 8, 0, 0, 4], [5, 4, 0, 0, 7, 0, 2, 3, 0], [2, 0, 3, 5, 9, 4, 6, 0, 1], [0, 7, 0, 1, 2, 3, 8, 5, 9], [8, 9, 5, 0, 0, 7, 1, 0, 0], [0, 3, 0, 0, 5, 9, 4, 6, 0], [0, 6, 0, 0, 1, 2, 3, 8, 5], [0, 0, 8, 9, 4, 0, 7, 0, 2], [7, 2, 1, 3, 8, 5, 9, 4, 6]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001066.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 3, 0, 2, 1, 0, 9, 0, 0], [9, 8, 4, 7, 3, 0, 2, 6, 0], [0, 1, 6, 9, 0, 4, 7, 0, 3], [1, 0, 9, 8, 4, 0, 3, 2, 0], [8, 0, 7, 3, 0, 2, 1, 9, 6], [3, 5, 2, 1, 6, 9, 0, 7, 0], [0, 0, 1, 0, 9, 8, 4, 0, 7], [0, 9, 0, 4, 7, 3, 5, 1, 0], [4, 7, 0, 0, 0, 1, 6, 8, 9]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[7, 3, 5, 2, 1, 6, 9, 4, 8], [9, 8, 4, 7, 3, 5, 2, 6, 1], [2, 1, 6, 9, 8, 4, 7, 5, 3], [1, 6, 9, 8, 4, 7, 3, 2, 5], [8, 4, 7, 3, 5, 2, 1, 9, 6], [3, 5, 2, 1, 6, 9, 8, 7, 4], [5, 2, 1, 6, 9, 8, 4, 3, 7], [6, 9, 8, 4, 7, 3, 5, 1, 2], [4, 7, 3, 5, 2, 1, 6, 8, 9]]", "system": "[[0, 3, 0, 2, 1, 0, 9, 0, 0], [9, 8, 4, 7, 3, 0, 2, 6, 0], [0, 1, 6, 9, 0, 4, 7, 0, 3], [1, 0, 9, 8, 4, 0, 3, 2, 0], [8, 0, 7, 3, 0, 2, 1, 9, 6], [3, 5, 2, 1, 6, 9, 0, 7, 0], [0, 0, 1, 0, 9, 8, 4, 0, 7], [0, 9, 0, 4, 7, 3, 5, 1, 0], [4, 7, 0, 0, 0, 1, 6, 8, 9]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001067.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 7, 2, 4, 0, 1, 5, 0, 0], [0, 1, 4, 8, 0, 3, 0, 7, 2], [5, 0, 8, 0, 9, 7, 6, 0, 0], [4, 5, 1, 3, 0, 0, 2, 6, 0], [8, 0, 3, 0, 2, 6, 4, 5, 0], [2, 6, 7, 1, 4, 0, 0, 9, 0], [1, 8, 0, 9, 3, 2, 7, 4, 6], [7, 0, 6, 5, 1, 0, 3, 2, 9], [3, 0, 9, 6, 0, 0, 0, 8, 5]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[9, 7, 2, 4, 6, 1, 5, 3, 8], [6, 1, 4, 8, 5, 3, 9, 7, 2], [5, 3, 8, 2, 9, 7, 6, 1, 4], [4, 5, 1, 3, 8, 9, 2, 6, 7], [8, 9, 3, 7, 2, 6, 4, 5, 1], [2, 6, 7, 1, 4, 5, 8, 9, 3], [1, 8, 5, 9, 3, 2, 7, 4, 6], [7, 4, 6, 5, 1, 8, 3, 2, 9], [3, 2, 9, 6, 7, 4, 1, 8, 5]]", "system": "[[0, 7, 2, 4, 0, 1, 5, 0, 0], [0, 1, 4, 8, 0, 3, 0, 7, 2], [5, 0, 8, 0, 9, 7, 6, 0, 0], [4, 5, 1, 3, 0, 0, 2, 6, 0], [8, 0, 3, 0, 2, 6, 4, 5, 0], [2, 6, 7, 1, 4, 0, 0, 9, 0], [1, 8, 0, 9, 3, 2, 7, 4, 6], [7, 0, 6, 5, 1, 0, 3, 2, 9], [3, 0, 9, 6, 0, 0, 0, 8, 5]]", "category": "sudoku", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001068.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[7, 6, 1, 0, 3, 2, 0, 5, 0], [5, 0, 0, 0, 7, 0, 4, 3, 2], [3, 0, 4, 8, 0, 0, 0, 7, 6], [2, 1, 0, 5, 9, 0, 0, 0, 8], [9, 0, 0, 0, 6, 8, 3, 0, 1], [0, 8, 7, 0, 0, 1, 0, 9, 0], [8, 0, 0, 2, 0, 7, 9, 4, 3], [1, 0, 0, 0, 0, 0, 0, 8, 5], [4, 0, 9, 6, 0, 5, 2, 0, 7]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[7, 6, 1, 4, 3, 2, 8, 5, 9], [5, 9, 8, 1, 7, 6, 4, 3, 2], [3, 2, 4, 8, 5, 9, 1, 7, 6], [2, 1, 3, 5, 9, 4, 7, 6, 8], [9, 4, 5, 7, 6, 8, 3, 2, 1], [6, 8, 7, 3, 2, 1, 5, 9, 4], [8, 5, 6, 2, 1, 7, 9, 4, 3], [1, 7, 2, 9, 4, 3, 6, 8, 5], [4, 3, 9, 6, 8, 5, 2, 1, 7]]", "system": "[[7, 6, 1, 0, 3, 2, 0, 5, 0], [5, 0, 0, 0, 7, 0, 4, 3, 2], [3, 0, 4, 8, 0, 0, 0, 7, 6], [2, 1, 0, 5, 9, 0, 0, 0, 8], [9, 0, 0, 0, 6, 8, 3, 0, 1], [0, 8, 7, 0, 0, 1, 0, 9, 0], [8, 0, 0, 2, 0, 7, 9, 4, 3], [1, 0, 0, 0, 0, 0, 0, 8, 5], [4, 0, 9, 6, 0, 5, 2, 0, 7]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001069.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 4, 0, 0, 0, 0, 0, 8, 5], [0, 0, 1, 8, 0, 0, 6, 4, 0], [3, 0, 5, 0, 0, 6, 0, 0, 1], [0, 6, 9, 0, 8, 0, 2, 3, 0], [0, 3, 0, 6, 0, 1, 0, 7, 0], [5, 0, 8, 3, 4, 0, 0, 6, 9], [9, 2, 6, 1, 0, 8, 0, 5, 3], [0, 5, 3, 2, 6, 9, 0, 0, 0], [8, 1, 7, 0, 3, 4, 9, 2, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[6, 4, 2, 9, 1, 7, 3, 8, 5], [7, 9, 1, 8, 5, 3, 6, 4, 2], [3, 8, 5, 4, 2, 6, 7, 9, 1], [1, 6, 9, 7, 8, 5, 2, 3, 4], [2, 3, 4, 6, 9, 1, 5, 7, 8], [5, 7, 8, 3, 4, 2, 1, 6, 9], [9, 2, 6, 1, 7, 8, 4, 5, 3], [4, 5, 3, 2, 6, 9, 8, 1, 7], [8, 1, 7, 5, 3, 4, 9, 2, 6]]", "system": "[[0, 4, 0, 0, 0, 0, 0, 8, 5], [0, 0, 1, 8, 0, 0, 6, 4, 0], [3, 0, 5, 0, 0, 6, 0, 0, 1], [0, 6, 9, 0, 8, 0, 2, 3, 0], [0, 3, 0, 6, 0, 1, 0, 7, 0], [5, 0, 8, 3, 4, 0, 0, 6, 9], [9, 2, 6, 1, 0, 8, 0, 5, 3], [0, 5, 3, 2, 6, 9, 0, 0, 0], [8, 1, 7, 0, 3, 4, 9, 2, 0]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001070.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[3, 4, 0, 2, 0, 9, 0, 8, 7], [0, 0, 7, 4, 0, 1, 0, 0, 0], [0, 2, 9, 5, 0, 7, 0, 3, 1], [7, 6, 0, 0, 1, 5, 3, 9, 4], [0, 8, 5, 3, 0, 4, 0, 0, 0], [0, 0, 0, 6, 7, 0, 8, 1, 0], [2, 9, 3, 7, 0, 6, 1, 0, 8], [4, 1, 0, 0, 0, 0, 7, 5, 0], [5, 0, 6, 1, 0, 0, 0, 2, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 4, 1, 2, 6, 9, 5, 8, 7], [8, 5, 7, 4, 3, 1, 2, 6, 9], [6, 2, 9, 5, 8, 7, 4, 3, 1], [7, 6, 2, 8, 1, 5, 3, 9, 4], [1, 8, 5, 3, 9, 4, 6, 7, 2], [9, 3, 4, 6, 7, 2, 8, 1, 5], [2, 9, 3, 7, 5, 6, 1, 4, 8], [4, 1, 8, 9, 2, 3, 7, 5, 6], [5, 7, 6, 1, 4, 8, 9, 2, 3]]", "system": "[[3, 4, 0, 2, 0, 9, 0, 8, 7], [0, 0, 7, 4, 0, 1, 0, 0, 0], [0, 2, 9, 5, 0, 7, 0, 3, 1], [7, 6, 0, 0, 1, 5, 3, 9, 4], [0, 8, 5, 3, 0, 4, 0, 0, 0], [0, 0, 0, 6, 7, 0, 8, 1, 0], [2, 9, 3, 7, 0, 6, 1, 0, 8], [4, 1, 0, 0, 0, 0, 7, 5, 0], [5, 0, 6, 1, 0, 0, 0, 2, 0]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001071.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[8, 1, 0, 0, 3, 5, 6, 2, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0], [2, 0, 0, 9, 8, 1, 7, 3, 5], [1, 6, 8, 3, 5, 0, 2, 0, 0], [5, 9, 3, 0, 4, 7, 8, 0, 0], [0, 7, 2, 8, 0, 6, 0, 5, 9], [6, 2, 1, 0, 0, 0, 4, 0, 3], [0, 0, 5, 0, 7, 3, 0, 6, 0], [0, 3, 4, 0, 6, 0, 0, 0, 8]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[8, 1, 9, 7, 3, 5, 6, 2, 4], [3, 5, 7, 6, 2, 4, 9, 8, 1], [2, 4, 6, 9, 8, 1, 7, 3, 5], [1, 6, 8, 3, 5, 9, 2, 4, 7], [5, 9, 3, 2, 4, 7, 8, 1, 6], [4, 7, 2, 8, 1, 6, 3, 5, 9], [6, 2, 1, 5, 9, 8, 4, 7, 3], [9, 8, 5, 4, 7, 3, 1, 6, 2], [7, 3, 4, 1, 6, 2, 5, 9, 8]]", "system": "[[8, 1, 0, 0, 3, 5, 6, 2, 0], [0, 0, 0, 6, 0, 0, 0, 0, 0], [2, 0, 0, 9, 8, 1, 7, 3, 5], [1, 6, 8, 3, 5, 0, 2, 0, 0], [5, 9, 3, 0, 4, 7, 8, 0, 0], [0, 7, 2, 8, 0, 6, 0, 5, 9], [6, 2, 1, 0, 0, 0, 4, 0, 3], [0, 0, 5, 0, 7, 3, 0, 6, 0], [0, 3, 4, 0, 6, 0, 0, 0, 8]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001072.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 2, 4, 9, 0, 3, 6, 0, 0], [5, 7, 0, 4, 0, 0, 9, 3, 1], [1, 3, 9, 6, 5, 0, 0, 0, 0], [7, 0, 1, 0, 0, 4, 0, 9, 0], [2, 4, 5, 0, 0, 9, 1, 0, 7], [3, 9, 0, 1, 0, 0, 0, 0, 2], [4, 5, 7, 0, 9, 0, 0, 1, 6], [6, 1, 0, 7, 4, 5, 0, 0, 9], [0, 8, 2, 3, 0, 0, 0, 0, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[8, 2, 4, 9, 1, 3, 6, 7, 5], [5, 7, 6, 4, 8, 2, 9, 3, 1], [1, 3, 9, 6, 5, 7, 4, 2, 8], [7, 6, 1, 5, 2, 4, 8, 9, 3], [2, 4, 5, 8, 3, 9, 1, 6, 7], [3, 9, 8, 1, 7, 6, 5, 4, 2], [4, 5, 7, 2, 9, 8, 3, 1, 6], [6, 1, 3, 7, 4, 5, 2, 8, 9], [9, 8, 2, 3, 6, 1, 7, 5, 4]]", "system": "[[0, 2, 4, 9, 0, 3, 6, 0, 0], [5, 7, 0, 4, 0, 0, 9, 3, 1], [1, 3, 9, 6, 5, 0, 0, 0, 0], [7, 0, 1, 0, 0, 4, 0, 9, 0], [2, 4, 5, 0, 0, 9, 1, 0, 7], [3, 9, 0, 1, 0, 0, 0, 0, 2], [4, 5, 7, 0, 9, 0, 0, 1, 6], [6, 1, 0, 7, 4, 5, 0, 0, 9], [0, 8, 2, 3, 0, 0, 0, 0, 0]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001073.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 5, 0, 3, 0, 0, 2, 0, 7], [3, 0, 0, 2, 4, 7, 9, 8, 0], [2, 7, 4, 0, 0, 0, 3, 0, 6], [4, 3, 6, 0, 7, 2, 0, 5, 0], [1, 0, 5, 4, 0, 0, 0, 0, 0], [8, 0, 7, 1, 5, 9, 4, 0, 3], [5, 0, 2, 6, 9, 0, 7, 0, 0], [7, 4, 0, 0, 2, 8, 0, 9, 1], [0, 1, 0, 0, 3, 0, 0, 0, 8]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[9, 5, 8, 3, 1, 6, 2, 4, 7], [3, 6, 1, 2, 4, 7, 9, 8, 5], [2, 7, 4, 9, 8, 5, 3, 1, 6], [4, 3, 6, 8, 7, 2, 1, 5, 9], [1, 9, 5, 4, 6, 3, 8, 7, 2], [8, 2, 7, 1, 5, 9, 4, 6, 3], [5, 8, 2, 6, 9, 1, 7, 3, 4], [7, 4, 3, 5, 2, 8, 6, 9, 1], [6, 1, 9, 7, 3, 4, 5, 2, 8]]", "system": "[[0, 5, 0, 3, 0, 0, 2, 0, 7], [3, 0, 0, 2, 4, 7, 9, 8, 0], [2, 7, 4, 0, 0, 0, 3, 0, 6], [4, 3, 6, 0, 7, 2, 0, 5, 0], [1, 0, 5, 4, 0, 0, 0, 0, 0], [8, 0, 7, 1, 5, 9, 4, 0, 3], [5, 0, 2, 6, 9, 0, 7, 0, 0], [7, 4, 0, 0, 2, 8, 0, 9, 1], [0, 1, 0, 0, 3, 0, 0, 0, 8]]", "category": "sudoku", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001074.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[3, 0, 7, 6, 2, 8, 1, 0, 5], [1, 0, 5, 0, 0, 0, 0, 0, 0], [6, 2, 8, 0, 9, 0, 3, 0, 0], [0, 0, 4, 7, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 7, 6, 2], [0, 6, 2, 8, 0, 0, 5, 3, 0], [9, 0, 0, 0, 0, 6, 2, 0, 0], [0, 7, 0, 0, 8, 1, 9, 0, 0], [2, 8, 1, 0, 0, 0, 0, 0, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 4, 7, 6, 2, 8, 1, 9, 5], [1, 9, 5, 3, 4, 7, 6, 2, 8], [6, 2, 8, 1, 9, 5, 3, 4, 7], [5, 3, 4, 7, 6, 2, 8, 1, 9], [8, 1, 9, 5, 3, 4, 7, 6, 2], [7, 6, 2, 8, 1, 9, 5, 3, 4], [9, 5, 3, 4, 7, 6, 2, 8, 1], [4, 7, 6, 2, 8, 1, 9, 5, 3], [2, 8, 1, 9, 5, 3, 4, 7, 6]]", "system": "[[3, 0, 7, 6, 2, 8, 1, 0, 5], [1, 0, 5, 0, 0, 0, 0, 0, 0], [6, 2, 8, 0, 9, 0, 3, 0, 0], [0, 0, 4, 7, 0, 0, 0, 1, 0], [0, 0, 0, 0, 3, 0, 7, 6, 2], [0, 6, 2, 8, 0, 0, 5, 3, 0], [9, 0, 0, 0, 0, 6, 2, 0, 0], [0, 7, 0, 0, 8, 1, 9, 0, 0], [2, 8, 1, 0, 0, 0, 0, 0, 0]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001075.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 0, 1, 2, 7, 0, 9, 0, 0], [0, 0, 4, 0, 0, 6, 0, 0, 0], [0, 3, 7, 9, 4, 8, 0, 0, 1], [0, 0, 2, 8, 0, 0, 0, 4, 0], [0, 0, 0, 0, 5, 0, 3, 0, 2], [0, 4, 0, 0, 2, 1, 0, 7, 0], [4, 9, 6, 1, 0, 5, 0, 2, 8], [0, 0, 0, 0, 0, 0, 4, 9, 6], [7, 0, 8, 4, 0, 0, 0, 5, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[5, 6, 1, 2, 7, 3, 9, 8, 4], [9, 8, 4, 5, 1, 6, 2, 3, 7], [2, 3, 7, 9, 4, 8, 5, 6, 1], [3, 1, 2, 8, 9, 7, 6, 4, 5], [8, 7, 9, 6, 5, 4, 3, 1, 2], [6, 4, 5, 3, 2, 1, 8, 7, 9], [4, 9, 6, 1, 3, 5, 7, 2, 8], [1, 5, 3, 7, 8, 2, 4, 9, 6], [7, 2, 8, 4, 6, 9, 1, 5, 3]]", "system": "[[0, 0, 1, 2, 7, 0, 9, 0, 0], [0, 0, 4, 0, 0, 6, 0, 0, 0], [0, 3, 7, 9, 4, 8, 0, 0, 1], [0, 0, 2, 8, 0, 0, 0, 4, 0], [0, 0, 0, 0, 5, 0, 3, 0, 2], [0, 4, 0, 0, 2, 1, 0, 7, 0], [4, 9, 6, 1, 0, 5, 0, 2, 8], [0, 0, 0, 0, 0, 0, 4, 9, 6], [7, 0, 8, 4, 0, 0, 0, 5, 0]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001076.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 0, 0, 0, 0, 0, 0, 9, 8], [8, 0, 0, 0, 7, 3, 0, 4, 6], [0, 4, 5, 0, 2, 8, 7, 1, 0], [0, 0, 6, 0, 8, 0, 0, 0, 1], [0, 5, 3, 0, 6, 0, 8, 7, 0], [0, 0, 8, 5, 3, 1, 6, 0, 4], [5, 0, 0, 8, 4, 0, 0, 0, 0], [0, 0, 9, 6, 0, 0, 4, 0, 2], [0, 0, 0, 0, 9, 0, 0, 6, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[3, 1, 7, 4, 5, 6, 2, 9, 8], [8, 9, 2, 1, 7, 3, 5, 4, 6], [6, 4, 5, 9, 2, 8, 7, 1, 3], [4, 2, 6, 7, 8, 9, 3, 5, 1], [1, 5, 3, 2, 6, 4, 8, 7, 9], [9, 7, 8, 5, 3, 1, 6, 2, 4], [5, 6, 1, 8, 4, 2, 9, 3, 7], [7, 3, 9, 6, 1, 5, 4, 8, 2], [2, 8, 4, 3, 9, 7, 1, 6, 5]]", "system": "[[0, 0, 0, 0, 0, 0, 0, 9, 8], [8, 0, 0, 0, 7, 3, 0, 4, 6], [0, 4, 5, 0, 2, 8, 7, 1, 0], [0, 0, 6, 0, 8, 0, 0, 0, 1], [0, 5, 3, 0, 6, 0, 8, 7, 0], [0, 0, 8, 5, 3, 1, 6, 0, 4], [5, 0, 0, 8, 4, 0, 0, 0, 0], [0, 0, 9, 6, 0, 0, 4, 0, 2], [0, 0, 0, 0, 9, 0, 0, 6, 0]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001077.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 0, 0, 0, 9, 5, 4, 0, 2], [0, 0, 9, 0, 0, 0, 0, 8, 7], [0, 6, 4, 0, 0, 0, 0, 0, 5], [6, 0, 5, 0, 0, 0, 7, 0, 1], [0, 9, 7, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0, 7, 1, 5, 4, 0], [0, 7, 8, 5, 0, 4, 0, 0, 3], [4, 0, 1, 0, 6, 0, 8, 0, 9], [3, 2, 6, 0, 0, 0, 0, 5, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[7, 8, 3, 1, 9, 5, 4, 6, 2], [5, 1, 9, 6, 4, 2, 3, 8, 7], [2, 6, 4, 8, 3, 7, 9, 1, 5], [6, 4, 5, 3, 2, 8, 7, 9, 1], [1, 9, 7, 4, 5, 6, 2, 3, 8], [8, 3, 2, 9, 7, 1, 5, 4, 6], [9, 7, 8, 5, 1, 4, 6, 2, 3], [4, 5, 1, 2, 6, 3, 8, 7, 9], [3, 2, 6, 7, 8, 9, 1, 5, 4]]", "system": "[[0, 0, 0, 0, 9, 5, 4, 0, 2], [0, 0, 9, 0, 0, 0, 0, 8, 7], [0, 6, 4, 0, 0, 0, 0, 0, 5], [6, 0, 5, 0, 0, 0, 7, 0, 1], [0, 9, 7, 0, 0, 0, 0, 0, 0], [0, 3, 2, 0, 7, 1, 5, 4, 0], [0, 7, 8, 5, 0, 4, 0, 0, 3], [4, 0, 1, 0, 6, 0, 8, 0, 9], [3, 2, 6, 0, 0, 0, 0, 5, 0]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001078.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[4, 0, 3, 0, 0, 0, 9, 5, 0], [0, 1, 8, 9, 0, 0, 0, 0, 0], [7, 0, 9, 3, 4, 2, 8, 0, 0], [9, 0, 0, 2, 3, 0, 0, 7, 8], [0, 0, 2, 0, 0, 7, 5, 4, 0], [8, 7, 0, 0, 0, 4, 0, 0, 0], [0, 8, 6, 0, 0, 0, 4, 3, 0], [1, 0, 0, 0, 0, 0, 0, 8, 2], [0, 0, 0, 0, 2, 0, 7, 9, 1]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[4, 2, 3, 8, 6, 1, 9, 5, 7], [6, 1, 8, 9, 7, 5, 3, 2, 4], [7, 5, 9, 3, 4, 2, 8, 1, 6], [9, 4, 5, 2, 3, 6, 1, 7, 8], [3, 6, 2, 1, 8, 7, 5, 4, 9], [8, 7, 1, 5, 9, 4, 2, 6, 3], [2, 8, 6, 7, 1, 9, 4, 3, 5], [1, 9, 7, 4, 5, 3, 6, 8, 2], [5, 3, 4, 6, 2, 8, 7, 9, 1]]", "system": "[[4, 0, 3, 0, 0, 0, 9, 5, 0], [0, 1, 8, 9, 0, 0, 0, 0, 0], [7, 0, 9, 3, 4, 2, 8, 0, 0], [9, 0, 0, 2, 3, 0, 0, 7, 8], [0, 0, 2, 0, 0, 7, 5, 4, 0], [8, 7, 0, 0, 0, 4, 0, 0, 0], [0, 8, 6, 0, 0, 0, 4, 3, 0], [1, 0, 0, 0, 0, 0, 0, 8, 2], [0, 0, 0, 0, 2, 0, 7, 9, 1]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001079.png", "question": "Your task is to solve the 9x9 Sudoku puzzle according to the rules and current state below:\\n\\n### Game Rules:\\n1. Fill the grid so that each row contains the digits 1–9 exactly once\\n2. Each column must contain the digits 1–9 exactly once\\n3. Each 3x3 subgrid (rows 1–3/4–6/7–9 × columns 1–3/4–6/7–9) must contain the digits 1–9 exactly once\\n4. Do not alter any given digits from the puzzle\\n\\n### Coordinate System:\\n- The grid is indexed left-to-right and top-to-bottom\\n- Columns: numbered 1–9 from left to right\\n- Rows: numbered 1–9 from top to bottom\\n\\n### Current Puzzle State:\\n- The puzzle to solve is shown in the grid below:\\n- Given digits in the grid are fixed and cannot be changed\\n- 0 represents empty cells\\n\\n#### Sudoku Grid:\\n[[0, 8, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 2, 0, 3, 0, 1, 0], [3, 2, 9, 0, 0, 1, 4, 7, 0], [0, 5, 3, 0, 1, 6, 0, 2, 9], [0, 0, 0, 9, 0, 0, 0, 0, 0], [2, 0, 7, 0, 0, 8, 0, 6, 4], [5, 3, 0, 0, 8, 0, 0, 0, 0], [9, 7, 6, 3, 0, 5, 0, 0, 1], [0, 1, 0, 7, 6, 0, 0, 0, 0]]\\n\\n### Output Format Requirements:\\n- Output the fully solved grid as 81 integers in row-major order, separated by single spaces\\n- Use only digits 1–9 (no 0, '.', commas, or any other characters)\\n- Output must be exactly one line with 81 numbers (9 rows × 9 columns)\\n- Do not include any explanation, steps, or extra text\\n\\nYour final answer format should look like: \\n\\n[\\n    [5, 7, 1, 4, 8, 2, 6, 3, 9],\\n    [6, 3, 9, 7, 1, 5, 2, 4, 8],\\n    [2, 4, 8, 3, 9, 6, 5, 7, 1],\\n    [3, 9, 5, 1, 2, 7, 4, 8, 6],\\n    [4, 8, 6, 9, 5, 3, 7, 1, 2],\\n    [7, 1, 2, 8, 6, 4, 3, 9, 5],\\n    [8, 6, 3, 5, 7, 9, 1, 2, 4],\\n    [1, 2, 4, 6, 3, 8, 9, 5, 7],\\n    [9, 5, 7, 2, 4, 1, 8, 6, 3]\\n]", "answer": "[[1, 8, 5, 6, 4, 7, 9, 3, 2], [7, 6, 4, 2, 9, 3, 5, 1, 8], [3, 2, 9, 8, 5, 1, 4, 7, 6], [8, 5, 3, 4, 1, 6, 7, 2, 9], [6, 4, 1, 9, 7, 2, 3, 8, 5], [2, 9, 7, 5, 3, 8, 1, 6, 4], [5, 3, 2, 1, 8, 4, 6, 9, 7], [9, 7, 6, 3, 2, 5, 8, 4, 1], [4, 1, 8, 7, 6, 9, 2, 5, 3]]", "system": "[[0, 8, 0, 0, 4, 0, 0, 0, 0], [0, 0, 4, 2, 0, 3, 0, 1, 0], [3, 2, 9, 0, 0, 1, 4, 7, 0], [0, 5, 3, 0, 1, 6, 0, 2, 9], [0, 0, 0, 9, 0, 0, 0, 0, 0], [2, 0, 7, 0, 0, 8, 0, 6, 4], [5, 3, 0, 0, 8, 0, 0, 0, 0], [9, 7, 6, 3, 0, 5, 0, 0, 1], [0, 1, 0, 7, 6, 0, 0, 0, 0]]", "category": "sudoku", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'sudoku_evaluator'}"}}
{"image": "images/001080.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,3), (1,0), (1,1), (1,3), (2,1), (2,2), (2,3), (3,2)", "system": "22..\\n..6.\\n3...\\n13.3", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001081.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,2), (0,3), (1,3), (2,3), (3,2), (3,3)", "system": "1...\\n125.\\n.14.\\n.1..", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001082.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,2), (1,2), (2,1), (2,2), (2,3), (3,0), (3,1), (3,3)", "system": ".2.2\\n14.4\\n3...\\n..5.", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001083.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,3), (1,3), (2,0), (2,1), (2,2), (2,3), (3,1), (3,3)", "system": "..2.\\n235.\\n....\\n3.5.", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001084.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (3,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,3), (1,1), (1,2), (1,3), (2,1), (2,3), (3,1)", "system": "124.\\n2...\\n3.6.\\n2..1", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001085.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 4x4 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (1,0), (1,1), (1,2), (2,2), (3,0), (3,1), (3,2), (3,3)", "system": ".421\\n...2\\n.7.4\\n....", "category": "tapa", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001086.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,1) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,2), (0,4), (1,1), (1,2), (1,3), (1,4), (2,0), (2,1), (2,4), (3,0), (3,3), (3,4), (4,4)", "system": "13.5.\\n3....\\n...6.\\n.3...\\n1113.", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001087.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,4) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,3), (1,0), (1,1), (1,2), (1,3), (1,4), (2,2), (3,0), (3,1), (3,2), (3,3), (3,4), (4,2)", "system": ".44.3\\n.....\\n.7.7.\\n.....\\n24.42", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001088.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,2), (1,0), (1,1), (1,2), (1,3), (1,4), (2,0), (2,3), (3,0), (3,3)", "system": ".5.4.\\n.....\\n.55..\\n.22.2\\n1.11.", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001089.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,2), (0,3), (0,4), (1,1), (2,1), (2,2), (2,3), (3,0), (3,1), (3,3), (4,1), (4,3)", "system": "2....\\n3.7..\\n4...2\\n..7.3\\n3...2", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001090.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,2), (1,2), (1,4), (2,2), (2,3), (2,4), (3,2), (3,4), (4,0), (4,1), (4,2)", "system": "....1\\n25.6.\\n.3...\\n25.6.\\n....1", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001091.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 5x5 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (1,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,3), (0,4), (1,1), (1,3), (2,1), (2,3), (3,0), (3,1), (3,2), (3,3), (3,4), (4,4)", "system": "2....\\n3...4\\n4.7.4\\n.....\\n2334.", "category": "tapa", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001092.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (1,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,3) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,5) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,1) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,5) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,2), (0,4), (0,5), (1,0), (1,1), (1,2), (1,4), (2,2), (2,3), (2,4), (2,5), (3,0), (3,1), (3,2), (3,4), (4,2), (4,4), (5,1), (5,2)", "system": ".5....\\n...7.5\\n.7....\\n...7.4\\n.6...2\\n1...11", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001093.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,5) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,3), (1,0), (1,3), (1,4), (1,5), (2,0), (2,1), (2,3), (2,5), (3,1), (3,3), (3,5), (4,1), (4,3), (4,5), (5,0), (5,1), (5,2), (5,3), (5,5)", "system": "112.42\\n.3....\\n....7.\\n4.....\\n4.7...\\n......", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001094.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (1,0) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (1,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,5) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,3), (0,4), (0,5), (1,1), (1,4), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (3,1), (3,3), (4,0), (4,1), (4,3), (4,4), (5,1)", "system": "......\\n5..6.5\\n......\\n5.7.6.\\n.....1\\n3..221", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001095.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,5), (1,1), (1,2), (1,3), (1,4), (1,5), (2,0), (2,1), (2,3), (3,3), (3,4), (3,5), (4,1), (4,2), (4,3), (4,5), (5,5)", "system": "..434.\\n5.....\\n..6.7.\\n......\\n1...6.\\n1232..", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001096.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (0,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (2,1) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,1) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,2), (0,5), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (2,2), (2,5), (3,1), (3,2), (3,3), (4,1), (4,3), (4,4), (4,5), (5,5)", "system": ".5.44.\\n......\\n.6.6..\\n2.....\\n2.5...\\n11.24.", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001097.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 6x6 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (1,5) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,2), (0,3), (1,1), (1,3), (2,3), (2,5), (3,0), (3,2), (3,3), (3,4), (3,5), (4,0), (4,1), (4,2), (4,5), (5,0)", "system": "....2.\\n3.6..1\\n....6.\\n.5....\\n...44.\\n.4211.", "category": "tapa", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001098.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (5,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,5), (0,6), (1,0), (1,1), (1,4), (1,5), (2,1), (2,4), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (4,6), (5,3), (5,6), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6)", "system": "3.2....\\n...2...\\n5..5...\\n.......\\n23...5.\\n.34.45.\\n.......", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001099.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,0) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,5), (1,0), (1,1), (1,5), (1,6), (2,1), (2,6), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (4,0), (4,6), (5,0), (5,1), (5,2), (5,5), (5,6), (6,0), (6,5)", "system": "3.....3\\n.......\\n5.53...\\n.......\\n.....6.\\n...12..\\n.421..3", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001100.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,6) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,4) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (2,6) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (3,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (6,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,5), (1,1), (1,5), (2,0), (2,1), (2,2), (2,5), (3,2), (3,3), (3,4), (3,5), (3,6), (4,3), (5,0), (5,1), (5,3), (5,4), (5,5), (5,6), (6,1), (6,2), (6,3)", "system": "..2...2\\n..41..3\\n....5.4\\n.4.....\\n.......\\n..6....\\n3...4.2", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001101.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (1,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (1,5) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,5) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,4), (0,6), (1,2), (1,4), (1,6), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (3,1), (3,3), (4,3), (4,4), (4,6), (5,1), (5,4), (5,5), (5,6), (6,1), (6,2), (6,3), (6,4)", "system": ".......\\n24.6.7.\\n.......\\n3.6.6..\\n.....5.\\n2......\\n2....42", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001102.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,6) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (6,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (6,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,6), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (2,1), (2,3), (2,5), (3,1), (3,5), (3,6), (4,1), (4,2), (4,3), (4,5), (5,0), (5,1), (5,3), (5,5), (6,0), (6,5)", "system": "1233...\\n.......\\n..6...5\\n3......\\n4......\\n..5....\\n.3.1..2", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001103.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 7x7 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (1,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (1,3) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (1,5) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (2,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (4,3) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,3) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (6,4) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,2), (0,3), (0,4), (0,5), (0,6), (1,4), (2,1), (2,4), (2,5), (3,1), (3,2), (3,3), (3,4), (4,0), (4,1), (4,4), (4,5), (5,1), (5,5), (5,6), (6,1), (6,2), (6,5)", "system": ".......\\n1..5.6.\\n..4....\\n.......\\n..54..3\\n4......\\n2..12.3", "category": "tapa", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001104.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,5) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (1,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (5,6) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (6,7) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (7,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (7,2) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (7,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,7) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,4), (0,7), (1,1), (1,4), (1,7), (2,1), (2,2), (2,4), (2,5), (2,7), (3,2), (3,4), (3,7), (4,0), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (5,0), (5,3), (5,5), (6,0), (6,1), (6,2), (6,3), (6,5), (6,6), (7,0), (7,3), (7,5)", "system": "..2..2..\\n4.4.....\\n........\\n........\\n........\\n..6.7.6.\\n.......1\\n.44...31", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001105.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (1,2) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (1,6) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (4,7) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (6,5) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (6,7) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (7,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (7,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (7,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (7,7) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (1,0), (1,1), (1,3), (1,5), (1,7), (2,0), (2,3), (2,5), (3,0), (3,2), (3,3), (3,5), (4,2), (4,5), (5,2), (5,4), (5,5), (5,6), (5,7), (6,1), (6,2), (6,4), (6,6)", "system": "........\\n..6...6.\\n........\\n........\\n.......2\\n1.......\\n1....5.3\\n122.1..1", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001106.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (0,6) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,7) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (2,5) has clue '6': exactly 6 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (7,1) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,4) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,5) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,6) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (2,6), (3,0), (3,1), (3,2), (3,3), (3,5), (3,6), (3,7), (4,1), (4,3), (4,4), (4,5), (5,5), (5,7), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (7,7)", "system": "...3..21\\n........\\n.....6..\\n....5...\\n3.......\\n........\\n........\\n233.334.", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001107.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,1) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,7) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,3) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,4) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (3,6) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,3) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (6,6) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (7,2) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n- Cell (7,4) has clue '5': exactly 5 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,2), (0,3), (0,5), (1,2), (1,5), (1,7), (2,2), (2,5), (2,6), (2,7), (3,2), (3,5), (3,7), (4,1), (4,2), (4,3), (4,4), (4,5), (4,7), (5,4), (6,1), (6,2), (6,3), (6,4), (6,5), (7,0), (7,1), (7,3), (7,5), (7,6), (7,7)", "system": ".2.....1\\n........\\n...3....\\n...55.7.\\n1.......\\n...7....\\n3.....4.\\n..5.5...", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001108.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (0,0) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (0,1) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (4,5) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n- Cell (5,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (5,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (5,5) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (6,4) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (7,7) has clue '2': exactly 2 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,2), (0,4), (0,6), (1,0), (1,1), (1,2), (1,4), (1,5), (1,6), (2,0), (2,2), (2,3), (2,4), (2,6), (2,7), (3,7), (4,1), (4,6), (4,7), (5,0), (5,1), (5,6), (6,1), (6,5), (6,6), (6,7), (7,1), (7,2), (7,3), (7,4), (7,5)", "system": "24......\\n........\\n........\\n........\\n3.2..2..\\n..3.14..\\n4..34...\\n.......2", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001109.png", "question": "\\nPlease look at the displayed Tapa puzzle grid. The numbers in the cells are clues indicating the lengths of connected groups of black cells surrounding that clue.\\n\\n### Task\\nYour task is to fill in the grid with black cells according to the following rules.\\n\\n### Game Rules\\n1. **All black cells must form a single connected group**: This means that all the black cells on the grid must be connected in one continuous region, without any isolated black cells.\\n2. **There cannot be any 2x2 block of black cells**: A 2x2 block of black cells is not allowed anywhere on the grid. This means that no four black cells can form a square.\\n3. **Clue cells**: Each number in a clue cell indicates the length of a connected group of black cells surrounding that clue. The \"surrounding\" refers to the 8 neighboring cells that are orthogonally and diagonally adjacent to the clue (i.e., the cells that are directly adjacent horizontally, vertically, or diagonally to the clue). \\n    - For example, a clue \"3\" means that exactly three black cells must be placed among the 8 surrounding cells, and these three black cells must form a single connected group.\\n    - Each clue cell contains only a single number representing one connected group of black cells.\\n4. **Grid size**: The grid is a 8x8 matrix of cells. Each row and column will contain a mix of black (B) and white (W) cells.\\n\\n### Coordinate System\\nThe grid uses a coordinate system where (0,0) is the top-left corner, the first number represents the row (increasing downward), and the second number represents the column (increasing rightward).\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n\\n### Tapa Puzzle Grid:\\n- Cell (1,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (1,2) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (2,3) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (3,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,0) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (4,2) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (4,4) has clue '7': exactly 7 connected black cells in surrounding 8 cells\\n- Cell (5,7) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (6,0) has clue '4': exactly 4 connected black cells in surrounding 8 cells\\n- Cell (6,5) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n- Cell (7,4) has clue '1': exactly 1 connected black cells in surrounding 8 cells\\n- Cell (7,6) has clue '3': exactly 3 connected black cells in surrounding 8 cells\\n\\n### Output Format\\n- List only the coordinates of cells that should be colored black\\n- Use the format (row,column) for each coordinate\\n- Separate multiple coordinates with commas\\n- For example: (0,1), (1,2), (2,0), (2,1)\\n", "answer": "(0,0), (0,1), (0,7), (1,1), (1,7), (2,1), (2,5), (2,7), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (4,1), (4,3), (4,5), (5,1), (5,3), (5,5), (5,6), (6,1), (6,6), (6,7), (7,0), (7,1), (7,2), (7,3), (7,7)", "system": "........\\n4.3.....\\n...3....\\n3.......\\n3.7.7...\\n.......3\\n4....3..\\n....1.3.", "category": "tapa", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'tapa_evaluator'}"}}
{"image": "images/001110.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 3]\\n1: []\\n2: [0, 3]\\n3: []\\n4: [0, 3, 5]\\n5: [1, 2]\\n\\n']", "answer": "[4, 5, 2, 0, 1, 3]", "system": "{'0': [1, 3], '1': [], '2': [0, 3], '3': [], '4': [0, 3, 5], '5': [1, 2]}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001111.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 2, 4, 5]\\n1: [2, 4]\\n2: [5]\\n3: [2]\\n4: []\\n5: []\\n\\n']", "answer": "[0, 1, 3, 2, 4, 5]", "system": "{'0': [1, 2, 4, 5], '1': [2, 4], '2': [5], '3': [2], '4': [], '5': []}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001112.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 4]\\n1: [2]\\n2: [5]\\n3: [0, 5]\\n4: []\\n5: []\\n\\n']", "answer": "[3, 0, 1, 2, 4, 5]", "system": "{'0': [1, 4], '1': [2], '2': [5], '3': [0, 5], '4': [], '5': []}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001113.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 2]\\n1: [2]\\n2: []\\n3: [0]\\n4: [0, 1, 3, 5]\\n5: [1]\\n\\n']", "answer": "[4, 3, 0, 5, 1, 2]", "system": "{'0': [1, 2], '1': [2], '2': [], '3': [0], '4': [0, 1, 3, 5], '5': [1]}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001114.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 2, 4]\\n1: [3, 4, 5]\\n2: [1]\\n3: []\\n4: [3]\\n5: [4]\\n\\n']", "answer": "[0, 2, 1, 5, 4, 3]", "system": "{'0': [1, 2, 4], '1': [3, 4, 5], '2': [1], '3': [], '4': [3], '5': [4]}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001115.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 3]\\n1: [4]\\n2: [0, 1]\\n3: [4]\\n4: [5]\\n5: []\\n\\n']", "answer": "[2, 0, 1, 3, 4, 5]", "system": "{'0': [1, 3], '1': [4], '2': [0, 1], '3': [4], '4': [5], '5': []}", "category": "topological_sort", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001116.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: []\\n1: [3, 4, 7]\\n2: [1, 5]\\n3: [0, 4]\\n4: [5]\\n5: []\\n6: [2, 3, 7]\\n7: [4]\\n8: [5]\\n\\n']", "answer": "[6, 2, 1, 3, 0, 7, 4, 8, 5]", "system": "{'0': [], '1': [3, 4, 7], '2': [1, 5], '3': [0, 4], '4': [5], '5': [], '6': [2, 3, 7], '7': [4], '8': [5]}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001117.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 3, 5, 7]\\n1: [2, 4]\\n2: []\\n3: [4, 6]\\n4: [7]\\n5: [2, 8]\\n6: [4, 7]\\n7: [8]\\n8: []\\n\\n']", "answer": "[0, 1, 3, 5, 2, 6, 4, 7, 8]", "system": "{'0': [1, 3, 5, 7], '1': [2, 4], '2': [], '3': [4, 6], '4': [7], '5': [2, 8], '6': [4, 7], '7': [8], '8': []}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001118.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 3, 4]\\n1: [2, 3, 5]\\n2: [5]\\n3: [6, 8]\\n4: [1, 3, 8]\\n5: [4, 8]\\n6: []\\n7: [6, 8]\\n8: []\\n\\n']", "answer": "[0, 7]", "system": "{'0': [1, 3, 4], '1': [2, 3, 5], '2': [5], '3': [6, 8], '4': [1, 3, 8], '5': [4, 8], '6': [], '7': [6, 8], '8': []}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001119.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [4, 6]\\n1: [4]\\n2: [4, 5, 8]\\n3: [4, 6]\\n4: []\\n5: [4, 7, 8]\\n6: [7]\\n7: [4]\\n8: [0]\\n\\n']", "answer": "[1, 2, 3, 5, 8, 0, 6, 7, 4]", "system": "{'0': [4, 6], '1': [4], '2': [4, 5, 8], '3': [4, 6], '4': [], '5': [4, 7, 8], '6': [7], '7': [4], '8': [0]}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001120.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [3]\\n1: [0, 2, 4, 7]\\n2: [4, 5]\\n3: [4, 6, 8]\\n4: [6, 7]\\n5: []\\n6: []\\n7: [6, 8]\\n8: [5, 6]\\n\\n']", "answer": "[1, 0, 2, 3, 4, 7, 8, 5, 6]", "system": "{'0': [3], '1': [0, 2, 4, 7], '2': [4, 5], '3': [4, 6, 8], '4': [6, 7], '5': [], '6': [], '7': [6, 8], '8': [5, 6]}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001121.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1]\\n1: [2, 3, 4]\\n2: [4]\\n3: [6]\\n4: [3, 6]\\n5: [2, 8]\\n6: []\\n7: [3, 8]\\n8: []\\n\\n']", "answer": "[0, 1, 5, 2, 4, 7, 3, 6, 8]", "system": "{'0': [1], '1': [2, 3, 4], '2': [4], '3': [6], '4': [3, 6], '5': [2, 8], '6': [], '7': [3, 8], '8': []}", "category": "topological_sort", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001122.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 4]\\n1: [2, 6, 10]\\n2: [6]\\n3: [6, 7]\\n4: [5]\\n5: [3, 6]\\n6: [7, 11]\\n7: [11]\\n8: [4]\\n9: [5, 8, 10]\\n10: []\\n11: [10]\\n\\n']", "answer": "[0, 1, 2, 9, 8, 4, 5, 3, 6, 7, 11, 10]", "system": "{'0': [1, 4], '1': [2, 6, 10], '2': [6], '3': [6, 7], '4': [5], '5': [3, 6], '6': [7, 11], '7': [11], '8': [4], '9': [5, 8, 10], '10': [], '11': [10]}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001123.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: []\\n1: [0, 2, 5]\\n2: []\\n3: [6]\\n4: [0, 5, 7, 8]\\n5: [6, 11]\\n6: [2, 7]\\n7: [11]\\n8: [2]\\n9: [5, 10]\\n10: [6]\\n11: []\\n\\n']", "answer": "[1, 3, 4, 0, 8, 9, 5, 10, 6, 2, 7, 11]", "system": "{'0': [], '1': [0, 2, 5], '2': [], '3': [6], '4': [0, 5, 7, 8], '5': [6, 11], '6': [2, 7], '7': [11], '8': [2], '9': [5, 10], '10': [6], '11': []}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001124.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 4, 5]\\n1: [5, 6]\\n2: [3, 5, 6, 7]\\n3: []\\n4: [5]\\n5: [6, 9]\\n6: [7, 10]\\n7: [3, 11]\\n8: [4]\\n9: [8]\\n10: [9]\\n11: [3, 10]\\n\\n']", "answer": "[0, 1, 2]", "system": "{'0': [1, 4, 5], '1': [5, 6], '2': [3, 5, 6, 7], '3': [], '4': [5], '5': [6, 9], '6': [7, 10], '7': [3, 11], '8': [4], '9': [8], '10': [9], '11': [3, 10]}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001125.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [4, 5]\\n1: [0, 2, 11]\\n2: [6, 7, 8]\\n3: [6]\\n4: [5, 8]\\n5: [9]\\n6: [5, 9, 10, 11]\\n7: [3, 4, 6]\\n8: [9]\\n9: [10]\\n10: [11]\\n11: []\\n\\n']", "answer": "[1, 0, 2, 7, 3, 4, 6, 5, 8, 9, 10, 11]", "system": "{'0': [4, 5], '1': [0, 2, 11], '2': [6, 7, 8], '3': [6], '4': [5, 8], '5': [9], '6': [5, 9, 10, 11], '7': [3, 4, 6], '8': [9], '9': [10], '10': [11], '11': []}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001126.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 11]\\n1: [2, 5, 6]\\n2: [3, 6, 7]\\n3: []\\n4: [0]\\n5: [6, 9]\\n6: [7, 10, 11]\\n7: [3, 11]\\n8: [3, 4, 11]\\n9: [8]\\n10: [9]\\n11: []\\n\\n']", "answer": "[]", "system": "{'0': [1, 11], '1': [2, 5, 6], '2': [3, 6, 7], '3': [], '4': [0], '5': [6, 9], '6': [7, 10, 11], '7': [3, 11], '8': [3, 4, 11], '9': [8], '10': [9], '11': []}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001127.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 4]\\n1: [2, 4, 5]\\n2: [6]\\n3: [1, 2, 6, 7, 11]\\n4: [8]\\n5: [8, 9]\\n6: [7, 11]\\n7: []\\n8: [9]\\n9: []\\n10: [9]\\n11: [10]\\n\\n']", "answer": "[0, 3, 1, 2, 4, 5, 6, 7, 8, 11, 10, 9]", "system": "{'0': [1, 4], '1': [2, 4, 5], '2': [6], '3': [1, 2, 6, 7, 11], '4': [8], '5': [8, 9], '6': [7, 11], '7': [], '8': [9], '9': [], '10': [9], '11': [10]}", "category": "topological_sort", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001128.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: []\\n1: [0, 5]\\n2: [1, 5]\\n3: [7]\\n4: [8]\\n5: [4, 6, 8, 9]\\n6: [7, 10]\\n7: [9, 10]\\n8: [12, 13]\\n9: [8]\\n10: [9, 15]\\n11: [15]\\n12: []\\n13: []\\n14: [13]\\n15: [13, 14]\\n\\n']", "answer": "[2, 1, 0, 3, 5, 4, 6, 7, 10, 9, 8, 11, 12, 15, 14, 13]", "system": "{'0': [], '1': [0, 5], '2': [1, 5], '3': [7], '4': [8], '5': [4, 6, 8, 9], '6': [7, 10], '7': [9, 10], '8': [12, 13], '9': [8], '10': [9, 15], '11': [15], '12': [], '13': [], '14': [13], '15': [13, 14]}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001129.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [4, 5]\\n1: [0, 2, 4]\\n2: [3]\\n3: []\\n4: [5, 9]\\n5: [9]\\n6: [1, 7]\\n7: [2]\\n8: [9, 12]\\n9: [14, 15]\\n10: [5, 6, 11, 13, 14]\\n11: [7]\\n12: [13]\\n13: [14]\\n14: []\\n15: [7, 14]\\n\\n']", "answer": "[8, 10, 6, 1, 0, 4, 5, 9, 11, 12, 13, 15, 7, 2, 3, 14]", "system": "{'0': [4, 5], '1': [0, 2, 4], '2': [3], '3': [], '4': [5, 9], '5': [9], '6': [1, 7], '7': [2], '8': [9, 12], '9': [14, 15], '10': [5, 6, 11, 13, 14], '11': [7], '12': [13], '13': [14], '14': [], '15': [7, 14]}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001130.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1]\\n1: [5]\\n2: [1]\\n3: [2, 7, 12]\\n4: [8, 9]\\n5: [4, 8]\\n6: [5, 10, 11]\\n7: [1, 6, 10, 11]\\n8: []\\n9: [5, 8, 10, 13]\\n10: [14, 15]\\n11: []\\n12: [8, 13]\\n13: [14]\\n14: [15]\\n15: []\\n\\n']", "answer": "[0, 3, 2, 7, 1, 6, 11, 12]", "system": "{'0': [1], '1': [5], '2': [1], '3': [2, 7, 12], '4': [8, 9], '5': [4, 8], '6': [5, 10, 11], '7': [1, 6, 10, 11], '8': [], '9': [5, 8, 10, 13], '10': [14, 15], '11': [], '12': [8, 13], '13': [14], '14': [15], '15': []}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001131.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [4, 5]\\n1: [6, 14]\\n2: [1, 5, 6, 7]\\n3: [2]\\n4: [5, 8]\\n5: [9]\\n6: [9]\\n7: [6, 11]\\n8: []\\n9: [13]\\n10: [11]\\n11: [15]\\n12: [4, 8, 13]\\n13: [14]\\n14: [10, 15]\\n15: []\\n\\n']", "answer": "[0, 3, 2, 1, 7, 6, 12, 4, 5, 8, 9, 13, 14, 10, 11, 15]", "system": "{'0': [4, 5], '1': [6, 14], '2': [1, 5, 6, 7], '3': [2], '4': [5, 8], '5': [9], '6': [9], '7': [6, 11], '8': [], '9': [13], '10': [11], '11': [15], '12': [4, 8, 13], '13': [14], '14': [10, 15], '15': []}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001132.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 5]\\n1: [5]\\n2: [5, 6, 7]\\n3: [7]\\n4: [7, 8]\\n5: [4, 6, 9, 10]\\n6: [7, 9]\\n7: []\\n8: [9, 12, 13]\\n9: [12]\\n10: [9, 11, 13, 14, 15]\\n11: [7, 14, 15]\\n12: []\\n13: []\\n14: [15]\\n15: [6]\\n\\n']", "answer": "[0, 1, 2, 3, 5, 4, 8, 10, 11, 13, 14, 15, 6, 7, 9, 12]", "system": "{'0': [1, 5], '1': [5], '2': [5, 6, 7], '3': [7], '4': [7, 8], '5': [4, 6, 9, 10], '6': [7, 9], '7': [], '8': [9, 12, 13], '9': [12], '10': [9, 11, 13, 14, 15], '11': [7, 14, 15], '12': [], '13': [], '14': [15], '15': [6]}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001133.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [4]\\n1: [2, 4, 5]\\n2: [5, 6]\\n3: []\\n4: [5, 8, 9]\\n5: [6, 10, 15]\\n6: [7, 10]\\n7: [3, 11]\\n8: []\\n9: [5, 10, 13]\\n10: [11, 13, 14]\\n11: [14, 15]\\n12: [8]\\n13: []\\n14: []\\n15: [3]\\n\\n']", "answer": "[0, 1, 2, 4, 9, 5, 6, 7, 10, 11, 12, 8, 13, 14, 15, 3]", "system": "{'0': [4], '1': [2, 4, 5], '2': [5, 6], '3': [], '4': [5, 8, 9], '5': [6, 10, 15], '6': [7, 10], '7': [3, 11], '8': [], '9': [5, 10, 13], '10': [11, 13, 14], '11': [14, 15], '12': [8], '13': [], '14': [], '15': [3]}", "category": "topological_sort", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001134.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1]\\n1: [2, 13]\\n2: [3, 8]\\n3: [4, 8, 9]\\n4: []\\n5: [6]\\n6: [0, 1, 7, 11]\\n7: [8, 12]\\n8: [9, 13, 14]\\n9: [4, 13]\\n10: []\\n11: [10, 15]\\n12: [11, 13, 18]\\n13: []\\n14: [9, 13, 18, 19]\\n15: [10]\\n16: [10, 17, 20, 21, 22]\\n17: [11, 12, 18, 22]\\n18: [13, 19, 22, 24]\\n19: []\\n20: []\\n21: [15, 20, 22]\\n22: []\\n23: [4, 17, 22, 24]\\n24: [19]\\n\\n']", "answer": "[5, 6, 0, 1, 2, 3, 7, 8, 14, 9, 16, 21, 20, 23, 4, 17, 12, 11, 15, 10, 18, 13, 22, 24, 19]", "system": "{'0': [1], '1': [2, 13], '2': [3, 8], '3': [4, 8, 9], '4': [], '5': [6], '6': [0, 1, 7, 11], '7': [8, 12], '8': [9, 13, 14], '9': [4, 13], '10': [], '11': [10, 15], '12': [11, 13, 18], '13': [], '14': [9, 13, 18, 19], '15': [10], '16': [10, 17, 20, 21, 22], '17': [11, 12, 18, 22], '18': [13, 19, 22, 24], '19': [], '20': [], '21': [15, 20, 22], '22': [], '23': [4, 17, 22, 24], '24': [19]}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001135.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [5]\\n1: []\\n2: [1, 3, 7, 10]\\n3: [4, 8, 9]\\n4: []\\n5: []\\n6: [0, 5, 7, 10, 11, 12]\\n7: [1, 12, 13]\\n8: [9, 14]\\n9: [4, 14]\\n10: [5, 15]\\n11: []\\n12: []\\n13: [14]\\n14: []\\n15: []\\n16: [14, 17]\\n17: [18, 22]\\n18: [19, 23]\\n19: []\\n20: [21]\\n21: [16, 22]\\n22: [23]\\n23: []\\n24: [19, 23]\\n\\n']", "answer": "[2, 3, 6, 0, 7, 1, 8, 9, 4, 10, 5, 11, 12, 13, 15, 20, 21, 16, 14, 17, 18, 22, 24, 19, 23]", "system": "{'0': [5], '1': [], '2': [1, 3, 7, 10], '3': [4, 8, 9], '4': [], '5': [], '6': [0, 5, 7, 10, 11, 12], '7': [1, 12, 13], '8': [9, 14], '9': [4, 14], '10': [5, 15], '11': [], '12': [], '13': [14], '14': [], '15': [], '16': [14, 17], '17': [18, 22], '18': [19, 23], '19': [], '20': [21], '21': [16, 22], '22': [23], '23': [], '24': [19, 23]}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001136.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 5, 18]\\n1: [6, 7]\\n2: [7, 8]\\n3: [2, 4, 9]\\n4: []\\n5: [6, 10, 11]\\n6: []\\n7: [6, 8, 11, 12]\\n8: [9, 13]\\n9: [4]\\n10: [11]\\n11: [15, 16, 17]\\n12: [13, 17, 18]\\n13: [17, 18]\\n14: [9, 13, 18, 19]\\n15: [16, 20]\\n16: [20]\\n17: [16, 18, 23]\\n18: [19, 22, 23]\\n19: [23]\\n20: []\\n21: [16, 22]\\n22: []\\n23: [22, 24]\\n24: []\\n\\n']", "answer": "[0, 1, 3, 2, 5, 7, 6, 8, 10, 11, 12, 14, 9, 4, 13, 15, 17, 18, 19, 21, 16, 20, 23, 22, 24]", "system": "{'0': [1, 5, 18], '1': [6, 7], '2': [7, 8], '3': [2, 4, 9], '4': [], '5': [6, 10, 11], '6': [], '7': [6, 8, 11, 12], '8': [9, 13], '9': [4], '10': [11], '11': [15, 16, 17], '12': [13, 17, 18], '13': [17, 18], '14': [9, 13, 18, 19], '15': [16, 20], '16': [20], '17': [16, 18, 23], '18': [19, 22, 23], '19': [23], '20': [], '21': [16, 22], '22': [], '23': [22, 24], '24': []}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001137.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\\n1: [5, 7]\\n2: [1, 6]\\n3: [4, 8, 9]\\n4: []\\n5: [10]\\n6: [1, 5, 7, 10, 12]\\n7: [12]\\n8: [9, 12, 14]\\n9: []\\n10: [11]\\n11: []\\n12: [9, 11, 13]\\n13: [14, 18]\\n14: [9]\\n15: []\\n16: [17, 21]\\n17: [11, 12, 18, 19, 22]\\n18: [19, 23]\\n19: [24]\\n20: [21]\\n21: [22]\\n22: [23]\\n23: [24]\\n24: []\\n\\n']", "answer": "[0, 2, 3, 4, 6, 1, 5, 7, 8, 10, 15, 16, 17, 12, 11, 13, 14, 9, 18, 19, 20, 21, 22, 23, 24]", "system": "{'0': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], '1': [5, 7], '2': [1, 6], '3': [4, 8, 9], '4': [], '5': [10], '6': [1, 5, 7, 10, 12], '7': [12], '8': [9, 12, 14], '9': [], '10': [11], '11': [], '12': [9, 11, 13], '13': [14, 18], '14': [9], '15': [], '16': [17, 21], '17': [11, 12, 18, 19, 22], '18': [19, 23], '19': [24], '20': [21], '21': [22], '22': [23], '23': [24], '24': []}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001138.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: []\\n1: [2, 5, 7]\\n2: [3, 15]\\n3: [8]\\n4: [3, 8]\\n5: [0]\\n6: [0, 1, 5, 7]\\n7: [2, 8, 12]\\n8: [9, 12, 14]\\n9: []\\n10: [5, 7, 15]\\n11: [5, 6, 10, 16]\\n12: [13, 17, 18]\\n13: [18]\\n14: [13, 18]\\n15: [20, 21]\\n16: [10]\\n17: [18, 21, 22]\\n18: [23, 24]\\n19: [18]\\n20: []\\n21: []\\n22: []\\n23: [22, 24]\\n24: []\\n\\n']", "answer": "[4, 11, 6, 1, 16, 10, 5, 0, 7, 2, 3, 8, 9, 12, 14, 13, 15, 17, 19, 18, 20, 21, 23, 22, 24]", "system": "{'0': [], '1': [2, 5, 7], '2': [3, 15], '3': [8], '4': [3, 8], '5': [0], '6': [0, 1, 5, 7], '7': [2, 8, 12], '8': [9, 12, 14], '9': [], '10': [5, 7, 15], '11': [5, 6, 10, 16], '12': [13, 17, 18], '13': [18], '14': [13, 18], '15': [20, 21], '16': [10], '17': [18, 21, 22], '18': [23, 24], '19': [18], '20': [], '21': [], '22': [], '23': [22, 24], '24': []}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001139.png", "question": "['Given the following adjacency list of a connected DAG, please list ONE possible valid topological orders. Answer with a lists of numbers, for example: [0, 1, 2, 3].0: [5, 6]\\n1: [2, 6]\\n2: [6, 8]\\n3: [4, 8]\\n4: [8, 9]\\n5: [6, 10]\\n6: [7, 11, 19]\\n7: [8, 12, 13]\\n8: [9, 13, 14]\\n9: []\\n10: []\\n11: [10, 12]\\n12: [18]\\n13: [10, 12, 14, 18]\\n14: [9, 19]\\n15: [10, 16, 20]\\n16: [10, 17, 20, 22]\\n17: [12, 22, 23]\\n18: [23]\\n19: [18]\\n20: []\\n21: [15, 20, 22]\\n22: [23]\\n23: [24]\\n24: []\\n\\n']", "answer": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 13, 14, 9, 19, 21, 15, 16, 10, 17, 12, 18, 20, 22, 23, 24]", "system": "{'0': [5, 6], '1': [2, 6], '2': [6, 8], '3': [4, 8], '4': [8, 9], '5': [6, 10], '6': [7, 11, 19], '7': [8, 12, 13], '8': [9, 13, 14], '9': [], '10': [], '11': [10, 12], '12': [18], '13': [10, 12, 14, 18], '14': [9, 19], '15': [10, 16, 20], '16': [10, 17, 20, 22], '17': [12, 22, 23], '18': [23], '19': [18], '20': [], '21': [15, 20, 22], '22': [23], '23': [24], '24': []}", "category": "topological_sort", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'topological_sort_evaluator'}"}}
{"image": "images/001140.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [], [3, 2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3)", "system": "[[1], [], [3, 2]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001141.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [], [3, 2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3)", "system": "[[1], [], [3, 2]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001142.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [1], [3, 2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3)", "system": "[[], [1], [3, 2]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001143.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[2], [1], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,3) (1,3)", "system": "[[2], [1], [3]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001144.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [2], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,3) (1,3)", "system": "[[1], [2], [3]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001145.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [], [3, 2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3)", "system": "[[1], [], [3, 2]]", "category": "hanoi", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001146.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [2, 1], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,1) (2,3) (1,3)", "system": "[[], [2, 1], [3]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001147.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[2, 1], [], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (2,3) (1,3)", "system": "[[2, 1], [], [3]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001148.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[2, 1], [], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (2,3) (1,3)", "system": "[[2, 1], [], [3]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001149.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [2, 1], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,1) (2,3) (1,3)", "system": "[[], [2, 1], [3]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001150.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [2, 1], [3]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,1) (2,3) (1,3)", "system": "[[], [2, 1], [3]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001151.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[2], [], [3, 1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (2,3) (1,3)", "system": "[[2], [], [3, 1]]", "category": "hanoi", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001152.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3], [2, 1], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(3,3) (1,1) (2,3) (1,3)", "system": "[[3], [2, 1], []]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001153.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3], [2, 1], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(3,3) (1,1) (2,3) (1,3)", "system": "[[3], [2, 1], []]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001154.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3], [2], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3], [2], [1]]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001155.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[2], [3, 1], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[2], [3, 1], []]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001156.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3], [2], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3], [2], [1]]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001157.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 1], [2], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 1], [2], []]", "category": "hanoi", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001158.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 2], [], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 2], [], [1]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001159.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 1], [], [2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 1], [], [2]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001160.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 2], [], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 2], [], [1]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001161.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 1], [], [2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 1], [], [2]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001162.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [3, 2], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[], [3, 2], [1]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001163.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [3, 2], [1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[], [3, 2], [1]]", "category": "hanoi", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001164.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3, 2], [1], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3) (2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3, 2], [1], []]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001165.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [3], [2]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[1], [3], [2]]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001166.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[1], [3, 2], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3) (2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[1], [3, 2], []]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001167.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [3, 2, 1], []]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,3) (2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[], [3, 2, 1], []]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001168.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[3], [], [2, 1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,1) (2,2) (1,2) (3,3) (1,1) (2,3) (1,3)", "system": "[[3], [], [2, 1]]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001169.png", "question": "\\nYour task is to solve the hanoi game according to the rules and current state below:\\n\\n### Game Rules:\\n1. The Tower of Hanoi consists of three pegs (numbered 1, 2, and 3) and n(maybe 3) disks of different sizes (from 1 to n)\\n2. Disks are stacked on pegs with larger disks always below smaller ones\\n3. Only one disk can be moved at a time, from the top of one peg to the top of another\\n4. A larger disk cannot be placed on top of a smaller disk\\n\\n### Current Hanoi State:\\nThe current state of the Tower of Hanoi is represented as follows:\\n[[], [3], [2, 1]]\\n\\n### Goal State:\\n#### For 3 disks\\n\\n[\\n   [],\\n   [],\\n   [3, 2, 1],\\n]\\n\\n####\\n\\nIn text representation:\\n- Each array [] represents a peg (from 1 to 3)\\n- Numbers inside the arrays represent disks (higher numbers = larger disks)\\n- The first/top elements in an array are at the bottom of the peg\\n- The last/bottom elements in an array are at the top of the peg\\n\\n### Output Format Requirements:\\nYour final solution format should be given like:(x,y) (x,y) (x,y)..., where x is the disk number and y is the destination peg number\\n", "answer": "(1,2) (2,1) (1,1) (3,3) (1,2) (2,3) (1,3)", "system": "[[], [3], [2, 1]]", "category": "hanoi", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'hanoi_evaluator'}"}}
{"image": "images/001170.png", "question": "Here is a bunch of bars [16, 5, 2, 20, 10, 18, 16, 1, 17] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "50", "system": "{'height': [16, 5, 2, 20, 10, 18, 16, 1, 17]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001171.png", "question": "Here is a bunch of bars [4, 19, 16, 18, 2, 1, 16, 1] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "31", "system": "{'height': [4, 19, 16, 18, 2, 1, 16, 1]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001172.png", "question": "Here is a bunch of bars [18, 15, 10, 14, 10, 5, 17, 15, 3, 19] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "55", "system": "{'height': [18, 15, 10, 14, 10, 5, 17, 15, 3, 19]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001173.png", "question": "Here is a bunch of bars [11, 5, 9, 7, 2, 5, 19, 19, 5, 1] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "27", "system": "{'height': [11, 5, 9, 7, 2, 5, 19, 19, 5, 1]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001174.png", "question": "Here is a bunch of bars [18, 15, 17, 19, 17, 5, 10, 1, 4] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "12", "system": "{'height': [18, 15, 17, 19, 17, 5, 10, 1, 4]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001175.png", "question": "Here is a bunch of bars [8, 4, 20, 8, 12, 19] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "22", "system": "{'height': [8, 4, 20, 8, 12, 19]}", "category": "trapping_rain_water", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001176.png", "question": "Here is a bunch of bars [40, 4, 20, 9, 31, 11, 10, 30, 21, 20, 32, 8, 22, 13, 8, 9, 12, 22, 29, 5] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "241", "system": "{'height': [40, 4, 20, 9, 31, 11, 10, 30, 21, 20, 32, 8, 22, 13, 8, 9, 12, 22, 29, 5]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001177.png", "question": "Here is a bunch of bars [40, 14, 16, 38, 21, 5, 8, 32, 5, 37, 33, 7, 7, 14] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "174", "system": "{'height': [40, 14, 16, 38, 21, 5, 8, 32, 5, 37, 33, 7, 7, 14]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001178.png", "question": "Here is a bunch of bars [18, 2, 39, 34, 37, 28, 26, 2, 7, 36, 38, 40, 35] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "120", "system": "{'height': [18, 2, 39, 34, 37, 28, 26, 2, 7, 36, 38, 40, 35]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001179.png", "question": "Here is a bunch of bars [17, 34, 37, 28, 29, 15, 10, 12, 3, 19, 27, 1, 28, 2, 2] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "110", "system": "{'height': [17, 34, 37, 28, 29, 15, 10, 12, 3, 19, 27, 1, 28, 2, 2]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001180.png", "question": "Here is a bunch of bars [38, 37, 35, 23, 36, 28, 21, 20, 3, 22, 27, 24, 6, 9, 11, 40] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "230", "system": "{'height': [38, 37, 35, 23, 36, 28, 21, 20, 3, 22, 27, 24, 6, 9, 11, 40]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001181.png", "question": "Here is a bunch of bars [8, 3, 36, 23, 33, 5, 16, 22, 16, 34, 24, 33, 21, 38, 27, 14] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "138", "system": "{'height': [8, 3, 36, 23, 33, 5, 16, 22, 16, 34, 24, 33, 21, 38, 27, 14]}", "category": "trapping_rain_water", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001182.png", "question": "Here is a bunch of bars [30, 54, 33, 25, 23, 9, 52, 12, 56, 55, 21, 41, 32, 22, 15, 21, 27, 36, 13, 52, 35, 26, 54, 54, 55] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "491", "system": "{'height': [30, 54, 33, 25, 23, 9, 52, 12, 56, 55, 21, 41, 32, 22, 15, 21, 27, 36, 13, 52, 35, 26, 54, 54, 55]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001183.png", "question": "Here is a bunch of bars [18, 22, 18, 48, 17, 37, 9, 46, 18, 11, 22, 40, 53, 6, 10, 55, 51, 46, 40, 19, 52, 57, 31, 14, 10, 30, 43, 58, 27] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "502", "system": "{'height': [18, 22, 18, 48, 17, 37, 9, 46, 18, 11, 22, 40, 53, 6, 10, 55, 51, 46, 40, 19, 52, 57, 31, 14, 10, 30, 43, 58, 27]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001184.png", "question": "Here is a bunch of bars [47, 41, 25, 5, 38, 57, 33, 41, 40, 22, 32, 6, 29, 29, 6, 25, 17, 1, 44, 12, 39, 22, 11, 58, 30, 51, 26, 33, 38] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "677", "system": "{'height': [47, 41, 25, 5, 38, 57, 33, 41, 40, 22, 32, 6, 29, 29, 6, 25, 17, 1, 44, 12, 39, 22, 11, 58, 30, 51, 26, 33, 38]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001185.png", "question": "Here is a bunch of bars [6, 44, 6, 43, 6, 45, 23, 20, 19, 51, 3, 35, 24, 2, 4, 28, 56, 4, 5, 33, 55, 34, 50, 28, 19, 30, 3, 39, 29, 22] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "575", "system": "{'height': [6, 44, 6, 43, 6, 45, 23, 20, 19, 51, 3, 35, 24, 2, 4, 28, 56, 4, 5, 33, 55, 34, 50, 28, 19, 30, 3, 39, 29, 22]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001186.png", "question": "Here is a bunch of bars [44, 50, 48, 7, 13, 56, 11, 13, 31, 46, 16, 14, 53, 12, 34, 28, 33, 57, 19, 8, 56, 57, 20, 13, 13, 53] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "608", "system": "{'height': [44, 50, 48, 7, 13, 56, 11, 13, 31, 46, 16, 14, 53, 12, 34, 28, 33, 57, 19, 8, 56, 57, 20, 13, 13, 53]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001187.png", "question": "Here is a bunch of bars [44, 10, 54, 26, 9, 53, 9, 58, 33, 3, 51, 12, 34, 6, 31, 50, 48, 18, 41, 7, 45, 46, 3] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "409", "system": "{'height': [44, 10, 54, 26, 9, 53, 9, 58, 33, 3, 51, 12, 34, 6, 31, 50, 48, 18, 41, 7, 45, 46, 3]}", "category": "trapping_rain_water", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001188.png", "question": "Here is a bunch of bars [60, 55, 31, 8, 34, 37, 62, 36, 55, 65, 75, 62, 65, 2, 31, 2, 29, 41, 59, 5, 27, 69, 57, 30, 55, 80, 2, 45, 70, 13, 2, 74, 63, 46, 79, 59, 49, 22, 53, 74] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1114", "system": "{'height': [60, 55, 31, 8, 34, 37, 62, 36, 55, 65, 75, 62, 65, 2, 31, 2, 29, 41, 59, 5, 27, 69, 57, 30, 55, 80, 2, 45, 70, 13, 2, 74, 63, 46, 79, 59, 49, 22, 53, 74]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001189.png", "question": "Here is a bunch of bars [3, 12, 59, 69, 7, 68, 69, 73, 77, 30, 51, 16, 42, 66, 75, 76, 34, 17, 4, 34, 13, 15, 34, 10, 2, 69, 43, 61, 29, 39, 15, 16, 39, 30, 10, 3, 74] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1202", "system": "{'height': [3, 12, 59, 69, 7, 68, 69, 73, 77, 30, 51, 16, 42, 66, 75, 76, 34, 17, 4, 34, 13, 15, 34, 10, 2, 69, 43, 61, 29, 39, 15, 16, 39, 30, 10, 3, 74]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001190.png", "question": "Here is a bunch of bars [56, 76, 69, 26, 53, 19, 48, 77, 57, 31, 64, 32, 37, 55, 7, 50, 77, 13, 15, 2, 31, 74, 59, 53, 8, 9, 9, 11, 61, 43, 9, 54, 28, 2, 77, 46, 14, 58, 24, 40] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1348", "system": "{'height': [56, 76, 69, 26, 53, 19, 48, 77, 57, 31, 64, 32, 37, 55, 7, 50, 77, 13, 15, 2, 31, 74, 59, 53, 8, 9, 9, 11, 61, 43, 9, 54, 28, 2, 77, 46, 14, 58, 24, 40]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001191.png", "question": "Here is a bunch of bars [47, 4, 68, 6, 65, 75, 44, 4, 78, 58, 32, 66, 10, 60, 25, 26, 64, 36, 32, 41, 8, 50, 28, 26, 80, 11, 4, 4, 24, 52, 18, 80, 65, 60] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1185", "system": "{'height': [47, 4, 68, 6, 65, 75, 44, 4, 78, 58, 32, 66, 10, 60, 25, 26, 64, 36, 32, 41, 8, 50, 28, 26, 80, 11, 4, 4, 24, 52, 18, 80, 65, 60]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001192.png", "question": "Here is a bunch of bars [10, 73, 44, 52, 67, 9, 51, 74, 9, 25, 7, 33, 65, 33, 19, 17, 1, 46, 29, 31, 22, 5, 56, 58, 8, 71, 67, 72, 57, 11, 14, 30, 40, 19, 80, 8, 75] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1288", "system": "{'height': [10, 73, 44, 52, 67, 9, 51, 74, 9, 25, 7, 33, 65, 33, 19, 17, 1, 46, 29, 31, 22, 5, 56, 58, 8, 71, 67, 72, 57, 11, 14, 30, 40, 19, 80, 8, 75]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001193.png", "question": "Here is a bunch of bars [31, 38, 27, 24, 23, 2, 71, 27, 77, 74, 78, 53, 27, 57, 35, 18, 11, 63, 20, 40, 48, 59, 33, 58, 47, 79, 71, 8, 80, 70, 38, 52, 60, 67, 5, 1, 25] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "820", "system": "{'height': [31, 38, 27, 24, 23, 2, 71, 27, 77, 74, 78, 53, 27, 57, 35, 18, 11, 63, 20, 40, 48, 59, 33, 58, 47, 79, 71, 8, 80, 70, 38, 52, 60, 67, 5, 1, 25]}", "category": "trapping_rain_water", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001194.png", "question": "Here is a bunch of bars [95, 38, 99, 28, 42, 65, 48, 65, 86, 33, 57, 12, 15, 97, 91, 3, 88, 27, 26, 45, 3, 51, 69, 16, 53, 42, 62, 27, 12, 76, 63, 70, 12, 93, 59, 30, 47, 76, 26, 46, 31, 79, 67, 41, 71, 55, 86, 7, 94, 21, 64] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "2165", "system": "{'height': [95, 38, 99, 28, 42, 65, 48, 65, 86, 33, 57, 12, 15, 97, 91, 3, 88, 27, 26, 45, 3, 51, 69, 16, 53, 42, 62, 27, 12, 76, 63, 70, 12, 93, 59, 30, 47, 76, 26, 46, 31, 79, 67, 41, 71, 55, 86, 7, 94, 21, 64]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001195.png", "question": "Here is a bunch of bars [23, 7, 78, 64, 80, 35, 48, 3, 6, 31, 93, 94, 2, 61, 44, 5, 21, 56, 98, 21, 96, 52, 94, 48, 71, 56, 66, 18, 16, 8, 56, 74, 80, 24, 3, 67, 38, 45, 57, 67, 48, 27, 20, 49, 15, 54, 51, 81, 11, 15, 15, 83, 73, 13, 60, 46, 46, 99, 58, 46, 92, 72, 92, 79] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "2742", "system": "{'height': [23, 7, 78, 64, 80, 35, 48, 3, 6, 31, 93, 94, 2, 61, 44, 5, 21, 56, 98, 21, 96, 52, 94, 48, 71, 56, 66, 18, 16, 8, 56, 74, 80, 24, 3, 67, 38, 45, 57, 67, 48, 27, 20, 49, 15, 54, 51, 81, 11, 15, 15, 83, 73, 13, 60, 46, 46, 99, 58, 46, 92, 72, 92, 79]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001196.png", "question": "Here is a bunch of bars [63, 49, 50, 64, 100, 81, 26, 10, 10, 7, 83, 34, 36, 4, 29, 16, 6, 16, 50, 64, 89, 87, 62, 76, 22, 52, 99, 68, 96, 49, 96, 66, 86, 13, 27, 42, 3, 28, 33, 22, 19, 39, 99, 79, 77, 16, 13, 38, 27, 52] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "2158", "system": "{'height': [63, 49, 50, 64, 100, 81, 26, 10, 10, 7, 83, 34, 36, 4, 29, 16, 6, 16, 50, 64, 89, 87, 62, 76, 22, 52, 99, 68, 96, 49, 96, 66, 86, 13, 27, 42, 3, 28, 33, 22, 19, 39, 99, 79, 77, 16, 13, 38, 27, 52]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001197.png", "question": "Here is a bunch of bars [60, 16, 66, 85, 82, 73, 86, 2, 29, 95, 96, 59, 8, 90, 75, 73, 15, 3, 31, 85, 44, 63, 15, 35, 36, 37, 27, 42, 99, 38, 75, 81, 48, 32, 54, 19, 54, 22, 71, 52, 56, 14, 76, 84, 71, 14, 42, 32, 93, 1, 80, 95, 72, 39, 42] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "2078", "system": "{'height': [60, 16, 66, 85, 82, 73, 86, 2, 29, 95, 96, 59, 8, 90, 75, 73, 15, 3, 31, 85, 44, 63, 15, 35, 36, 37, 27, 42, 99, 38, 75, 81, 48, 32, 54, 19, 54, 22, 71, 52, 56, 14, 76, 84, 71, 14, 42, 32, 93, 1, 80, 95, 72, 39, 42]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001198.png", "question": "Here is a bunch of bars [83, 33, 60, 4, 53, 34, 14, 62, 45, 40, 16, 37, 68, 84, 77, 20, 39, 81, 84, 22, 15, 97, 83, 17, 57, 100, 27, 61, 99, 47, 92, 53, 20, 38, 12, 60, 3, 100, 62, 9, 31, 35, 29, 98, 65, 71, 66, 35, 63, 23, 48, 81, 84, 58, 39, 47, 45, 51, 42, 21, 77, 18, 88] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "2476", "system": "{'height': [83, 33, 60, 4, 53, 34, 14, 62, 45, 40, 16, 37, 68, 84, 77, 20, 39, 81, 84, 22, 15, 97, 83, 17, 57, 100, 27, 61, 99, 47, 92, 53, 20, 38, 12, 60, 3, 100, 62, 9, 31, 35, 29, 98, 65, 71, 66, 35, 63, 23, 48, 81, 84, 58, 39, 47, 45, 51, 42, 21, 77, 18, 88]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001199.png", "question": "Here is a bunch of bars [60, 88, 35, 52, 32, 89, 74, 76, 1, 55, 13, 9, 64, 45, 92, 4, 78, 17, 64, 96, 81, 26, 33, 11, 4, 29, 99, 56, 19, 6, 50, 92, 86, 33, 88, 63, 82, 36, 92, 81, 72, 5, 54, 40, 33] lined up side by side, where the width of each bar is 1 and consecutive bars are adjacent with no gaps between them. Compute how much water it can trap after raining.", "answer": "1567", "system": "{'height': [60, 88, 35, 52, 32, 89, 74, 76, 1, 55, 13, 9, 64, 45, 92, 4, 78, 17, 64, 96, 81, 26, 33, 11, 4, 29, 99, 56, 19, 6, 50, 92, 86, 33, 88, 63, 82, 36, 92, 81, 72, 5, 54, 40, 33]}", "category": "trapping_rain_water", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001200.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: til.\\nTarget word: eat.\\nPlease provide the complete solution path from 'til' to 'eat' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "til -> tit -> tat -> eat", "system": "{'solution': ['til', 'tit', 'tat', 'eat'], 'start_word': 'til', 'target_word': 'eat'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001201.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: tip.\\nTarget word: zad.\\nPlease provide the complete solution path from 'tip' to 'zad' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "tip -> tap -> tad -> zad", "system": "{'solution': ['tip', 'tap', 'tad', 'zad'], 'start_word': 'tip', 'target_word': 'zad'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001202.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: Art.\\nTarget word: Ada.\\nPlease provide the complete solution path from 'Art' to 'Ada' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "Art -> ort -> ora -> oda -> Ada", "system": "{'solution': ['Art', 'ort', 'ora', 'oda', 'Ada'], 'start_word': 'Art', 'target_word': 'Ada'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001203.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: geo.\\nTarget word: box.\\nPlease provide the complete solution path from 'geo' to 'box' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "geo -> goo -> boo -> box", "system": "{'solution': ['geo', 'goo', 'boo', 'box'], 'start_word': 'geo', 'target_word': 'box'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001204.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: tow.\\nTarget word: rib.\\nPlease provide the complete solution path from 'tow' to 'rib' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "tow -> row -> rob -> rib", "system": "{'solution': ['tow', 'row', 'rob', 'rib'], 'start_word': 'tow', 'target_word': 'rib'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001205.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 3 to 5 steps.\\nStarting word: tow.\\nTarget word: lad.\\nPlease provide the complete solution path from 'tow' to 'lad' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "tow -> taw -> tad -> lad", "system": "{'solution': ['tow', 'taw', 'tad', 'lad'], 'start_word': 'tow', 'target_word': 'lad'}", "category": "WordLadder", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001206.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: span.\\nTarget word: dive.\\nPlease provide the complete solution path from 'span' to 'dive' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "span -> spak -> siak -> sick -> sice -> dice -> dive", "system": "{'solution': ['span', 'spak', 'siak', 'sick', 'sice', 'dice', 'dive'], 'start_word': 'span', 'target_word': 'dive'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001207.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: Maud.\\nTarget word: Shel.\\nPlease provide the complete solution path from 'Maud' to 'Shel' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "Maud -> Maun -> taun -> taen -> then -> Shen -> Shel", "system": "{'solution': ['Maud', 'Maun', 'taun', 'taen', 'then', 'Shen', 'Shel'], 'start_word': 'Maud', 'target_word': 'Shel'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001208.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: sate.\\nTarget word: smug.\\nPlease provide the complete solution path from 'sate' to 'smug' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "sate -> sale -> salt -> saut -> smut -> smug", "system": "{'solution': ['sate', 'sale', 'salt', 'saut', 'smut', 'smug'], 'start_word': 'sate', 'target_word': 'smug'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001209.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: ling.\\nTarget word: quis.\\nPlease provide the complete solution path from 'ling' to 'quis' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "ling -> lint -> dint -> dunt -> duit -> quit -> quis", "system": "{'solution': ['ling', 'lint', 'dint', 'dunt', 'duit', 'quit', 'quis'], 'start_word': 'ling', 'target_word': 'quis'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001210.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: nope.\\nTarget word: vice.\\nPlease provide the complete solution path from 'nope' to 'vice' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "nope -> none -> nine -> nice -> vice", "system": "{'solution': ['nope', 'none', 'nine', 'nice', 'vice'], 'start_word': 'nope', 'target_word': 'vice'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001211.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 4 to 6 steps.\\nStarting word: Maud.\\nTarget word: hump.\\nPlease provide the complete solution path from 'Maud' to 'hump' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "Maud -> gaud -> gaup -> gamp -> gump -> hump", "system": "{'solution': ['Maud', 'gaud', 'gaup', 'gamp', 'gump', 'hump'], 'start_word': 'Maud', 'target_word': 'hump'}", "category": "WordLadder", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001212.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: Neri.\\nTarget word: hill.\\nPlease provide the complete solution path from 'Neri' to 'hill' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "Neri -> veri -> vari -> vali -> vall -> hall -> hill", "system": "{'solution': ['Neri', 'veri', 'vari', 'vali', 'vall', 'hall', 'hill'], 'start_word': 'Neri', 'target_word': 'hill'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001213.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: lood.\\nTarget word: skep.\\nPlease provide the complete solution path from 'lood' to 'skep' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "lood -> food -> feod -> feed -> seed -> seep -> skep", "system": "{'solution': ['lood', 'food', 'feod', 'feed', 'seed', 'seep', 'skep'], 'start_word': 'lood', 'target_word': 'skep'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001214.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: awny.\\nTarget word: whir.\\nPlease provide the complete solution path from 'awny' to 'whir' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "awny -> away -> tway -> twat -> that -> what -> whit -> whir", "system": "{'solution': ['awny', 'away', 'tway', 'twat', 'that', 'what', 'whit', 'whir'], 'start_word': 'awny', 'target_word': 'whir'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001215.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: sots.\\nTarget word: Ruta.\\nPlease provide the complete solution path from 'sots' to 'Ruta' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "sots -> soss -> Ross -> Rosa -> Rusa -> Ruta", "system": "{'solution': ['sots', 'soss', 'Ross', 'Rosa', 'Rusa', 'Ruta'], 'start_word': 'sots', 'target_word': 'Ruta'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001216.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: half.\\nTarget word: pian.\\nPlease provide the complete solution path from 'half' to 'pian' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "half -> hall -> pall -> paal -> pial -> pian", "system": "{'solution': ['half', 'hall', 'pall', 'paal', 'pial', 'pian'], 'start_word': 'half', 'target_word': 'pian'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001217.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 5 to 7 steps.\\nStarting word: pixy.\\nTarget word: semi.\\nPlease provide the complete solution path from 'pixy' to 'semi' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "pixy -> piky -> pike -> sike -> sime -> seme -> semi", "system": "{'solution': ['pixy', 'piky', 'pike', 'sike', 'sime', 'seme', 'semi'], 'start_word': 'pixy', 'target_word': 'semi'}", "category": "WordLadder", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001218.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: whill.\\nTarget word: plaza.\\nPlease provide the complete solution path from 'whill' to 'plaza' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "whill -> while -> whale -> whase -> phase -> phage -> plage -> plaga -> plaza", "system": "{'solution': ['whill', 'while', 'whale', 'whase', 'phase', 'phage', 'plage', 'plaga', 'plaza'], 'start_word': 'whill', 'target_word': 'plaza'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001219.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: lanky.\\nTarget word: reasy.\\nPlease provide the complete solution path from 'lanky' to 'reasy' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "lanky -> larky -> parky -> perky -> peaky -> peasy -> reasy", "system": "{'solution': ['lanky', 'larky', 'parky', 'perky', 'peaky', 'peasy', 'reasy'], 'start_word': 'lanky', 'target_word': 'reasy'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001220.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: coppy.\\nTarget word: elate.\\nPlease provide the complete solution path from 'coppy' to 'elate' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "coppy -> soppy -> soapy -> soaky -> slaky -> slaty -> slate -> elate", "system": "{'solution': ['coppy', 'soppy', 'soapy', 'soaky', 'slaky', 'slaty', 'slate', 'elate'], 'start_word': 'coppy', 'target_word': 'elate'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001221.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: matra.\\nTarget word: terse.\\nPlease provide the complete solution path from 'matra' to 'terse' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "matra -> matta -> batta -> basta -> baste -> taste -> tasse -> tarse -> terse", "system": "{'solution': ['matra', 'matta', 'batta', 'basta', 'baste', 'taste', 'tasse', 'tarse', 'terse'], 'start_word': 'matra', 'target_word': 'terse'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001222.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: maple.\\nTarget word: spacy.\\nPlease provide the complete solution path from 'maple' to 'spacy' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "maple -> saple -> sable -> sably -> saily -> sairy -> spiry -> spicy -> spacy", "system": "{'solution': ['maple', 'saple', 'sable', 'sably', 'saily', 'sairy', 'spiry', 'spicy', 'spacy'], 'start_word': 'maple', 'target_word': 'spacy'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001223.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 6 to 8 steps.\\nStarting word: savoy.\\nTarget word: pithy.\\nPlease provide the complete solution path from 'savoy' to 'pithy' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "savoy -> savvy -> salvy -> sally -> pally -> patly -> pathy -> pithy", "system": "{'solution': ['savoy', 'savvy', 'salvy', 'sally', 'pally', 'patly', 'pathy', 'pithy'], 'start_word': 'savoy', 'target_word': 'pithy'}", "category": "WordLadder", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001224.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: sprat.\\nTarget word: pensy.\\nPlease provide the complete solution path from 'sprat' to 'pensy' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "sprat -> spray -> splay -> salay -> palay -> palsy -> pansy -> pensy", "system": "{'solution': ['sprat', 'spray', 'splay', 'salay', 'palay', 'palsy', 'pansy', 'pensy'], 'start_word': 'sprat', 'target_word': 'pensy'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001225.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: traps.\\nTarget word: twalt.\\nPlease provide the complete solution path from 'traps' to 'twalt' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "traps -> trass -> tress -> trest -> trist -> twist -> twilt -> twalt", "system": "{'solution': ['traps', 'trass', 'tress', 'trest', 'trist', 'twist', 'twilt', 'twalt'], 'start_word': 'traps', 'target_word': 'twalt'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001226.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: cabot.\\nTarget word: elvet.\\nPlease provide the complete solution path from 'cabot' to 'elvet' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "cabot -> cabob -> carob -> carol -> parol -> parel -> parer -> paver -> eaver -> elver -> elvet", "system": "{'solution': ['cabot', 'cabob', 'carob', 'carol', 'parol', 'parel', 'parer', 'paver', 'eaver', 'elver', 'elvet'], 'start_word': 'cabot', 'target_word': 'elvet'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001227.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: areng.\\nTarget word: bulgy.\\nPlease provide the complete solution path from 'areng' to 'bulgy' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "areng -> arent -> brent -> brant -> beant -> beany -> benny -> bunny -> bungy -> bulgy", "system": "{'solution': ['areng', 'arent', 'brent', 'brant', 'beant', 'beany', 'benny', 'bunny', 'bungy', 'bulgy'], 'start_word': 'areng', 'target_word': 'bulgy'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001228.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: binal.\\nTarget word: Tanya.\\nPlease provide the complete solution path from 'binal' to 'Tanya' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "binal -> banal -> banat -> kanat -> kanae -> kande -> bande -> banda -> banya -> Tanya", "system": "{'solution': ['binal', 'banal', 'banat', 'kanat', 'kanae', 'kande', 'bande', 'banda', 'banya', 'Tanya'], 'start_word': 'binal', 'target_word': 'Tanya'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001229.png", "question": "This is a Word Ladder puzzle. Transform the left word into right word by changing one letter at a time, ensuring that each step forms a valid word. The rules are as follows\\n1. Change exactly one letter to another (do not add/delete) at a time.\\n2. Each step must form a valid English word.\\n3. Find a solution path with 7 to 10 steps.\\nStarting word: mobby.\\nTarget word: breme.\\nPlease provide the complete solution path from 'mobby' to 'breme' as a list of strings.\\nExample answer format: [\"hug\", \"bug\", \"beg\", \"bet\", \"set\"].", "answer": "mobby -> bobby -> booby -> boosy -> brosy -> brose -> brome -> breme", "system": "{'solution': ['mobby', 'bobby', 'booby', 'boosy', 'brosy', 'brose', 'brome', 'breme'], 'start_word': 'mobby', 'target_word': 'breme'}", "category": "WordLadder", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordladder_evaluator'}"}}
{"image": "images/001230.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['N', 'N', 'O', 'W'], ['H', 'Q', 'X', 'V'], ['W', 'O', 'L', 'F'], ['D', 'L', 'L', 'K']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "WOLF E @ (1,3)", "system": "[['N', 'N', 'O', 'W'], ['H', 'Q', 'X', 'V'], ['W', 'O', 'L', 'F'], ['D', 'L', 'L', 'K']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001231.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['N', 'V', 'E', 'N'], ['G', 'P', 'Y', 'F'], ['W', 'X', 'Z', 'O'], ['P', 'V', 'S', 'X']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "FOX S @ (4,2)", "system": "[['N', 'V', 'E', 'N'], ['G', 'P', 'Y', 'F'], ['W', 'X', 'Z', 'O'], ['P', 'V', 'S', 'X']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001232.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['U', 'W', 'N', 'K'], ['Z', 'C', 'C', 'H'], ['Y', 'U', 'X', 'B'], ['D', 'X', 'J', 'T']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "DUCK NE @ (1,4)", "system": "[['U', 'W', 'N', 'K'], ['Z', 'C', 'C', 'H'], ['Y', 'U', 'X', 'B'], ['D', 'X', 'J', 'T']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001233.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['V', 'H', 'H', 'E'], ['B', 'D', 'U', 'Y'], ['E', 'Q', 'S', 'V'], ['E', 'M', 'C', 'W']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "BEE S @ (1,2)", "system": "[['V', 'H', 'H', 'E'], ['B', 'D', 'U', 'Y'], ['E', 'Q', 'S', 'V'], ['E', 'M', 'C', 'W']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001234.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['P', 'W', 'L', 'P'], ['Q', 'D', 'B', 'M'], ['A', 'O', 'A', 'M'], ['V', 'G', 'X', 'G']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "DOG S @ (2,2)", "system": "[['P', 'W', 'L', 'P'], ['Q', 'D', 'B', 'M'], ['A', 'O', 'A', 'M'], ['V', 'G', 'X', 'G']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001235.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 4x4 grid.\\n[['W', 'C', 'H', 'W'], ['S', 'S', 'A', 'D'], ['E', 'J', 'A', 'T'], ['S', 'C', 'F', 'X']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "CAT SE @ (2,1)", "system": "[['W', 'C', 'H', 'W'], ['S', 'S', 'A', 'D'], ['E', 'J', 'A', 'T'], ['S', 'C', 'F', 'X']]", "category": "wordsearch", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001236.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['S', 'L', 'B', 'Y', 'T', 'X', 'K', 'C'], ['L', 'R', 'N', 'D', 'D', 'O', 'G', 'F'], ['B', 'D', 'C', 'G', 'Q', 'Y', 'T', 'K'], ['O', 'U', 'S', 'B', 'A', 'H', 'K', 'L'], ['R', 'P', 'Q', 'E', 'P', 'A', 'H', 'W'], ['N', 'V', 'R', 'A', 'U', 'Y', 'U', 'P'], ['U', 'A', 'R', 'F', 'X', 'K', 'Z', 'W'], ['S', 'Z', 'D', 'N', 'Y', 'R', 'A', 'B']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "DOG E @ (5,2)", "system": "[['S', 'L', 'B', 'Y', 'T', 'X', 'K', 'C'], ['L', 'R', 'N', 'D', 'D', 'O', 'G', 'F'], ['B', 'D', 'C', 'G', 'Q', 'Y', 'T', 'K'], ['O', 'U', 'S', 'B', 'A', 'H', 'K', 'L'], ['R', 'P', 'Q', 'E', 'P', 'A', 'H', 'W'], ['N', 'V', 'R', 'A', 'U', 'Y', 'U', 'P'], ['U', 'A', 'R', 'F', 'X', 'K', 'Z', 'W'], ['S', 'Z', 'D', 'N', 'Y', 'R', 'A', 'B']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001237.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['S', 'Z', 'T', 'X', 'J', 'G', 'S', 'V'], ['N', 'Z', 'O', 'W', 'G', 'X', 'Y', 'Z'], ['J', 'C', 'B', 'E', 'X', 'B', 'V', 'U'], ['D', 'N', 'A', 'E', 'A', 'R', 'Y', 'V'], ['T', 'E', 'Z', 'T', 'O', 'W', 'W', 'X'], ['V', 'I', 'Y', 'V', 'A', 'E', 'H', 'M'], ['W', 'D', 'V', 'X', 'U', 'J', 'L', 'T'], ['J', 'D', 'R', 'U', 'F', 'G', 'J', 'V']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "CAT SE @ (2,3)", "system": "[['S', 'Z', 'T', 'X', 'J', 'G', 'S', 'V'], ['N', 'Z', 'O', 'W', 'G', 'X', 'Y', 'Z'], ['J', 'C', 'B', 'E', 'X', 'B', 'V', 'U'], ['D', 'N', 'A', 'E', 'A', 'R', 'Y', 'V'], ['T', 'E', 'Z', 'T', 'O', 'W', 'W', 'X'], ['V', 'I', 'Y', 'V', 'A', 'E', 'H', 'M'], ['W', 'D', 'V', 'X', 'U', 'J', 'L', 'T'], ['J', 'D', 'R', 'U', 'F', 'G', 'J', 'V']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001238.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['R', 'H', 'M', 'S', 'P', 'Y', 'U', 'E'], ['H', 'L', 'T', 'L', 'W', 'O', 'E', 'G'], ['J', 'X', 'G', 'U', 'I', 'B', 'B', 'Q'], ['Z', 'I', 'U', 'G', 'R', 'D', 'G', 'V'], ['P', 'P', 'K', 'P', 'E', 'K', 'X', 'X'], ['W', 'G', 'M', 'H', 'D', 'E', 'U', 'F'], ['Q', 'U', 'D', 'M', 'N', 'D', 'W', 'L'], ['M', 'V', 'V', 'R', 'Y', 'G', 'P', 'L']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "PIG NE @ (1,5)", "system": "[['R', 'H', 'M', 'S', 'P', 'Y', 'U', 'E'], ['H', 'L', 'T', 'L', 'W', 'O', 'E', 'G'], ['J', 'X', 'G', 'U', 'I', 'B', 'B', 'Q'], ['Z', 'I', 'U', 'G', 'R', 'D', 'G', 'V'], ['P', 'P', 'K', 'P', 'E', 'K', 'X', 'X'], ['W', 'G', 'M', 'H', 'D', 'E', 'U', 'F'], ['Q', 'U', 'D', 'M', 'N', 'D', 'W', 'L'], ['M', 'V', 'V', 'R', 'Y', 'G', 'P', 'L']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001239.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['H', 'P', 'M', 'I', 'E', 'I', 'L', 'W'], ['D', 'B', 'T', 'S', 'J', 'D', 'L', 'T'], ['S', 'T', 'H', 'O', 'D', 'Q', 'Q', 'S'], ['Q', 'X', 'O', 'O', 'H', 'K', 'I', 'L'], ['N', 'I', 'G', 'W', 'R', 'E', 'J', 'G'], ['C', 'C', 'Z', 'G', 'D', 'S', 'V', 'T'], ['E', 'I', 'Q', 'C', 'U', 'J', 'E', 'V'], ['Z', 'Y', 'U', 'I', 'S', 'J', 'J', 'C']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "HORSE SE @ (3,3)", "system": "[['H', 'P', 'M', 'I', 'E', 'I', 'L', 'W'], ['D', 'B', 'T', 'S', 'J', 'D', 'L', 'T'], ['S', 'T', 'H', 'O', 'D', 'Q', 'Q', 'S'], ['Q', 'X', 'O', 'O', 'H', 'K', 'I', 'L'], ['N', 'I', 'G', 'W', 'R', 'E', 'J', 'G'], ['C', 'C', 'Z', 'G', 'D', 'S', 'V', 'T'], ['E', 'I', 'Q', 'C', 'U', 'J', 'E', 'V'], ['Z', 'Y', 'U', 'I', 'S', 'J', 'J', 'C']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001240.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['P', 'Q', 'X', 'F', 'G', 'V', 'V', 'V'], ['S', 'D', 'C', 'J', 'H', 'U', 'J', 'T'], ['H', 'Q', 'O', 'X', 'B', 'P', 'X', 'N'], ['F', 'T', 'K', 'N', 'C', 'U', 'Q', 'B'], ['K', 'V', 'V', 'F', 'K', 'R', 'K', 'J'], ['P', 'F', 'Z', 'E', 'N', 'E', 'Z', 'I'], ['O', 'N', 'C', 'N', 'V', 'X', 'Y', 'G'], ['G', 'R', 'K', 'O', 'W', 'I', 'N', 'P']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "DONKEY SE @ (2,2)", "system": "[['P', 'Q', 'X', 'F', 'G', 'V', 'V', 'V'], ['S', 'D', 'C', 'J', 'H', 'U', 'J', 'T'], ['H', 'Q', 'O', 'X', 'B', 'P', 'X', 'N'], ['F', 'T', 'K', 'N', 'C', 'U', 'Q', 'B'], ['K', 'V', 'V', 'F', 'K', 'R', 'K', 'J'], ['P', 'F', 'Z', 'E', 'N', 'E', 'Z', 'I'], ['O', 'N', 'C', 'N', 'V', 'X', 'Y', 'G'], ['G', 'R', 'K', 'O', 'W', 'I', 'N', 'P']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001241.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 8x8 grid.\\n[['E', 'R', 'X', 'L', 'Z', 'W', 'X', 'M'], ['F', 'M', 'Z', 'P', 'Y', 'S', 'B', 'Q'], ['Z', 'W', 'E', 'A', 'M', 'E', 'K', 'Q'], ['D', 'O', 'G', 'L', 'L', 'I', 'I', 'R'], ['L', 'M', 'Y', 'T', 'O', 'J', 'G', 'K'], ['J', 'E', 'R', 'D', 'I', 'L', 'Q', 'U'], ['H', 'U', 'J', 'K', 'G', 'A', 'K', 'J'], ['T', 'P', 'B', 'N', 'C', 'O', 'U', 'O']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "TURTLE NE @ (1,8)", "system": "[['E', 'R', 'X', 'L', 'Z', 'W', 'X', 'M'], ['F', 'M', 'Z', 'P', 'Y', 'S', 'B', 'Q'], ['Z', 'W', 'E', 'A', 'M', 'E', 'K', 'Q'], ['D', 'O', 'G', 'L', 'L', 'I', 'I', 'R'], ['L', 'M', 'Y', 'T', 'O', 'J', 'G', 'K'], ['J', 'E', 'R', 'D', 'I', 'L', 'Q', 'U'], ['H', 'U', 'J', 'K', 'G', 'A', 'K', 'J'], ['T', 'P', 'B', 'N', 'C', 'O', 'U', 'O']]", "category": "wordsearch", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001242.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['U', 'X', 'D', 'M', 'E', 'C', 'W', 'X', 'U', 'A', 'L', 'G'], ['P', 'D', 'C', 'B', 'X', 'O', 'K', 'W', 'A', 'D', 'J', 'H'], ['C', 'C', 'N', 'T', 'K', 'L', 'Z', 'K', 'B', 'H', 'O', 'G'], ['T', 'F', 'P', 'J', 'N', 'L', 'A', 'E', 'R', 'X', 'G', 'T'], ['N', 'E', 'D', 'V', 'D', 'B', 'X', 'Z', 'R', 'T', 'S', 'C'], ['D', 'O', 'M', 'W', 'D', 'M', 'I', 'J', 'O', 'L', 'K', 'Z'], ['U', 'X', 'L', 'G', 'O', 'Q', 'T', 'T', 'Y', 'Z', 'B', 'W'], ['B', 'E', 'J', 'P', 'U', 'G', 'V', 'G', 'X', 'I', 'C', 'C'], ['C', 'P', 'W', 'F', 'K', 'Y', 'O', 'R', 'W', 'U', 'G', 'D'], ['T', 'E', 'Z', 'K', 'H', 'V', 'K', 'A', 'Z', 'G', 'B', 'D'], ['H', 'I', 'V', 'H', 'C', 'P', 'Q', 'P', 'T', 'P', 'U', 'T'], ['G', 'W', 'N', 'K', 'X', 'E', 'F', 'F', 'C', 'H', 'V', 'A']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "GOAT SE @ (6,8)", "system": "[['U', 'X', 'D', 'M', 'E', 'C', 'W', 'X', 'U', 'A', 'L', 'G'], ['P', 'D', 'C', 'B', 'X', 'O', 'K', 'W', 'A', 'D', 'J', 'H'], ['C', 'C', 'N', 'T', 'K', 'L', 'Z', 'K', 'B', 'H', 'O', 'G'], ['T', 'F', 'P', 'J', 'N', 'L', 'A', 'E', 'R', 'X', 'G', 'T'], ['N', 'E', 'D', 'V', 'D', 'B', 'X', 'Z', 'R', 'T', 'S', 'C'], ['D', 'O', 'M', 'W', 'D', 'M', 'I', 'J', 'O', 'L', 'K', 'Z'], ['U', 'X', 'L', 'G', 'O', 'Q', 'T', 'T', 'Y', 'Z', 'B', 'W'], ['B', 'E', 'J', 'P', 'U', 'G', 'V', 'G', 'X', 'I', 'C', 'C'], ['C', 'P', 'W', 'F', 'K', 'Y', 'O', 'R', 'W', 'U', 'G', 'D'], ['T', 'E', 'Z', 'K', 'H', 'V', 'K', 'A', 'Z', 'G', 'B', 'D'], ['H', 'I', 'V', 'H', 'C', 'P', 'Q', 'P', 'T', 'P', 'U', 'T'], ['G', 'W', 'N', 'K', 'X', 'E', 'F', 'F', 'C', 'H', 'V', 'A']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001243.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['L', 'P', 'I', 'J', 'J', 'P', 'Y', 'C', 'R', 'X', 'W', 'A'], ['Z', 'K', 'T', 'K', 'P', 'G', 'F', 'V', 'W', 'T', 'H', 'B'], ['D', 'S', 'R', 'U', 'D', 'U', 'I', 'L', 'J', 'M', 'F', 'C'], ['F', 'L', 'Z', 'P', 'J', 'I', 'X', 'J', 'Y', 'T', 'C', 'Y'], ['L', 'I', 'G', 'O', 'U', 'P', 'J', 'A', 'Y', 'A', 'U', 'J'], ['Y', 'L', 'L', 'O', 'H', 'L', 'C', 'F', 'U', 'J', 'U', 'P'], ['N', 'E', 'K', 'J', 'S', 'T', 'V', 'E', 'J', 'S', 'I', 'D'], ['Z', 'X', 'A', 'D', 'C', 'I', 'Q', 'U', 'S', 'H', 'F', 'Q'], ['J', 'P', 'Y', 'F', 'D', 'N', 'Q', 'H', 'J', 'E', 'M', 'P'], ['S', 'W', 'X', 'U', 'Z', 'N', 'Y', 'G', 'N', 'E', 'K', 'H'], ['P', 'M', 'U', 'Z', 'M', 'P', 'K', 'M', 'E', 'P', 'D', 'O'], ['M', 'P', 'Y', 'S', 'I', 'T', 'J', 'L', 'J', 'Q', 'N', 'T']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "SHEEP S @ (10,7)", "system": "[['L', 'P', 'I', 'J', 'J', 'P', 'Y', 'C', 'R', 'X', 'W', 'A'], ['Z', 'K', 'T', 'K', 'P', 'G', 'F', 'V', 'W', 'T', 'H', 'B'], ['D', 'S', 'R', 'U', 'D', 'U', 'I', 'L', 'J', 'M', 'F', 'C'], ['F', 'L', 'Z', 'P', 'J', 'I', 'X', 'J', 'Y', 'T', 'C', 'Y'], ['L', 'I', 'G', 'O', 'U', 'P', 'J', 'A', 'Y', 'A', 'U', 'J'], ['Y', 'L', 'L', 'O', 'H', 'L', 'C', 'F', 'U', 'J', 'U', 'P'], ['N', 'E', 'K', 'J', 'S', 'T', 'V', 'E', 'J', 'S', 'I', 'D'], ['Z', 'X', 'A', 'D', 'C', 'I', 'Q', 'U', 'S', 'H', 'F', 'Q'], ['J', 'P', 'Y', 'F', 'D', 'N', 'Q', 'H', 'J', 'E', 'M', 'P'], ['S', 'W', 'X', 'U', 'Z', 'N', 'Y', 'G', 'N', 'E', 'K', 'H'], ['P', 'M', 'U', 'Z', 'M', 'P', 'K', 'M', 'E', 'P', 'D', 'O'], ['M', 'P', 'Y', 'S', 'I', 'T', 'J', 'L', 'J', 'Q', 'N', 'T']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001244.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['D', 'C', 'I', 'O', 'M', 'A', 'W', 'V', 'W', 'D', 'Y', 'W'], ['P', 'T', 'X', 'Q', 'Z', 'O', 'K', 'L', 'H', 'X', 'O', 'H'], ['H', 'T', 'E', 'Z', 'G', 'B', 'M', 'X', 'C', 'A', 'S', 'O'], ['Z', 'S', 'W', 'G', 'Z', 'C', 'Z', 'F', 'O', 'M', 'P', 'Z'], ['O', 'Z', 'C', 'I', 'W', 'B', 'R', 'M', 'P', 'Z', 'Q', 'L'], ['I', 'A', 'Y', 'A', 'O', 'S', 'Z', 'B', 'G', 'U', 'F', 'H'], ['C', 'U', 'M', 'C', 'S', 'H', 'Z', 'Y', 'J', 'P', 'Y', 'V'], ['A', 'M', 'H', 'I', 'E', 'F', 'D', 'T', 'F', 'G', 'U', 'E'], ['X', 'Y', 'L', 'R', 'W', 'F', 'U', 'M', 'E', 'K', 'B', 'S'], ['J', 'X', 'K', 'O', 'P', 'F', 'N', 'F', 'S', 'U', 'T', 'D'], ['D', 'C', 'C', 'G', 'O', 'F', 'F', 'N', 'F', 'E', 'J', 'A'], ['C', 'Y', 'Q', 'F', 'T', 'P', 'D', 'D', 'H', 'B', 'J', 'L']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "COW NE @ (3,11)", "system": "[['D', 'C', 'I', 'O', 'M', 'A', 'W', 'V', 'W', 'D', 'Y', 'W'], ['P', 'T', 'X', 'Q', 'Z', 'O', 'K', 'L', 'H', 'X', 'O', 'H'], ['H', 'T', 'E', 'Z', 'G', 'B', 'M', 'X', 'C', 'A', 'S', 'O'], ['Z', 'S', 'W', 'G', 'Z', 'C', 'Z', 'F', 'O', 'M', 'P', 'Z'], ['O', 'Z', 'C', 'I', 'W', 'B', 'R', 'M', 'P', 'Z', 'Q', 'L'], ['I', 'A', 'Y', 'A', 'O', 'S', 'Z', 'B', 'G', 'U', 'F', 'H'], ['C', 'U', 'M', 'C', 'S', 'H', 'Z', 'Y', 'J', 'P', 'Y', 'V'], ['A', 'M', 'H', 'I', 'E', 'F', 'D', 'T', 'F', 'G', 'U', 'E'], ['X', 'Y', 'L', 'R', 'W', 'F', 'U', 'M', 'E', 'K', 'B', 'S'], ['J', 'X', 'K', 'O', 'P', 'F', 'N', 'F', 'S', 'U', 'T', 'D'], ['D', 'C', 'C', 'G', 'O', 'F', 'F', 'N', 'F', 'E', 'J', 'A'], ['C', 'Y', 'Q', 'F', 'T', 'P', 'D', 'D', 'H', 'B', 'J', 'L']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001245.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['Y', 'K', 'C', 'Q', 'Q', 'X', 'S', 'C', 'M', 'K', 'X', 'I'], ['Z', 'P', 'L', 'A', 'W', 'C', 'D', 'W', 'N', 'Y', 'D', 'B'], ['P', 'Q', 'X', 'Q', 'L', 'O', 'T', 'G', 'Q', 'E', 'U', 'I'], ['T', 'R', 'I', 'C', 'I', 'W', 'S', 'I', 'Y', 'J', 'L', 'C'], ['A', 'H', 'O', 'N', 'O', 'R', 'P', 'A', 'M', 'D', 'D', 'Y'], ['P', 'I', 'T', 'J', 'N', 'T', 'G', 'T', 'I', 'U', 'N', 'E'], ['E', 'B', 'I', 'E', 'T', 'U', 'H', 'I', 'V', 'Y', 'W', 'Z'], ['H', 'O', 'O', 'F', 'G', 'C', 'L', 'Z', 'Y', 'V', 'I', 'Y'], ['S', 'R', 'A', 'J', 'F', 'J', 'V', 'T', 'S', 'M', 'P', 'L'], ['C', 'K', 'Y', 'H', 'H', 'E', 'U', 'F', 'P', 'O', 'U', 'U'], ['F', 'Q', 'W', 'D', 'G', 'X', 'E', 'W', 'R', 'W', 'E', 'S'], ['A', 'Y', 'E', 'J', 'O', 'W', 'D', 'C', 'U', 'O', 'P', 'G']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "LION S @ (5,3)", "system": "[['Y', 'K', 'C', 'Q', 'Q', 'X', 'S', 'C', 'M', 'K', 'X', 'I'], ['Z', 'P', 'L', 'A', 'W', 'C', 'D', 'W', 'N', 'Y', 'D', 'B'], ['P', 'Q', 'X', 'Q', 'L', 'O', 'T', 'G', 'Q', 'E', 'U', 'I'], ['T', 'R', 'I', 'C', 'I', 'W', 'S', 'I', 'Y', 'J', 'L', 'C'], ['A', 'H', 'O', 'N', 'O', 'R', 'P', 'A', 'M', 'D', 'D', 'Y'], ['P', 'I', 'T', 'J', 'N', 'T', 'G', 'T', 'I', 'U', 'N', 'E'], ['E', 'B', 'I', 'E', 'T', 'U', 'H', 'I', 'V', 'Y', 'W', 'Z'], ['H', 'O', 'O', 'F', 'G', 'C', 'L', 'Z', 'Y', 'V', 'I', 'Y'], ['S', 'R', 'A', 'J', 'F', 'J', 'V', 'T', 'S', 'M', 'P', 'L'], ['C', 'K', 'Y', 'H', 'H', 'E', 'U', 'F', 'P', 'O', 'U', 'U'], ['F', 'Q', 'W', 'D', 'G', 'X', 'E', 'W', 'R', 'W', 'E', 'S'], ['A', 'Y', 'E', 'J', 'O', 'W', 'D', 'C', 'U', 'O', 'P', 'G']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001246.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['L', 'X', 'J', 'R', 'T', 'D', 'G', 'L', 'N', 'H', 'J', 'Y'], ['V', 'T', 'Q', 'Q', 'I', 'J', 'H', 'P', 'I', 'S', 'Z', 'J'], ['N', 'D', 'M', 'X', 'V', 'F', 'J', 'B', 'E', 'F', 'C', 'A'], ['K', 'D', 'C', 'M', 'V', 'B', 'H', 'Y', 'D', 'U', 'O', 'B'], ['O', 'D', 'R', 'G', 'Y', 'L', 'O', 'M', 'F', 'U', 'A', 'R'], ['O', 'U', 'I', 'O', 'M', 'X', 'C', 'R', 'T', 'N', 'Q', 'Q'], ['E', 'T', 'J', 'M', 'T', 'H', 'M', 'D', 'X', 'V', 'U', 'Z'], ['Z', 'D', 'G', 'Z', 'P', 'I', 'I', 'W', 'D', 'T', 'F', 'R'], ['M', 'I', 'Q', 'S', 'F', 'Q', 'G', 'W', 'Q', 'Y', 'E', 'W'], ['X', 'N', 'R', 'U', 'Q', 'A', 'V', 'E', 'S', 'P', 'N', 'D'], ['D', 'D', 'B', 'V', 'I', 'V', 'U', 'L', 'R', 'C', 'X', 'V'], ['N', 'M', 'T', 'A', 'T', 'S', 'A', 'B', 'A', 'C', 'X', 'M']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "TIGER SE @ (5,7)", "system": "[['L', 'X', 'J', 'R', 'T', 'D', 'G', 'L', 'N', 'H', 'J', 'Y'], ['V', 'T', 'Q', 'Q', 'I', 'J', 'H', 'P', 'I', 'S', 'Z', 'J'], ['N', 'D', 'M', 'X', 'V', 'F', 'J', 'B', 'E', 'F', 'C', 'A'], ['K', 'D', 'C', 'M', 'V', 'B', 'H', 'Y', 'D', 'U', 'O', 'B'], ['O', 'D', 'R', 'G', 'Y', 'L', 'O', 'M', 'F', 'U', 'A', 'R'], ['O', 'U', 'I', 'O', 'M', 'X', 'C', 'R', 'T', 'N', 'Q', 'Q'], ['E', 'T', 'J', 'M', 'T', 'H', 'M', 'D', 'X', 'V', 'U', 'Z'], ['Z', 'D', 'G', 'Z', 'P', 'I', 'I', 'W', 'D', 'T', 'F', 'R'], ['M', 'I', 'Q', 'S', 'F', 'Q', 'G', 'W', 'Q', 'Y', 'E', 'W'], ['X', 'N', 'R', 'U', 'Q', 'A', 'V', 'E', 'S', 'P', 'N', 'D'], ['D', 'D', 'B', 'V', 'I', 'V', 'U', 'L', 'R', 'C', 'X', 'V'], ['N', 'M', 'T', 'A', 'T', 'S', 'A', 'B', 'A', 'C', 'X', 'M']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001247.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 12x12 grid.\\n[['Z', 'J', 'H', 'U', 'Z', 'I', 'C', 'M', 'V', 'E', 'E', 'N'], ['W', 'Z', 'Y', 'Y', 'H', 'K', 'J', 'A', 'F', 'J', 'H', 'Q'], ['M', 'I', 'Q', 'Z', 'B', 'Q', 'P', 'X', 'I', 'K', 'K', 'X'], ['Z', 'R', 'C', 'X', 'O', 'V', 'H', 'A', 'Z', 'P', 'R', 'T'], ['U', 'X', 'Q', 'D', 'Y', 'A', 'S', 'E', 'P', 'W', 'N', 'Y'], ['O', 'W', 'R', 'J', 'R', 'J', 'W', 'T', 'D', 'A', 'Z', 'L'], ['H', 'O', 'M', 'J', 'N', 'O', 'A', 'W', 'H', 'E', 'S', 'B'], ['U', 'V', 'V', 'X', 'Y', 'B', 'N', 'P', 'Z', 'I', 'K', 'E'], ['G', 'I', 'F', 'T', 'Z', 'W', 'E', 'V', 'R', 'O', 'S', 'K'], ['P', 'I', 'I', 'Y', 'F', 'L', 'Q', 'Y', 'E', 'H', 'Z', 'J'], ['U', 'H', 'E', 'R', 'E', 'J', 'D', 'R', 'I', 'N', 'R', 'I'], ['Y', 'J', 'K', 'R', 'Z', 'A', 'S', 'P', 'E', 'F', 'R', 'A']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "ELEPHANT NE @ (5,11)", "system": "[['Z', 'J', 'H', 'U', 'Z', 'I', 'C', 'M', 'V', 'E', 'E', 'N'], ['W', 'Z', 'Y', 'Y', 'H', 'K', 'J', 'A', 'F', 'J', 'H', 'Q'], ['M', 'I', 'Q', 'Z', 'B', 'Q', 'P', 'X', 'I', 'K', 'K', 'X'], ['Z', 'R', 'C', 'X', 'O', 'V', 'H', 'A', 'Z', 'P', 'R', 'T'], ['U', 'X', 'Q', 'D', 'Y', 'A', 'S', 'E', 'P', 'W', 'N', 'Y'], ['O', 'W', 'R', 'J', 'R', 'J', 'W', 'T', 'D', 'A', 'Z', 'L'], ['H', 'O', 'M', 'J', 'N', 'O', 'A', 'W', 'H', 'E', 'S', 'B'], ['U', 'V', 'V', 'X', 'Y', 'B', 'N', 'P', 'Z', 'I', 'K', 'E'], ['G', 'I', 'F', 'T', 'Z', 'W', 'E', 'V', 'R', 'O', 'S', 'K'], ['P', 'I', 'I', 'Y', 'F', 'L', 'Q', 'Y', 'E', 'H', 'Z', 'J'], ['U', 'H', 'E', 'R', 'E', 'J', 'D', 'R', 'I', 'N', 'R', 'I'], ['Y', 'J', 'K', 'R', 'Z', 'A', 'S', 'P', 'E', 'F', 'R', 'A']]", "category": "wordsearch", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001248.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['V', 'W', 'K', 'G', 'Y', 'X', 'N', 'M', 'D', 'D', 'F', 'N', 'U', 'T', 'W', 'X'], ['E', 'C', 'Z', 'D', 'C', 'E', 'Z', 'S', 'O', 'G', 'E', 'D', 'K', 'S', 'C', 'G'], ['R', 'X', 'Z', 'G', 'S', 'U', 'E', 'Q', 'M', 'U', 'L', 'E', 'V', 'M', 'Q', 'O'], ['N', 'T', 'U', 'O', 'V', 'A', 'S', 'K', 'J', 'T', 'H', 'P', 'M', 'B', 'N', 'O'], ['J', 'S', 'Z', 'R', 'X', 'N', 'C', 'C', 'H', 'Y', 'L', 'S', 'L', 'F', 'P', 'U'], ['K', 'K', 'W', 'W', 'Q', 'Z', 'Y', 'J', 'N', 'A', 'M', 'L', 'R', 'R', 'M', 'J'], ['R', 'O', 'N', 'S', 'O', 'B', 'Y', 'U', 'Q', 'V', 'Q', 'C', 'Y', 'O', 'T', 'C'], ['W', 'S', 'R', 'R', 'U', 'Z', 'F', 'Y', 'C', 'R', 'U', 'N', 'L', 'N', 'V', 'J'], ['K', 'P', 'J', 'F', 'N', 'Q', 'D', 'Y', 'X', 'V', 'N', 'H', 'X', 'K', 'C', 'K'], ['D', 'G', 'I', 'R', 'E', 'X', 'X', 'U', 'W', 'E', 'A', 'W', 'X', 'G', 'Q', 'N'], ['F', 'M', 'K', 'K', 'F', 'S', 'J', 'X', 'L', 'C', 'L', 'A', 'Y', 'F', 'Y', 'C'], ['S', 'S', 'L', 'Z', 'Y', 'M', 'I', 'K', 'B', 'W', 'V', 'G', 'E', 'O', 'A', 'A'], ['A', 'G', 'O', 'A', 'T', 'I', 'K', 'G', 'F', 'O', 'W', 'L', 'I', 'D', 'E', 'O'], ['T', 'V', 'N', 'S', 'F', 'O', 'D', 'S', 'D', 'L', 'E', 'A', 'N', 'T', 'W', 'P'], ['V', 'E', 'M', 'H', 'I', 'I', 'D', 'O', 'A', 'M', 'P', 'N', 'V', 'A', 'K', 'C'], ['J', 'U', 'J', 'P', 'T', 'H', 'F', 'Y', 'I', 'F', 'I', 'U', 'J', 'E', 'H', 'A']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "GOAT E @ (2,13)", "system": "[['V', 'W', 'K', 'G', 'Y', 'X', 'N', 'M', 'D', 'D', 'F', 'N', 'U', 'T', 'W', 'X'], ['E', 'C', 'Z', 'D', 'C', 'E', 'Z', 'S', 'O', 'G', 'E', 'D', 'K', 'S', 'C', 'G'], ['R', 'X', 'Z', 'G', 'S', 'U', 'E', 'Q', 'M', 'U', 'L', 'E', 'V', 'M', 'Q', 'O'], ['N', 'T', 'U', 'O', 'V', 'A', 'S', 'K', 'J', 'T', 'H', 'P', 'M', 'B', 'N', 'O'], ['J', 'S', 'Z', 'R', 'X', 'N', 'C', 'C', 'H', 'Y', 'L', 'S', 'L', 'F', 'P', 'U'], ['K', 'K', 'W', 'W', 'Q', 'Z', 'Y', 'J', 'N', 'A', 'M', 'L', 'R', 'R', 'M', 'J'], ['R', 'O', 'N', 'S', 'O', 'B', 'Y', 'U', 'Q', 'V', 'Q', 'C', 'Y', 'O', 'T', 'C'], ['W', 'S', 'R', 'R', 'U', 'Z', 'F', 'Y', 'C', 'R', 'U', 'N', 'L', 'N', 'V', 'J'], ['K', 'P', 'J', 'F', 'N', 'Q', 'D', 'Y', 'X', 'V', 'N', 'H', 'X', 'K', 'C', 'K'], ['D', 'G', 'I', 'R', 'E', 'X', 'X', 'U', 'W', 'E', 'A', 'W', 'X', 'G', 'Q', 'N'], ['F', 'M', 'K', 'K', 'F', 'S', 'J', 'X', 'L', 'C', 'L', 'A', 'Y', 'F', 'Y', 'C'], ['S', 'S', 'L', 'Z', 'Y', 'M', 'I', 'K', 'B', 'W', 'V', 'G', 'E', 'O', 'A', 'A'], ['A', 'G', 'O', 'A', 'T', 'I', 'K', 'G', 'F', 'O', 'W', 'L', 'I', 'D', 'E', 'O'], ['T', 'V', 'N', 'S', 'F', 'O', 'D', 'S', 'D', 'L', 'E', 'A', 'N', 'T', 'W', 'P'], ['V', 'E', 'M', 'H', 'I', 'I', 'D', 'O', 'A', 'M', 'P', 'N', 'V', 'A', 'K', 'C'], ['J', 'U', 'J', 'P', 'T', 'H', 'F', 'Y', 'I', 'F', 'I', 'U', 'J', 'E', 'H', 'A']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001249.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['T', 'H', 'B', 'Q', 'T', 'O', 'K', 'G', 'S', 'M', 'T', 'Z', 'J', 'A', 'O', 'C'], ['D', 'M', 'M', 'D', 'W', 'Y', 'S', 'D', 'O', 'G', 'U', 'N', 'C', 'L', 'X', 'K'], ['U', 'C', 'Z', 'R', 'G', 'R', 'A', 'K', 'P', 'G', 'E', 'Y', 'F', 'J', 'R', 'I'], ['F', 'I', 'R', 'W', 'K', 'C', 'M', 'I', 'R', 'N', 'X', 'B', 'X', 'A', 'W', 'W'], ['Z', 'R', 'Y', 'N', 'S', 'F', 'F', 'Z', 'Z', 'Z', 'A', 'E', 'C', 'H', 'E', 'U'], ['U', 'A', 'B', 'D', 'H', 'U', 'X', 'W', 'S', 'I', 'M', 'N', 'G', 'X', 'J', 'U'], ['S', 'K', 'S', 'E', 'E', 'K', 'U', 'A', 'C', 'S', 'A', 'J', 'L', 'Q', 'X', 'U'], ['D', 'N', 'X', 'I', 'E', 'N', 'U', 'D', 'H', 'C', 'T', 'D', 'C', 'W', 'M', 'Z'], ['R', 'Z', 'S', 'O', 'P', 'Q', 'H', 'U', 'K', 'N', 'N', 'V', 'E', 'T', 'D', 'U'], ['Z', 'O', 'P', 'P', 'Z', 'A', 'I', 'D', 'Z', 'R', 'Z', 'O', 'C', 'Y', 'U', 'B'], ['V', 'X', 'O', 'V', 'K', 'U', 'H', 'N', 'D', 'R', 'K', 'N', 'X', 'X', 'G', 'J'], ['X', 'T', 'K', 'P', 'J', 'L', 'Y', 'P', 'K', 'D', 'S', 'F', 'F', 'I', 'V', 'K'], ['K', 'F', 'A', 'U', 'A', 'X', 'Z', 'S', 'B', 'O', 'Q', 'C', 'W', 'O', 'H', 'N'], ['I', 'Y', 'Q', 'O', 'U', 'O', 'D', 'R', 'B', 'M', 'M', 'K', 'C', 'O', 'V', 'T'], ['A', 'K', 'N', 'Q', 'U', 'E', 'Y', 'K', 'Z', 'F', 'O', 'Q', 'C', 'D', 'T', 'J'], ['Q', 'J', 'S', 'K', 'Q', 'X', 'Q', 'R', 'Z', 'V', 'C', 'H', 'G', 'D', 'C', 'A']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "SHEEP S @ (5,5)", "system": "[['T', 'H', 'B', 'Q', 'T', 'O', 'K', 'G', 'S', 'M', 'T', 'Z', 'J', 'A', 'O', 'C'], ['D', 'M', 'M', 'D', 'W', 'Y', 'S', 'D', 'O', 'G', 'U', 'N', 'C', 'L', 'X', 'K'], ['U', 'C', 'Z', 'R', 'G', 'R', 'A', 'K', 'P', 'G', 'E', 'Y', 'F', 'J', 'R', 'I'], ['F', 'I', 'R', 'W', 'K', 'C', 'M', 'I', 'R', 'N', 'X', 'B', 'X', 'A', 'W', 'W'], ['Z', 'R', 'Y', 'N', 'S', 'F', 'F', 'Z', 'Z', 'Z', 'A', 'E', 'C', 'H', 'E', 'U'], ['U', 'A', 'B', 'D', 'H', 'U', 'X', 'W', 'S', 'I', 'M', 'N', 'G', 'X', 'J', 'U'], ['S', 'K', 'S', 'E', 'E', 'K', 'U', 'A', 'C', 'S', 'A', 'J', 'L', 'Q', 'X', 'U'], ['D', 'N', 'X', 'I', 'E', 'N', 'U', 'D', 'H', 'C', 'T', 'D', 'C', 'W', 'M', 'Z'], ['R', 'Z', 'S', 'O', 'P', 'Q', 'H', 'U', 'K', 'N', 'N', 'V', 'E', 'T', 'D', 'U'], ['Z', 'O', 'P', 'P', 'Z', 'A', 'I', 'D', 'Z', 'R', 'Z', 'O', 'C', 'Y', 'U', 'B'], ['V', 'X', 'O', 'V', 'K', 'U', 'H', 'N', 'D', 'R', 'K', 'N', 'X', 'X', 'G', 'J'], ['X', 'T', 'K', 'P', 'J', 'L', 'Y', 'P', 'K', 'D', 'S', 'F', 'F', 'I', 'V', 'K'], ['K', 'F', 'A', 'U', 'A', 'X', 'Z', 'S', 'B', 'O', 'Q', 'C', 'W', 'O', 'H', 'N'], ['I', 'Y', 'Q', 'O', 'U', 'O', 'D', 'R', 'B', 'M', 'M', 'K', 'C', 'O', 'V', 'T'], ['A', 'K', 'N', 'Q', 'U', 'E', 'Y', 'K', 'Z', 'F', 'O', 'Q', 'C', 'D', 'T', 'J'], ['Q', 'J', 'S', 'K', 'Q', 'X', 'Q', 'R', 'Z', 'V', 'C', 'H', 'G', 'D', 'C', 'A']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001250.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['S', 'G', 'N', 'E', 'G', 'R', 'B', 'X', 'O', 'X', 'Y', 'V', 'O', 'L', 'U', 'T'], ['N', 'L', 'T', 'I', 'P', 'V', 'Z', 'O', 'W', 'S', 'Z', 'Y', 'Q', 'N', 'X', 'W'], ['O', 'C', 'H', 'F', 'A', 'L', 'L', 'D', 'J', 'J', 'J', 'T', 'J', 'J', 'C', 'H'], ['J', 'N', 'T', 'H', 'U', 'K', 'F', 'F', 'N', 'D', 'Z', 'H', 'T', 'X', 'B', 'Y'], ['O', 'Q', 'K', 'I', 'M', 'Y', 'C', 'Q', 'N', 'P', 'V', 'E', 'Z', 'I', 'C', 'J'], ['D', 'O', 'K', 'K', 'H', 'G', 'V', 'Z', 'B', 'W', 'M', 'W', 'O', 'Z', 'B', 'C'], ['V', 'Z', 'L', 'S', 'E', 'D', 'H', 'K', 'G', 'Y', 'J', 'K', 'C', 'F', 'K', 'S'], ['X', 'S', 'W', 'S', 'G', 'E', 'D', 'H', 'X', 'K', 'Y', 'V', 'R', 'O', 'N', 'I'], ['L', 'Z', 'X', 'Z', 'A', 'L', 'V', 'P', 'A', 'W', 'Q', 'M', 'I', 'V', 'V', 'H'], ['U', 'F', 'K', 'Y', 'D', 'S', 'C', 'G', 'X', 'I', 'Z', 'D', 'H', 'I', 'G', 'J'], ['D', 'O', 'U', 'G', 'X', 'A', 'P', 'C', 'D', 'S', 'I', 'P', 'R', 'A', 'Q', 'H'], ['E', 'M', 'N', 'J', 'N', 'H', 'P', 'O', 'K', 'M', 'J', 'D', 'C', 'Z', 'H', 'W'], ['S', 'F', 'N', 'R', 'G', 'N', 'X', 'W', 'E', 'O', 'U', 'I', 'A', 'T', 'J', 'M'], ['T', 'N', 'O', 'A', 'M', 'L', 'S', 'K', 'J', 'F', 'U', 'W', 'M', 'Q', 'T', 'Y'], ['C', 'X', 'O', 'S', 'H', 'A', 'W', 'P', 'D', 'M', 'U', 'P', 'H', 'B', 'L', 'K'], ['M', 'C', 'W', 'C', 'S', 'I', 'E', 'H', 'D', 'Z', 'A', 'J', 'B', 'X', 'C', 'T']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "COW S @ (8,11)", "system": "[['S', 'G', 'N', 'E', 'G', 'R', 'B', 'X', 'O', 'X', 'Y', 'V', 'O', 'L', 'U', 'T'], ['N', 'L', 'T', 'I', 'P', 'V', 'Z', 'O', 'W', 'S', 'Z', 'Y', 'Q', 'N', 'X', 'W'], ['O', 'C', 'H', 'F', 'A', 'L', 'L', 'D', 'J', 'J', 'J', 'T', 'J', 'J', 'C', 'H'], ['J', 'N', 'T', 'H', 'U', 'K', 'F', 'F', 'N', 'D', 'Z', 'H', 'T', 'X', 'B', 'Y'], ['O', 'Q', 'K', 'I', 'M', 'Y', 'C', 'Q', 'N', 'P', 'V', 'E', 'Z', 'I', 'C', 'J'], ['D', 'O', 'K', 'K', 'H', 'G', 'V', 'Z', 'B', 'W', 'M', 'W', 'O', 'Z', 'B', 'C'], ['V', 'Z', 'L', 'S', 'E', 'D', 'H', 'K', 'G', 'Y', 'J', 'K', 'C', 'F', 'K', 'S'], ['X', 'S', 'W', 'S', 'G', 'E', 'D', 'H', 'X', 'K', 'Y', 'V', 'R', 'O', 'N', 'I'], ['L', 'Z', 'X', 'Z', 'A', 'L', 'V', 'P', 'A', 'W', 'Q', 'M', 'I', 'V', 'V', 'H'], ['U', 'F', 'K', 'Y', 'D', 'S', 'C', 'G', 'X', 'I', 'Z', 'D', 'H', 'I', 'G', 'J'], ['D', 'O', 'U', 'G', 'X', 'A', 'P', 'C', 'D', 'S', 'I', 'P', 'R', 'A', 'Q', 'H'], ['E', 'M', 'N', 'J', 'N', 'H', 'P', 'O', 'K', 'M', 'J', 'D', 'C', 'Z', 'H', 'W'], ['S', 'F', 'N', 'R', 'G', 'N', 'X', 'W', 'E', 'O', 'U', 'I', 'A', 'T', 'J', 'M'], ['T', 'N', 'O', 'A', 'M', 'L', 'S', 'K', 'J', 'F', 'U', 'W', 'M', 'Q', 'T', 'Y'], ['C', 'X', 'O', 'S', 'H', 'A', 'W', 'P', 'D', 'M', 'U', 'P', 'H', 'B', 'L', 'K'], ['M', 'C', 'W', 'C', 'S', 'I', 'E', 'H', 'D', 'Z', 'A', 'J', 'B', 'X', 'C', 'T']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001251.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['O', 'Q', 'V', 'D', 'X', 'Q', 'Z', 'Z', 'N', 'Z', 'Z', 'T', 'K', 'O', 'L', 'B'], ['I', 'S', 'J', 'T', 'C', 'S', 'I', 'Q', 'M', 'N', 'X', 'D', 'Y', 'Q', 'H', 'M'], ['C', 'T', 'D', 'V', 'J', 'A', 'C', 'G', 'Q', 'G', 'T', 'Y', 'A', 'B', 'R', 'X'], ['A', 'R', 'C', 'Y', 'E', 'B', 'I', 'K', 'C', 'B', 'D', 'D', 'U', 'A', 'D', 'N'], ['P', 'M', 'V', 'F', 'O', 'V', 'Z', 'I', 'Q', 'N', 'L', 'C', 'N', 'N', 'E', 'I'], ['D', 'L', 'B', 'U', 'P', 'Z', 'P', 'L', 'P', 'R', 'Y', 'I', 'G', 'E', 'B', 'A'], ['C', 'N', 'M', 'U', 'L', 'F', 'J', 'E', 'Y', 'I', 'Y', 'Y', 'L', 'W', 'I', 'X'], ['I', 'U', 'D', 'D', 'A', 'C', 'L', 'B', 'W', 'U', 'F', 'G', 'V', 'Y', 'Z', 'G'], ['V', 'I', 'V', 'Y', 'M', 'B', 'Y', 'I', 'V', 'M', 'R', 'J', 'C', 'E', 'S', 'R'], ['Z', 'H', 'J', 'B', 'D', 'E', 'H', 'E', 'O', 'R', 'V', 'X', 'O', 'X', 'B', 'A'], ['K', 'E', 'Z', 'J', 'K', 'E', 'Q', 'X', 'O', 'N', 'I', 'G', 'V', 'Z', 'T', 'M'], ['K', 'O', 'T', 'H', 'E', 'D', 'L', 'Z', 'P', 'L', 'P', 'Q', 'I', 'Z', 'E', 'K'], ['N', 'F', 'B', 'V', 'G', 'P', 'T', 'F', 'V', 'A', 'X', 'E', 'L', 'T', 'A', 'M'], ['G', 'K', 'Q', 'C', 'U', 'Y', 'U', 'T', 'P', 'H', 'A', 'C', 'G', 'J', 'D', 'U'], ['P', 'M', 'G', 'P', 'I', 'T', 'Q', 'J', 'O', 'V', 'G', 'W', 'O', 'X', 'S', 'X'], ['D', 'W', 'S', 'F', 'C', 'M', 'L', 'F', 'E', 'C', 'R', 'R', 'M', 'X', 'D', 'N']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "LION SE @ (7,8)", "system": "[['O', 'Q', 'V', 'D', 'X', 'Q', 'Z', 'Z', 'N', 'Z', 'Z', 'T', 'K', 'O', 'L', 'B'], ['I', 'S', 'J', 'T', 'C', 'S', 'I', 'Q', 'M', 'N', 'X', 'D', 'Y', 'Q', 'H', 'M'], ['C', 'T', 'D', 'V', 'J', 'A', 'C', 'G', 'Q', 'G', 'T', 'Y', 'A', 'B', 'R', 'X'], ['A', 'R', 'C', 'Y', 'E', 'B', 'I', 'K', 'C', 'B', 'D', 'D', 'U', 'A', 'D', 'N'], ['P', 'M', 'V', 'F', 'O', 'V', 'Z', 'I', 'Q', 'N', 'L', 'C', 'N', 'N', 'E', 'I'], ['D', 'L', 'B', 'U', 'P', 'Z', 'P', 'L', 'P', 'R', 'Y', 'I', 'G', 'E', 'B', 'A'], ['C', 'N', 'M', 'U', 'L', 'F', 'J', 'E', 'Y', 'I', 'Y', 'Y', 'L', 'W', 'I', 'X'], ['I', 'U', 'D', 'D', 'A', 'C', 'L', 'B', 'W', 'U', 'F', 'G', 'V', 'Y', 'Z', 'G'], ['V', 'I', 'V', 'Y', 'M', 'B', 'Y', 'I', 'V', 'M', 'R', 'J', 'C', 'E', 'S', 'R'], ['Z', 'H', 'J', 'B', 'D', 'E', 'H', 'E', 'O', 'R', 'V', 'X', 'O', 'X', 'B', 'A'], ['K', 'E', 'Z', 'J', 'K', 'E', 'Q', 'X', 'O', 'N', 'I', 'G', 'V', 'Z', 'T', 'M'], ['K', 'O', 'T', 'H', 'E', 'D', 'L', 'Z', 'P', 'L', 'P', 'Q', 'I', 'Z', 'E', 'K'], ['N', 'F', 'B', 'V', 'G', 'P', 'T', 'F', 'V', 'A', 'X', 'E', 'L', 'T', 'A', 'M'], ['G', 'K', 'Q', 'C', 'U', 'Y', 'U', 'T', 'P', 'H', 'A', 'C', 'G', 'J', 'D', 'U'], ['P', 'M', 'G', 'P', 'I', 'T', 'Q', 'J', 'O', 'V', 'G', 'W', 'O', 'X', 'S', 'X'], ['D', 'W', 'S', 'F', 'C', 'M', 'L', 'F', 'E', 'C', 'R', 'R', 'M', 'X', 'D', 'N']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001252.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['P', 'X', 'O', 'X', 'N', 'W', 'H', 'O', 'L', 'E', 'M', 'T', 'P', 'Z', 'E', 'X'], ['O', 'F', 'N', 'V', 'V', 'I', 'F', 'D', 'P', 'E', 'E', 'V', 'L', 'V', 'Z', 'D'], ['T', 'O', 'L', 'H', 'J', 'K', 'A', 'I', 'K', 'W', 'K', 'P', 'R', 'V', 'I', 'R'], ['O', 'Y', 'Z', 'H', 'B', 'P', 'X', 'O', 'D', 'Z', 'O', 'R', 'M', 'G', 'K', 'A'], ['Z', 'C', 'X', 'X', 'T', 'G', 'S', 'J', 'U', 'R', 'J', 'N', 'M', 'F', 'R', 'Y'], ['H', 'K', 'D', 'P', 'Q', 'D', 'A', 'J', 'R', 'Z', 'N', 'L', 'N', 'H', 'X', 'R'], ['Y', 'G', 'V', 'L', 'J', 'E', 'G', 'O', 'B', 'H', 'F', 'Q', 'R', 'X', 'E', 'A'], ['Q', 'V', 'L', 'L', 'T', 'T', 'I', 'G', 'E', 'R', 'Z', 'K', 'P', 'Z', 'M', 'C'], ['I', 'I', 'S', 'S', 'J', 'T', 'H', 'B', 'Q', 'G', 'V', 'J', 'A', 'Y', 'Z', 'O'], ['Y', 'G', 'J', 'R', 'H', 'A', 'G', 'J', 'N', 'O', 'H', 'X', 'O', 'Q', 'P', 'U'], ['W', 'T', 'H', 'C', 'D', 'N', 'I', 'B', 'C', 'M', 'E', 'L', 'W', 'E', 'H', 'O'], ['H', 'E', 'M', 'I', 'V', 'X', 'D', 'E', 'G', 'X', 'K', 'M', 'K', 'B', 'G', 'I'], ['V', 'X', 'X', 'G', 'U', 'E', 'X', 'N', 'R', 'Z', 'H', 'H', 'Q', 'F', 'X', 'Q'], ['Z', 'W', 'H', 'C', 'C', 'Q', 'X', 'I', 'J', 'N', 'X', 'M', 'Q', 'W', 'W', 'Q'], ['Y', 'C', 'V', 'O', 'B', 'F', 'H', 'Y', 'F', 'S', 'D', 'X', 'A', 'A', 'X', 'O'], ['W', 'T', 'D', 'Z', 'U', 'R', 'A', 'L', 'Z', 'L', 'E', 'H', 'J', 'N', 'T', 'F']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "TIGER E @ (6,8)", "system": "[['P', 'X', 'O', 'X', 'N', 'W', 'H', 'O', 'L', 'E', 'M', 'T', 'P', 'Z', 'E', 'X'], ['O', 'F', 'N', 'V', 'V', 'I', 'F', 'D', 'P', 'E', 'E', 'V', 'L', 'V', 'Z', 'D'], ['T', 'O', 'L', 'H', 'J', 'K', 'A', 'I', 'K', 'W', 'K', 'P', 'R', 'V', 'I', 'R'], ['O', 'Y', 'Z', 'H', 'B', 'P', 'X', 'O', 'D', 'Z', 'O', 'R', 'M', 'G', 'K', 'A'], ['Z', 'C', 'X', 'X', 'T', 'G', 'S', 'J', 'U', 'R', 'J', 'N', 'M', 'F', 'R', 'Y'], ['H', 'K', 'D', 'P', 'Q', 'D', 'A', 'J', 'R', 'Z', 'N', 'L', 'N', 'H', 'X', 'R'], ['Y', 'G', 'V', 'L', 'J', 'E', 'G', 'O', 'B', 'H', 'F', 'Q', 'R', 'X', 'E', 'A'], ['Q', 'V', 'L', 'L', 'T', 'T', 'I', 'G', 'E', 'R', 'Z', 'K', 'P', 'Z', 'M', 'C'], ['I', 'I', 'S', 'S', 'J', 'T', 'H', 'B', 'Q', 'G', 'V', 'J', 'A', 'Y', 'Z', 'O'], ['Y', 'G', 'J', 'R', 'H', 'A', 'G', 'J', 'N', 'O', 'H', 'X', 'O', 'Q', 'P', 'U'], ['W', 'T', 'H', 'C', 'D', 'N', 'I', 'B', 'C', 'M', 'E', 'L', 'W', 'E', 'H', 'O'], ['H', 'E', 'M', 'I', 'V', 'X', 'D', 'E', 'G', 'X', 'K', 'M', 'K', 'B', 'G', 'I'], ['V', 'X', 'X', 'G', 'U', 'E', 'X', 'N', 'R', 'Z', 'H', 'H', 'Q', 'F', 'X', 'Q'], ['Z', 'W', 'H', 'C', 'C', 'Q', 'X', 'I', 'J', 'N', 'X', 'M', 'Q', 'W', 'W', 'Q'], ['Y', 'C', 'V', 'O', 'B', 'F', 'H', 'Y', 'F', 'S', 'D', 'X', 'A', 'A', 'X', 'O'], ['W', 'T', 'D', 'Z', 'U', 'R', 'A', 'L', 'Z', 'L', 'E', 'H', 'J', 'N', 'T', 'F']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001253.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 16x16 grid.\\n[['M', 'H', 'T', 'N', 'P', 'S', 'H', 'W', 'D', 'D', 'W', 'F', 'W', 'E', 'C', 'U'], ['E', 'T', 'P', 'D', 'O', 'Y', 'E', 'Q', 'C', 'L', 'B', 'L', 'M', 'B', 'D', 'T'], ['T', 'C', 'Z', 'F', 'L', 'G', 'K', 'L', 'M', 'S', 'D', 'N', 'K', 'L', 'F', 'P'], ['G', 'I', 'P', 'T', 'A', 'J', 'M', 'X', 'E', 'Q', 'O', 'F', 'I', 'W', 'B', 'R'], ['A', 'G', 'W', 'E', 'O', 'Z', 'B', 'C', 'F', 'P', 'P', 'B', 'H', 'G', 'N', 'L'], ['O', 'D', 'Z', 'R', 'T', 'S', 'V', 'B', 'E', 'P', 'H', 'O', 'B', 'X', 'V', 'N'], ['I', 'K', 'U', 'M', 'H', 'O', 'J', 'C', 'W', 'I', 'U', 'A', 'K', 'W', 'F', 'S'], ['W', 'U', 'Q', 'J', 'F', 'J', 'Q', 'J', 'S', 'J', 'I', 'D', 'N', 'B', 'D', 'Y'], ['F', 'B', 'O', 'C', 'A', 'F', 'V', 'U', 'G', 'O', 'I', 'J', 'V', 'T', 'I', 'Z'], ['E', 'R', 'G', 'D', 'G', 'N', 'A', 'E', 'R', 'L', 'D', 'B', 'X', 'A', 'C', 'H'], ['R', 'E', 'F', 'V', 'W', 'Y', 'D', 'Q', 'O', 'R', 'J', 'E', 'S', 'Q', 'L', 'P'], ['M', 'G', 'Q', 'V', 'R', 'B', 'I', 'I', 'O', 'O', 'E', 'M', 'W', 'F', 'E', 'V'], ['Y', 'G', 'Z', 'H', 'L', 'O', 'V', 'A', 'U', 'W', 'Z', 'U', 'N', 'K', 'W', 'T'], ['Z', 'K', 'T', 'Y', 'O', 'T', 'H', 'B', 'C', 'W', 'P', 'B', 'B', 'W', 'H', 'F'], ['Q', 'J', 'U', 'Y', 'V', 'E', 'B', 'K', 'V', 'S', 'U', 'M', 'Z', 'G', 'V', 'V'], ['J', 'S', 'E', 'A', 'L', 'F', 'J', 'F', 'F', 'X', 'O', 'O', 'X', 'B', 'C', 'I']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "ELEPHANT SE @ (7,2)", "system": "[['M', 'H', 'T', 'N', 'P', 'S', 'H', 'W', 'D', 'D', 'W', 'F', 'W', 'E', 'C', 'U'], ['E', 'T', 'P', 'D', 'O', 'Y', 'E', 'Q', 'C', 'L', 'B', 'L', 'M', 'B', 'D', 'T'], ['T', 'C', 'Z', 'F', 'L', 'G', 'K', 'L', 'M', 'S', 'D', 'N', 'K', 'L', 'F', 'P'], ['G', 'I', 'P', 'T', 'A', 'J', 'M', 'X', 'E', 'Q', 'O', 'F', 'I', 'W', 'B', 'R'], ['A', 'G', 'W', 'E', 'O', 'Z', 'B', 'C', 'F', 'P', 'P', 'B', 'H', 'G', 'N', 'L'], ['O', 'D', 'Z', 'R', 'T', 'S', 'V', 'B', 'E', 'P', 'H', 'O', 'B', 'X', 'V', 'N'], ['I', 'K', 'U', 'M', 'H', 'O', 'J', 'C', 'W', 'I', 'U', 'A', 'K', 'W', 'F', 'S'], ['W', 'U', 'Q', 'J', 'F', 'J', 'Q', 'J', 'S', 'J', 'I', 'D', 'N', 'B', 'D', 'Y'], ['F', 'B', 'O', 'C', 'A', 'F', 'V', 'U', 'G', 'O', 'I', 'J', 'V', 'T', 'I', 'Z'], ['E', 'R', 'G', 'D', 'G', 'N', 'A', 'E', 'R', 'L', 'D', 'B', 'X', 'A', 'C', 'H'], ['R', 'E', 'F', 'V', 'W', 'Y', 'D', 'Q', 'O', 'R', 'J', 'E', 'S', 'Q', 'L', 'P'], ['M', 'G', 'Q', 'V', 'R', 'B', 'I', 'I', 'O', 'O', 'E', 'M', 'W', 'F', 'E', 'V'], ['Y', 'G', 'Z', 'H', 'L', 'O', 'V', 'A', 'U', 'W', 'Z', 'U', 'N', 'K', 'W', 'T'], ['Z', 'K', 'T', 'Y', 'O', 'T', 'H', 'B', 'C', 'W', 'P', 'B', 'B', 'W', 'H', 'F'], ['Q', 'J', 'U', 'Y', 'V', 'E', 'B', 'K', 'V', 'S', 'U', 'M', 'Z', 'G', 'V', 'V'], ['J', 'S', 'E', 'A', 'L', 'F', 'J', 'F', 'F', 'X', 'O', 'O', 'X', 'B', 'C', 'I']]", "category": "wordsearch", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001254.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['Y', 'B', 'W', 'A', 'E', 'U', 'S', 'K', 'E', 'H', 'P', 'M', 'R', 'Y', 'L', 'Y', 'J', 'R', 'C', 'U'], ['W', 'U', 'W', 'Q', 'N', 'Q', 'X', 'O', 'U', 'K', 'V', 'F', 'X', 'C', 'R', 'Y', 'G', 'F', 'T', 'C'], ['V', 'Z', 'K', 'V', 'C', 'A', 'B', 'S', 'Z', 'R', 'I', 'T', 'P', 'H', 'S', 'B', 'G', 'L', 'Y', 'Z'], ['B', 'S', 'M', 'S', 'T', 'O', 'W', 'S', 'Z', 'Y', 'A', 'U', 'W', 'Z', 'V', 'T', 'S', 'T', 'Y', 'A'], ['B', 'O', 'U', 'E', 'O', 'Y', 'U', 'E', 'T', 'O', 'Q', 'Y', 'W', 'T', 'Z', 'Y', 'V', 'U', 'I', 'H'], ['H', 'W', 'D', 'H', 'Q', 'U', 'K', 'E', 'G', 'I', 'F', 'Y', 'W', 'K', 'P', 'A', 'O', 'U', 'J', 'U'], ['X', 'V', 'X', 'R', 'F', 'Z', 'N', 'Q', 'B', 'K', 'G', 'V', 'F', 'D', 'F', 'T', 'I', 'H', 'K', 'B'], ['E', 'J', 'R', 'O', 'V', 'S', 'V', 'Z', 'A', 'A', 'P', 'N', 'S', 'S', 'W', 'H', 'R', 'S', 'M', 'T'], ['J', 'X', 'E', 'F', 'O', 'W', 'P', 'O', 'V', 'Z', 'S', 'Z', 'I', 'B', 'B', 'E', 'F', 'O', 'G', 'T'], ['F', 'W', 'N', 'M', 'M', 'W', 'C', 'L', 'G', 'J', 'X', 'N', 'V', 'A', 'V', 'W', 'W', 'G', 'M', 'W'], ['J', 'P', 'W', 'H', 'K', 'A', 'Z', 'G', 'Y', 'B', 'D', 'X', 'B', 'I', 'L', 'L', 'H', 'N', 'F', 'M'], ['M', 'C', 'J', 'T', 'J', 'H', 'M', 'N', 'A', 'G', 'I', 'P', 'P', 'F', 'L', 'U', 'F', 'L', 'J', 'E'], ['A', 'R', 'H', 'Z', 'G', 'G', 'P', 'A', 'L', 'J', 'Z', 'G', 'L', 'U', 'B', 'B', 'Z', 'P', 'Z', 'W'], ['X', 'I', 'N', 'E', 'Q', 'S', 'A', 'T', 'L', 'X', 'R', 'I', 'A', 'V', 'K', 'S', 'K', 'W', 'K', 'T'], ['O', 'W', 'M', 'N', 'K', 'C', 'P', 'S', 'C', 'Q', 'S', 'C', 'F', 'V', 'P', 'F', 'B', 'W', 'Q', 'T'], ['S', 'N', 'O', 'C', 'T', 'U', 'F', 'Y', 'K', 'T', 'B', 'O', 'U', 'E', 'T', 'Y', 'M', 'N', 'O', 'T'], ['K', 'C', 'B', 'D', 'U', 'Z', 'X', 'B', 'X', 'T', 'Q', 'B', 'C', 'E', 'N', 'Q', 'B', 'Z', 'Z', 'J'], ['Z', 'J', 'A', 'W', 'S', 'B', 'F', 'U', 'R', 'M', 'T', 'T', 'A', 'A', 'Z', 'X', 'I', 'W', 'O', 'P'], ['V', 'V', 'E', 'M', 'H', 'H', 'A', 'A', 'E', 'H', 'U', 'G', 'C', 'F', 'H', 'I', 'U', 'Q', 'K', 'L'], ['I', 'F', 'P', 'L', 'U', 'V', 'Y', 'H', 'K', 'R', 'U', 'X', 'U', 'D', 'O', 'P', 'I', 'P', 'D', 'F']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "GOAT NE @ (9,6)", "system": "[['Y', 'B', 'W', 'A', 'E', 'U', 'S', 'K', 'E', 'H', 'P', 'M', 'R', 'Y', 'L', 'Y', 'J', 'R', 'C', 'U'], ['W', 'U', 'W', 'Q', 'N', 'Q', 'X', 'O', 'U', 'K', 'V', 'F', 'X', 'C', 'R', 'Y', 'G', 'F', 'T', 'C'], ['V', 'Z', 'K', 'V', 'C', 'A', 'B', 'S', 'Z', 'R', 'I', 'T', 'P', 'H', 'S', 'B', 'G', 'L', 'Y', 'Z'], ['B', 'S', 'M', 'S', 'T', 'O', 'W', 'S', 'Z', 'Y', 'A', 'U', 'W', 'Z', 'V', 'T', 'S', 'T', 'Y', 'A'], ['B', 'O', 'U', 'E', 'O', 'Y', 'U', 'E', 'T', 'O', 'Q', 'Y', 'W', 'T', 'Z', 'Y', 'V', 'U', 'I', 'H'], ['H', 'W', 'D', 'H', 'Q', 'U', 'K', 'E', 'G', 'I', 'F', 'Y', 'W', 'K', 'P', 'A', 'O', 'U', 'J', 'U'], ['X', 'V', 'X', 'R', 'F', 'Z', 'N', 'Q', 'B', 'K', 'G', 'V', 'F', 'D', 'F', 'T', 'I', 'H', 'K', 'B'], ['E', 'J', 'R', 'O', 'V', 'S', 'V', 'Z', 'A', 'A', 'P', 'N', 'S', 'S', 'W', 'H', 'R', 'S', 'M', 'T'], ['J', 'X', 'E', 'F', 'O', 'W', 'P', 'O', 'V', 'Z', 'S', 'Z', 'I', 'B', 'B', 'E', 'F', 'O', 'G', 'T'], ['F', 'W', 'N', 'M', 'M', 'W', 'C', 'L', 'G', 'J', 'X', 'N', 'V', 'A', 'V', 'W', 'W', 'G', 'M', 'W'], ['J', 'P', 'W', 'H', 'K', 'A', 'Z', 'G', 'Y', 'B', 'D', 'X', 'B', 'I', 'L', 'L', 'H', 'N', 'F', 'M'], ['M', 'C', 'J', 'T', 'J', 'H', 'M', 'N', 'A', 'G', 'I', 'P', 'P', 'F', 'L', 'U', 'F', 'L', 'J', 'E'], ['A', 'R', 'H', 'Z', 'G', 'G', 'P', 'A', 'L', 'J', 'Z', 'G', 'L', 'U', 'B', 'B', 'Z', 'P', 'Z', 'W'], ['X', 'I', 'N', 'E', 'Q', 'S', 'A', 'T', 'L', 'X', 'R', 'I', 'A', 'V', 'K', 'S', 'K', 'W', 'K', 'T'], ['O', 'W', 'M', 'N', 'K', 'C', 'P', 'S', 'C', 'Q', 'S', 'C', 'F', 'V', 'P', 'F', 'B', 'W', 'Q', 'T'], ['S', 'N', 'O', 'C', 'T', 'U', 'F', 'Y', 'K', 'T', 'B', 'O', 'U', 'E', 'T', 'Y', 'M', 'N', 'O', 'T'], ['K', 'C', 'B', 'D', 'U', 'Z', 'X', 'B', 'X', 'T', 'Q', 'B', 'C', 'E', 'N', 'Q', 'B', 'Z', 'Z', 'J'], ['Z', 'J', 'A', 'W', 'S', 'B', 'F', 'U', 'R', 'M', 'T', 'T', 'A', 'A', 'Z', 'X', 'I', 'W', 'O', 'P'], ['V', 'V', 'E', 'M', 'H', 'H', 'A', 'A', 'E', 'H', 'U', 'G', 'C', 'F', 'H', 'I', 'U', 'Q', 'K', 'L'], ['I', 'F', 'P', 'L', 'U', 'V', 'Y', 'H', 'K', 'R', 'U', 'X', 'U', 'D', 'O', 'P', 'I', 'P', 'D', 'F']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001255.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['E', 'B', 'W', 'W', 'Y', 'M', 'X', 'T', 'A', 'W', 'S', 'X', 'K', 'V', 'J', 'J', 'X', 'K', 'T', 'A'], ['G', 'H', 'O', 'T', 'N', 'G', 'P', 'N', 'R', 'S', 'Z', 'I', 'X', 'A', 'W', 'E', 'U', 'O', 'M', 'T'], ['O', 'B', 'M', 'L', 'O', 'O', 'C', 'S', 'G', 'L', 'B', 'K', 'T', 'I', 'M', 'I', 'E', 'M', 'O', 'L'], ['B', 'W', 'N', 'B', 'Z', 'E', 'T', 'G', 'H', 'O', 'P', 'M', 'Q', 'G', 'T', 'W', 'E', 'W', 'C', 'T'], ['D', 'F', 'W', 'N', 'B', 'P', 'P', 'B', 'O', 'K', 'Z', 'X', 'X', 'X', 'I', 'T', 'U', 'T', 'D', 'D'], ['H', 'B', 'L', 'V', 'F', 'W', 'H', 'G', 'M', 'D', 'W', 'J', 'R', 'K', 'I', 'A', 'H', 'M', 'Q', 'J'], ['Q', 'J', 'F', 'S', 'M', 'B', 'X', 'I', 'O', 'I', 'O', 'I', 'T', 'Q', 'F', 'O', 'O', 'G', 'N', 'J'], ['H', 'I', 'K', 'V', 'R', 'R', 'N', 'V', 'J', 'C', 'Z', 'N', 'A', 'O', 'Z', 'S', 'B', 'D', 'Y', 'R'], ['Y', 'V', 'S', 'P', 'X', 'N', 'J', 'G', 'J', 'Q', 'F', 'A', 'Q', 'Q', 'M', 'N', 'Y', 'R', 'J', 'V'], ['T', 'T', 'Z', 'B', 'J', 'R', 'F', 'M', 'D', 'I', 'Q', 'T', 'G', 'P', 'K', 'R', 'N', 'G', 'X', 'D'], ['C', 'Q', 'K', 'Q', 'O', 'G', 'P', 'F', 'R', 'B', 'W', 'K', 'L', 'T', 'A', 'G', 'Z', 'C', 'E', 'D'], ['K', 'B', 'I', 'H', 'I', 'V', 'X', 'W', 'D', 'T', 'I', 'Q', 'X', 'Y', 'C', 'G', 'N', 'K', 'Q', 'N'], ['B', 'E', 'K', 'B', 'Z', 'F', 'S', 'M', 'O', 'X', 'T', 'A', 'F', 'Y', 'J', 'O', 'S', 'M', 'T', 'B'], ['T', 'I', 'X', 'C', 'C', 'A', 'A', 'H', 'L', 'N', 'K', 'F', 'S', 'E', 'I', 'Z', 'A', 'D', 'W', 'B'], ['A', 'S', 'J', 'T', 'R', 'H', 'P', 'E', 'E', 'L', 'M', 'R', 'K', 'D', 'S', 'T', 'Z', 'L', 'U', 'H'], ['K', 'I', 'Q', 'Z', 'Y', 'L', 'P', 'O', 'V', 'E', 'E', 'Z', 'Z', 'Z', 'L', 'H', 'S', 'Y', 'O', 'U'], ['N', 'U', 'R', 'J', 'Z', 'S', 'U', 'B', 'F', 'T', 'P', 'H', 'U', 'W', 'A', 'M', 'H', 'I', 'J', 'U'], ['Y', 'R', 'M', 'C', 'N', 'X', 'K', 'W', 'H', 'N', 'G', 'N', 'F', 'Z', 'A', 'V', 'J', 'N', 'M', 'H'], ['G', 'Z', 'A', 'M', 'F', 'S', 'S', 'X', 'O', 'N', 'R', 'Q', 'I', 'G', 'A', 'E', 'J', 'A', 'K', 'X'], ['R', 'H', 'H', 'K', 'G', 'U', 'V', 'Q', 'L', 'F', 'V', 'C', 'K', 'H', 'C', 'M', 'Y', 'D', 'B', 'R']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "SHEEP SE @ (7,13)", "system": "[['E', 'B', 'W', 'W', 'Y', 'M', 'X', 'T', 'A', 'W', 'S', 'X', 'K', 'V', 'J', 'J', 'X', 'K', 'T', 'A'], ['G', 'H', 'O', 'T', 'N', 'G', 'P', 'N', 'R', 'S', 'Z', 'I', 'X', 'A', 'W', 'E', 'U', 'O', 'M', 'T'], ['O', 'B', 'M', 'L', 'O', 'O', 'C', 'S', 'G', 'L', 'B', 'K', 'T', 'I', 'M', 'I', 'E', 'M', 'O', 'L'], ['B', 'W', 'N', 'B', 'Z', 'E', 'T', 'G', 'H', 'O', 'P', 'M', 'Q', 'G', 'T', 'W', 'E', 'W', 'C', 'T'], ['D', 'F', 'W', 'N', 'B', 'P', 'P', 'B', 'O', 'K', 'Z', 'X', 'X', 'X', 'I', 'T', 'U', 'T', 'D', 'D'], ['H', 'B', 'L', 'V', 'F', 'W', 'H', 'G', 'M', 'D', 'W', 'J', 'R', 'K', 'I', 'A', 'H', 'M', 'Q', 'J'], ['Q', 'J', 'F', 'S', 'M', 'B', 'X', 'I', 'O', 'I', 'O', 'I', 'T', 'Q', 'F', 'O', 'O', 'G', 'N', 'J'], ['H', 'I', 'K', 'V', 'R', 'R', 'N', 'V', 'J', 'C', 'Z', 'N', 'A', 'O', 'Z', 'S', 'B', 'D', 'Y', 'R'], ['Y', 'V', 'S', 'P', 'X', 'N', 'J', 'G', 'J', 'Q', 'F', 'A', 'Q', 'Q', 'M', 'N', 'Y', 'R', 'J', 'V'], ['T', 'T', 'Z', 'B', 'J', 'R', 'F', 'M', 'D', 'I', 'Q', 'T', 'G', 'P', 'K', 'R', 'N', 'G', 'X', 'D'], ['C', 'Q', 'K', 'Q', 'O', 'G', 'P', 'F', 'R', 'B', 'W', 'K', 'L', 'T', 'A', 'G', 'Z', 'C', 'E', 'D'], ['K', 'B', 'I', 'H', 'I', 'V', 'X', 'W', 'D', 'T', 'I', 'Q', 'X', 'Y', 'C', 'G', 'N', 'K', 'Q', 'N'], ['B', 'E', 'K', 'B', 'Z', 'F', 'S', 'M', 'O', 'X', 'T', 'A', 'F', 'Y', 'J', 'O', 'S', 'M', 'T', 'B'], ['T', 'I', 'X', 'C', 'C', 'A', 'A', 'H', 'L', 'N', 'K', 'F', 'S', 'E', 'I', 'Z', 'A', 'D', 'W', 'B'], ['A', 'S', 'J', 'T', 'R', 'H', 'P', 'E', 'E', 'L', 'M', 'R', 'K', 'D', 'S', 'T', 'Z', 'L', 'U', 'H'], ['K', 'I', 'Q', 'Z', 'Y', 'L', 'P', 'O', 'V', 'E', 'E', 'Z', 'Z', 'Z', 'L', 'H', 'S', 'Y', 'O', 'U'], ['N', 'U', 'R', 'J', 'Z', 'S', 'U', 'B', 'F', 'T', 'P', 'H', 'U', 'W', 'A', 'M', 'H', 'I', 'J', 'U'], ['Y', 'R', 'M', 'C', 'N', 'X', 'K', 'W', 'H', 'N', 'G', 'N', 'F', 'Z', 'A', 'V', 'J', 'N', 'M', 'H'], ['G', 'Z', 'A', 'M', 'F', 'S', 'S', 'X', 'O', 'N', 'R', 'Q', 'I', 'G', 'A', 'E', 'J', 'A', 'K', 'X'], ['R', 'H', 'H', 'K', 'G', 'U', 'V', 'Q', 'L', 'F', 'V', 'C', 'K', 'H', 'C', 'M', 'Y', 'D', 'B', 'R']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001256.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['P', 'U', 'T', 'K', 'R', 'E', 'A', 'A', 'B', 'J', 'C', 'V', 'M', 'C', 'R', 'W', 'J', 'F', 'X', 'T'], ['U', 'N', 'B', 'W', 'C', 'T', 'M', 'H', 'J', 'J', 'G', 'V', 'I', 'D', 'O', 'H', 'T', 'V', 'W', 'W'], ['P', 'O', 'H', 'H', 'Z', 'F', 'O', 'P', 'S', 'E', 'X', 'G', 'X', 'G', 'I', 'W', 'I', 'L', 'T', 'W'], ['W', 'Z', 'S', 'R', 'E', 'U', 'L', 'E', 'O', 'A', 'R', 'R', 'B', 'S', 'D', 'E', 'K', 'B', 'T', 'R'], ['F', 'X', 'O', 'N', 'D', 'A', 'A', 'T', 'N', 'A', 'H', 'S', 'C', 'G', 'T', 'O', 'F', 'H', 'F', 'U'], ['U', 'M', 'O', 'T', 'L', 'V', 'F', 'S', 'Q', 'C', 'R', 'Q', 'V', 'Y', 'F', 'E', 'U', 'N', 'U', 'L'], ['I', 'Z', 'W', 'V', 'S', 'W', 'V', 'E', 'P', 'J', 'P', 'T', 'C', 'C', 'I', 'S', 'O', 'S', 'W', 'P'], ['T', 'H', 'P', 'O', 'S', 'Q', 'Z', 'W', 'O', 'L', 'N', 'P', 'C', 'W', 'J', 'V', 'Y', 'F', 'W', 'F'], ['S', 'O', 'F', 'W', 'I', 'S', 'M', 'M', 'Y', 'I', 'K', 'U', 'C', 'N', 'C', 'S', 'G', 'J', 'K', 'Q'], ['V', 'D', 'Z', 'W', 'N', 'R', 'H', 'T', 'Q', 'K', 'J', 'T', 'V', 'H', 'I', 'C', 'Z', 'H', 'U', 'K'], ['P', 'X', 'X', 'J', 'V', 'L', 'E', 'C', 'M', 'O', 'V', 'X', 'L', 'D', 'N', 'P', 'W', 'H', 'J', 'E'], ['L', 'Y', 'S', 'K', 'O', 'V', 'Y', 'F', 'F', 'T', 'W', 'A', 'U', 'G', 'Y', 'V', 'A', 'F', 'C', 'S'], ['D', 'P', 'D', 'U', 'T', 'P', 'M', 'J', 'H', 'R', 'N', 'V', 'Z', 'L', 'P', 'C', 'O', 'N', 'D', 'E'], ['M', 'R', 'A', 'Y', 'L', 'F', 'M', 'L', 'X', 'M', 'M', 'Y', 'Q', 'X', 'L', 'H', 'F', 'P', 'P', 'A'], ['G', 'O', 'R', 'Y', 'X', 'D', 'W', 'J', 'J', 'P', 'K', 'S', 'U', 'M', 'C', 'Q', 'C', 'D', 'R', 'R'], ['H', 'Q', 'R', 'Y', 'K', 'Y', 'K', 'S', 'B', 'E', 'J', 'A', 'U', 'A', 'V', 'X', 'U', 'S', 'I', 'H'], ['I', 'O', 'C', 'M', 'U', 'X', 'I', 'N', 'N', 'Z', 'A', 'Q', 'K', 'E', 'J', 'M', 'J', 'E', 'T', 'D'], ['V', 'V', 'E', 'C', 'R', 'L', 'F', 'C', 'F', 'N', 'M', 'D', 'P', 'M', 'B', 'G', 'I', 'N', 'R', 'U'], ['Y', 'H', 'H', 'S', 'M', 'R', 'X', 'V', 'X', 'U', 'F', 'J', 'N', 'L', 'L', 'V', 'Y', 'S', 'I', 'E'], ['F', 'R', 'I', 'X', 'O', 'O', 'G', 'L', 'V', 'V', 'D', 'B', 'S', 'Y', 'W', 'Z', 'K', 'G', 'I', 'V']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "COW SE @ (14,1)", "system": "[['P', 'U', 'T', 'K', 'R', 'E', 'A', 'A', 'B', 'J', 'C', 'V', 'M', 'C', 'R', 'W', 'J', 'F', 'X', 'T'], ['U', 'N', 'B', 'W', 'C', 'T', 'M', 'H', 'J', 'J', 'G', 'V', 'I', 'D', 'O', 'H', 'T', 'V', 'W', 'W'], ['P', 'O', 'H', 'H', 'Z', 'F', 'O', 'P', 'S', 'E', 'X', 'G', 'X', 'G', 'I', 'W', 'I', 'L', 'T', 'W'], ['W', 'Z', 'S', 'R', 'E', 'U', 'L', 'E', 'O', 'A', 'R', 'R', 'B', 'S', 'D', 'E', 'K', 'B', 'T', 'R'], ['F', 'X', 'O', 'N', 'D', 'A', 'A', 'T', 'N', 'A', 'H', 'S', 'C', 'G', 'T', 'O', 'F', 'H', 'F', 'U'], ['U', 'M', 'O', 'T', 'L', 'V', 'F', 'S', 'Q', 'C', 'R', 'Q', 'V', 'Y', 'F', 'E', 'U', 'N', 'U', 'L'], ['I', 'Z', 'W', 'V', 'S', 'W', 'V', 'E', 'P', 'J', 'P', 'T', 'C', 'C', 'I', 'S', 'O', 'S', 'W', 'P'], ['T', 'H', 'P', 'O', 'S', 'Q', 'Z', 'W', 'O', 'L', 'N', 'P', 'C', 'W', 'J', 'V', 'Y', 'F', 'W', 'F'], ['S', 'O', 'F', 'W', 'I', 'S', 'M', 'M', 'Y', 'I', 'K', 'U', 'C', 'N', 'C', 'S', 'G', 'J', 'K', 'Q'], ['V', 'D', 'Z', 'W', 'N', 'R', 'H', 'T', 'Q', 'K', 'J', 'T', 'V', 'H', 'I', 'C', 'Z', 'H', 'U', 'K'], ['P', 'X', 'X', 'J', 'V', 'L', 'E', 'C', 'M', 'O', 'V', 'X', 'L', 'D', 'N', 'P', 'W', 'H', 'J', 'E'], ['L', 'Y', 'S', 'K', 'O', 'V', 'Y', 'F', 'F', 'T', 'W', 'A', 'U', 'G', 'Y', 'V', 'A', 'F', 'C', 'S'], ['D', 'P', 'D', 'U', 'T', 'P', 'M', 'J', 'H', 'R', 'N', 'V', 'Z', 'L', 'P', 'C', 'O', 'N', 'D', 'E'], ['M', 'R', 'A', 'Y', 'L', 'F', 'M', 'L', 'X', 'M', 'M', 'Y', 'Q', 'X', 'L', 'H', 'F', 'P', 'P', 'A'], ['G', 'O', 'R', 'Y', 'X', 'D', 'W', 'J', 'J', 'P', 'K', 'S', 'U', 'M', 'C', 'Q', 'C', 'D', 'R', 'R'], ['H', 'Q', 'R', 'Y', 'K', 'Y', 'K', 'S', 'B', 'E', 'J', 'A', 'U', 'A', 'V', 'X', 'U', 'S', 'I', 'H'], ['I', 'O', 'C', 'M', 'U', 'X', 'I', 'N', 'N', 'Z', 'A', 'Q', 'K', 'E', 'J', 'M', 'J', 'E', 'T', 'D'], ['V', 'V', 'E', 'C', 'R', 'L', 'F', 'C', 'F', 'N', 'M', 'D', 'P', 'M', 'B', 'G', 'I', 'N', 'R', 'U'], ['Y', 'H', 'H', 'S', 'M', 'R', 'X', 'V', 'X', 'U', 'F', 'J', 'N', 'L', 'L', 'V', 'Y', 'S', 'I', 'E'], ['F', 'R', 'I', 'X', 'O', 'O', 'G', 'L', 'V', 'V', 'D', 'B', 'S', 'Y', 'W', 'Z', 'K', 'G', 'I', 'V']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001257.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['I', 'F', 'M', 'L', 'W', 'E', 'T', 'M', 'U', 'W', 'Q', 'H', 'H', 'M', 'C', 'K', 'S', 'W', 'W', 'K'], ['P', 'F', 'W', 'X', 'L', 'C', 'D', 'R', 'T', 'K', 'B', 'T', 'N', 'I', 'I', 'O', 'M', 'H', 'C', 'S'], ['U', 'K', 'Z', 'S', 'S', 'K', 'D', 'F', 'I', 'G', 'H', 'H', 'J', 'K', 'I', 'C', 'Z', 'Y', 'D', 'N'], ['Q', 'P', 'W', 'P', 'O', 'K', 'S', 'H', 'A', 'A', 'A', 'Q', 'A', 'S', 'W', 'O', 'A', 'N', 'S', 'S'], ['I', 'O', 'R', 'I', 'N', 'A', 'I', 'Y', 'O', 'K', 'A', 'K', 'E', 'L', 'H', 'M', 'W', 'F', 'U', 'X'], ['D', 'N', 'A', 'Q', 'T', 'G', 'C', 'L', 'K', 'V', 'N', 'V', 'Y', 'S', 'U', 'P', 'S', 'X', 'W', 'F'], ['H', 'Z', 'C', 'W', 'N', 'B', 'E', 'D', 'S', 'Q', 'X', 'X', 'G', 'P', 'L', 'E', 'G', 'O', 'Y', 'G'], ['X', 'V', 'M', 'Y', 'F', 'N', 'G', 'K', 'F', 'V', 'U', 'C', 'T', 'A', 'D', 'N', 'I', 'G', 'O', 'R'], ['P', 'T', 'H', 'H', 'Y', 'Z', 'J', 'P', 'G', 'J', 'U', 'C', 'G', 'T', 'U', 'K', 'Z', 'X', 'J', 'E'], ['G', 'P', 'B', 'F', 'T', 'D', 'Y', 'H', 'I', 'F', 'A', 'D', 'G', 'P', 'A', 'B', 'Y', 'R', 'G', 'B'], ['X', 'U', 'Z', 'T', 'K', 'V', 'I', 'Q', 'R', 'I', 'L', 'M', 'B', 'F', 'U', 'M', 'J', 'W', 'B', 'F'], ['P', 'S', 'H', 'C', 'Q', 'Q', 'K', 'L', 'L', 'U', 'U', 'W', 'H', 'H', 'N', 'A', 'P', 'J', 'L', 'Z'], ['I', 'J', 'J', 'W', 'H', 'A', 'F', 'F', 'H', 'Z', 'D', 'C', 'E', 'O', 'I', 'D', 'M', 'J', 'K', 'H'], ['A', 'S', 'T', 'A', 'Q', 'O', 'Q', 'Y', 'G', 'O', 'B', 'G', 'I', 'I', 'V', 'B', 'H', 'P', 'K', 'F'], ['W', 'O', 'D', 'F', 'E', 'Z', 'K', 'I', 'Z', 'K', 'U', 'L', 'V', 'R', 'F', 'U', 'U', 'W', 'K', 'J'], ['C', 'T', 'O', 'W', 'X', 'I', 'Z', 'V', 'I', 'X', 'K', 'N', 'V', 'U', 'T', 'I', 'G', 'J', 'D', 'G'], ['N', 'R', 'Z', 'S', 'V', 'P', 'I', 'E', 'P', 'K', 'R', 'Q', 'T', 'Y', 'F', 'O', 'S', 'B', 'B', 'E'], ['I', 'U', 'K', 'R', 'W', 'C', 'Z', 'G', 'V', 'O', 'C', 'W', 'G', 'J', 'N', 'O', 'F', 'K', 'N', 'I'], ['H', 'R', 'Y', 'R', 'A', 'W', 'U', 'B', 'M', 'E', 'Q', 'W', 'X', 'I', 'E', 'O', 'D', 'S', 'E', 'W'], ['P', 'R', 'A', 'Q', 'T', 'Q', 'L', 'G', 'P', 'E', 'X', 'U', 'P', 'S', 'K', 'Q', 'F', 'C', 'E', 'H']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "LION NE @ (12,15)", "system": "[['I', 'F', 'M', 'L', 'W', 'E', 'T', 'M', 'U', 'W', 'Q', 'H', 'H', 'M', 'C', 'K', 'S', 'W', 'W', 'K'], ['P', 'F', 'W', 'X', 'L', 'C', 'D', 'R', 'T', 'K', 'B', 'T', 'N', 'I', 'I', 'O', 'M', 'H', 'C', 'S'], ['U', 'K', 'Z', 'S', 'S', 'K', 'D', 'F', 'I', 'G', 'H', 'H', 'J', 'K', 'I', 'C', 'Z', 'Y', 'D', 'N'], ['Q', 'P', 'W', 'P', 'O', 'K', 'S', 'H', 'A', 'A', 'A', 'Q', 'A', 'S', 'W', 'O', 'A', 'N', 'S', 'S'], ['I', 'O', 'R', 'I', 'N', 'A', 'I', 'Y', 'O', 'K', 'A', 'K', 'E', 'L', 'H', 'M', 'W', 'F', 'U', 'X'], ['D', 'N', 'A', 'Q', 'T', 'G', 'C', 'L', 'K', 'V', 'N', 'V', 'Y', 'S', 'U', 'P', 'S', 'X', 'W', 'F'], ['H', 'Z', 'C', 'W', 'N', 'B', 'E', 'D', 'S', 'Q', 'X', 'X', 'G', 'P', 'L', 'E', 'G', 'O', 'Y', 'G'], ['X', 'V', 'M', 'Y', 'F', 'N', 'G', 'K', 'F', 'V', 'U', 'C', 'T', 'A', 'D', 'N', 'I', 'G', 'O', 'R'], ['P', 'T', 'H', 'H', 'Y', 'Z', 'J', 'P', 'G', 'J', 'U', 'C', 'G', 'T', 'U', 'K', 'Z', 'X', 'J', 'E'], ['G', 'P', 'B', 'F', 'T', 'D', 'Y', 'H', 'I', 'F', 'A', 'D', 'G', 'P', 'A', 'B', 'Y', 'R', 'G', 'B'], ['X', 'U', 'Z', 'T', 'K', 'V', 'I', 'Q', 'R', 'I', 'L', 'M', 'B', 'F', 'U', 'M', 'J', 'W', 'B', 'F'], ['P', 'S', 'H', 'C', 'Q', 'Q', 'K', 'L', 'L', 'U', 'U', 'W', 'H', 'H', 'N', 'A', 'P', 'J', 'L', 'Z'], ['I', 'J', 'J', 'W', 'H', 'A', 'F', 'F', 'H', 'Z', 'D', 'C', 'E', 'O', 'I', 'D', 'M', 'J', 'K', 'H'], ['A', 'S', 'T', 'A', 'Q', 'O', 'Q', 'Y', 'G', 'O', 'B', 'G', 'I', 'I', 'V', 'B', 'H', 'P', 'K', 'F'], ['W', 'O', 'D', 'F', 'E', 'Z', 'K', 'I', 'Z', 'K', 'U', 'L', 'V', 'R', 'F', 'U', 'U', 'W', 'K', 'J'], ['C', 'T', 'O', 'W', 'X', 'I', 'Z', 'V', 'I', 'X', 'K', 'N', 'V', 'U', 'T', 'I', 'G', 'J', 'D', 'G'], ['N', 'R', 'Z', 'S', 'V', 'P', 'I', 'E', 'P', 'K', 'R', 'Q', 'T', 'Y', 'F', 'O', 'S', 'B', 'B', 'E'], ['I', 'U', 'K', 'R', 'W', 'C', 'Z', 'G', 'V', 'O', 'C', 'W', 'G', 'J', 'N', 'O', 'F', 'K', 'N', 'I'], ['H', 'R', 'Y', 'R', 'A', 'W', 'U', 'B', 'M', 'E', 'Q', 'W', 'X', 'I', 'E', 'O', 'D', 'S', 'E', 'W'], ['P', 'R', 'A', 'Q', 'T', 'Q', 'L', 'G', 'P', 'E', 'X', 'U', 'P', 'S', 'K', 'Q', 'F', 'C', 'E', 'H']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001258.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['V', 'K', 'C', 'T', 'A', 'Y', 'M', 'C', 'G', 'T', 'B', 'L', 'E', 'N', 'N', 'B', 'Y', 'F', 'Z', 'Y'], ['K', 'M', 'D', 'L', 'I', 'L', 'T', 'Y', 'R', 'R', 'Q', 'T', 'X', 'J', 'W', 'K', 'R', 'B', 'P', 'R'], ['H', 'S', 'U', 'C', 'Z', 'K', 'G', 'O', 'N', 'A', 'C', 'U', 'O', 'U', 'G', 'T', 'X', 'F', 'F', 'Z'], ['V', 'A', 'U', 'L', 'W', 'B', 'P', 'B', 'H', 'D', 'X', 'W', 'B', 'X', 'H', 'S', 'M', 'T', 'C', 'V'], ['R', 'L', 'G', 'I', 'L', 'F', 'L', 'N', 'O', 'G', 'W', 'R', 'B', 'E', 'A', 'F', 'X', 'B', 'V', 'Y'], ['E', 'Z', 'E', 'P', 'G', 'Q', 'D', 'V', 'R', 'V', 'L', 'N', 'B', 'E', 'F', 'M', 'X', 'Z', 'F', 'J'], ['W', 'F', 'H', 'X', 'Q', 'N', 'Z', 'L', 'B', 'E', 'D', 'T', 'D', 'L', 'Y', 'K', 'Z', 'Y', 'A', 'C'], ['S', 'O', 'E', 'F', 'C', 'L', 'N', 'N', 'X', 'B', 'L', 'Z', 'K', 'N', 'C', 'K', 'F', 'V', 'Q', 'I'], ['T', 'I', 'H', 'I', 'U', 'D', 'G', 'W', 'Q', 'V', 'L', 'G', 'K', 'I', 'C', 'Z', 'B', 'L', 'R', 'A'], ['B', 'X', 'U', 'R', 'G', 'E', 'U', 'A', 'X', 'A', 'Z', 'B', 'C', 'T', 'W', 'D', 'G', 'W', 'B', 'L'], ['A', 'P', 'C', 'I', 'T', 'L', 'G', 'A', 'T', 'N', 'E', 'Q', 'G', 'W', 'K', 'Z', 'Y', 'R', 'Y', 'H'], ['U', 'U', 'E', 'T', 'X', 'D', 'T', 'U', 'W', 'B', 'Y', 'I', 'Z', 'O', 'P', 'B', 'T', 'A', 'Q', 'D'], ['R', 'P', 'O', 'J', 'E', 'U', 'E', 'S', 'E', 'M', 'E', 'F', 'I', 'K', 'H', 'Q', 'R', 'R', 'V', 'W'], ['S', 'S', 'K', 'P', 'Z', 'L', 'J', 'O', 'R', 'T', 'I', 'G', 'E', 'R', 'G', 'A', 'P', 'A', 'H', 'R'], ['B', 'U', 'Q', 'Q', 'G', 'O', 'T', 'Z', 'E', 'Z', 'K', 'X', 'C', 'B', 'A', 'M', 'V', 'I', 'C', 'K'], ['C', 'Z', 'P', 'G', 'M', 'G', 'W', 'P', 'V', 'I', 'H', 'V', 'B', 'X', 'Q', 'Y', 'Y', 'B', 'K', 'U'], ['M', 'S', 'V', 'T', 'N', 'M', 'K', 'H', 'W', 'Z', 'M', 'V', 'S', 'C', 'M', 'X', 'C', 'J', 'M', 'O'], ['O', 'A', 'S', 'S', 'X', 'D', 'F', 'X', 'M', 'E', 'H', 'H', 'Q', 'O', 'G', 'F', 'Q', 'A', 'R', 'U'], ['B', 'W', 'I', 'L', 'J', 'Q', 'B', 'X', 'H', 'F', 'V', 'B', 'R', 'L', 'S', 'U', 'Q', 'O', 'Q', 'U'], ['T', 'R', 'F', 'F', 'O', 'Q', 'F', 'K', 'I', 'G', 'W', 'G', 'Z', 'H', 'V', 'V', 'X', 'Q', 'N', 'J']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "TIGER E @ (10,14)", "system": "[['V', 'K', 'C', 'T', 'A', 'Y', 'M', 'C', 'G', 'T', 'B', 'L', 'E', 'N', 'N', 'B', 'Y', 'F', 'Z', 'Y'], ['K', 'M', 'D', 'L', 'I', 'L', 'T', 'Y', 'R', 'R', 'Q', 'T', 'X', 'J', 'W', 'K', 'R', 'B', 'P', 'R'], ['H', 'S', 'U', 'C', 'Z', 'K', 'G', 'O', 'N', 'A', 'C', 'U', 'O', 'U', 'G', 'T', 'X', 'F', 'F', 'Z'], ['V', 'A', 'U', 'L', 'W', 'B', 'P', 'B', 'H', 'D', 'X', 'W', 'B', 'X', 'H', 'S', 'M', 'T', 'C', 'V'], ['R', 'L', 'G', 'I', 'L', 'F', 'L', 'N', 'O', 'G', 'W', 'R', 'B', 'E', 'A', 'F', 'X', 'B', 'V', 'Y'], ['E', 'Z', 'E', 'P', 'G', 'Q', 'D', 'V', 'R', 'V', 'L', 'N', 'B', 'E', 'F', 'M', 'X', 'Z', 'F', 'J'], ['W', 'F', 'H', 'X', 'Q', 'N', 'Z', 'L', 'B', 'E', 'D', 'T', 'D', 'L', 'Y', 'K', 'Z', 'Y', 'A', 'C'], ['S', 'O', 'E', 'F', 'C', 'L', 'N', 'N', 'X', 'B', 'L', 'Z', 'K', 'N', 'C', 'K', 'F', 'V', 'Q', 'I'], ['T', 'I', 'H', 'I', 'U', 'D', 'G', 'W', 'Q', 'V', 'L', 'G', 'K', 'I', 'C', 'Z', 'B', 'L', 'R', 'A'], ['B', 'X', 'U', 'R', 'G', 'E', 'U', 'A', 'X', 'A', 'Z', 'B', 'C', 'T', 'W', 'D', 'G', 'W', 'B', 'L'], ['A', 'P', 'C', 'I', 'T', 'L', 'G', 'A', 'T', 'N', 'E', 'Q', 'G', 'W', 'K', 'Z', 'Y', 'R', 'Y', 'H'], ['U', 'U', 'E', 'T', 'X', 'D', 'T', 'U', 'W', 'B', 'Y', 'I', 'Z', 'O', 'P', 'B', 'T', 'A', 'Q', 'D'], ['R', 'P', 'O', 'J', 'E', 'U', 'E', 'S', 'E', 'M', 'E', 'F', 'I', 'K', 'H', 'Q', 'R', 'R', 'V', 'W'], ['S', 'S', 'K', 'P', 'Z', 'L', 'J', 'O', 'R', 'T', 'I', 'G', 'E', 'R', 'G', 'A', 'P', 'A', 'H', 'R'], ['B', 'U', 'Q', 'Q', 'G', 'O', 'T', 'Z', 'E', 'Z', 'K', 'X', 'C', 'B', 'A', 'M', 'V', 'I', 'C', 'K'], ['C', 'Z', 'P', 'G', 'M', 'G', 'W', 'P', 'V', 'I', 'H', 'V', 'B', 'X', 'Q', 'Y', 'Y', 'B', 'K', 'U'], ['M', 'S', 'V', 'T', 'N', 'M', 'K', 'H', 'W', 'Z', 'M', 'V', 'S', 'C', 'M', 'X', 'C', 'J', 'M', 'O'], ['O', 'A', 'S', 'S', 'X', 'D', 'F', 'X', 'M', 'E', 'H', 'H', 'Q', 'O', 'G', 'F', 'Q', 'A', 'R', 'U'], ['B', 'W', 'I', 'L', 'J', 'Q', 'B', 'X', 'H', 'F', 'V', 'B', 'R', 'L', 'S', 'U', 'Q', 'O', 'Q', 'U'], ['T', 'R', 'F', 'F', 'O', 'Q', 'F', 'K', 'I', 'G', 'W', 'G', 'Z', 'H', 'V', 'V', 'X', 'Q', 'N', 'J']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001259.png", "question": "\\nYour task is to solve the wordsearch game according to the rules and current state below:\\n\\n### Task \\nYou are given a word search puzzle. Your task is to find the listed word hidden in the grid and provide their exact locations in the specified format.\\n\\n### Game Rules\\n1. Words can be hidden horizontally, vertically, or diagonally.\\n2. Words can read forwards or backwards.\\n3. Words always follow a straight line (no zigzagging).\\n4. Each word's location should be identified by:\\n   - The starting position (coordinate where the first letter appears)\\n   - The direction in which the word extends\\n\\n### Coordinate System\\n- The grid uses coordinates where (x, y) represents the position.\\n- x-axis: Numbers from 1 to width, running horizontally from left to right.\\n- y-axis: Numbers from 1 to height, running vertically from top to bottom.\\n- Example: Position (3, 4) means column 3 from left, row 4 from top.\\n\\n\\n### Direction Notation\\n- N: North (upward)\\n- S: South (downward)\\n- E: East (rightward)\\n- W: West (leftward)\\n- NE: Northeast (up and right)\\n- NW: Northwest (up and left)\\n- SE: Southeast (down and right)\\n- SW: Southwest (down and left)\\n\\n\\n### WordSearch State:\\nThe current state of the WordSearch is shown:\\nFind the hidden word in this 20x20 grid.\\n[['B', 'C', 'M', 'R', 'C', 'H', 'T', 'Q', 'X', 'M', 'N', 'U', 'F', 'V', 'M', 'Z', 'D', 'S', 'S', 'D'], ['Q', 'B', 'R', 'I', 'F', 'E', 'F', 'D', 'S', 'T', 'R', 'B', 'R', 'T', 'U', 'J', 'U', 'Z', 'R', 'M'], ['Z', 'R', 'N', 'V', 'A', 'I', 'F', 'C', 'Q', 'M', 'I', 'J', 'Y', 'A', 'F', 'J', 'R', 'Y', 'F', 'Y'], ['P', 'O', 'Z', 'D', 'O', 'Z', 'T', 'Y', 'V', 'N', 'F', 'A', 'F', 'M', 'X', 'U', 'U', 'E', 'T', 'A'], ['V', 'U', 'M', 'O', 'A', 'P', 'W', 'O', 'O', 'I', 'Y', 'D', 'D', 'Q', 'K', 'P', 'R', 'J', 'T', 'S'], ['V', 'E', 'W', 'P', 'I', 'G', 'Z', 'U', 'K', 'Y', 'S', 'L', 'U', 'F', 'G', 'U', 'O', 'R', 'G', 'O'], ['T', 'N', 'M', 'P', 'C', 'T', 'C', 'G', 'C', 'F', 'I', 'T', 'G', 'R', 'P', 'I', 'B', 'Y', 'O', 'S'], ['I', 'O', 'H', 'W', 'W', 'O', 'V', 'D', 'J', 'K', 'N', 'D', 'N', 'C', 'D', 'W', 'S', 'A', 'O', 'J'], ['O', 'N', 'O', 'T', 'F', 'R', 'M', 'I', 'W', 'A', 'R', 'H', 'Y', 'C', 'I', 'T', 'C', 'P', 'O', 'S'], ['Q', 'I', 'H', 'X', 'I', 'S', 'F', 'Z', 'H', 'N', 'G', 'Q', 'K', 'U', 'P', 'Y', 'P', 'W', 'F', 'D'], ['R', 'H', 'K', 'V', 'J', 'Q', 'G', 'P', 'M', 'D', 'K', 'T', 'Y', 'O', 'Y', 'M', 'P', 'T', 'P', 'N'], ['P', 'W', 'C', 'I', 'V', 'F', 'E', 'W', 'W', 'Q', 'Q', 'R', 'D', 'L', 'H', 'L', 'T', 'G', 'N', 'E'], ['Z', 'A', 'F', 'Q', 'S', 'L', 'Q', 'I', 'C', 'D', 'O', 'B', 'H', 'D', 'W', 'I', 'T', 'Q', 'B', 'G'], ['B', 'O', 'B', 'P', 'E', 'Q', 'M', 'W', 'Q', 'A', 'E', 'T', 'D', 'U', 'K', 'I', 'Z', 'B', 'X', 'A'], ['W', 'F', 'I', 'K', 'H', 'W', 'K', 'A', 'Q', 'E', 'J', 'H', 'E', 'D', 'F', 'D', 'T', 'H', 'R', 'X'], ['Q', 'V', 'P', 'I', 'S', 'J', 'S', 'K', 'X', 'N', 'K', 'S', 'B', 'N', 'D', 'Y', 'Y', 'B', 'I', 'A'], ['B', 'E', 'N', 'Q', 'G', 'I', 'A', 'P', 'E', 'R', 'C', 'B', 'K', 'U', 'B', 'T', 'P', 'G', 'M', 'O'], ['N', 'P', 'M', 'J', 'J', 'T', 'I', 'U', 'O', 'G', 'D', 'F', 'G', 'S', 'O', 'B', 'Z', 'W', 'J', 'P'], ['C', 'H', 'N', 'Y', 'K', 'V', 'V', 'O', 'X', 'E', 'Z', 'K', 'H', 'T', 'L', 'N', 'G', 'I', 'F', 'Y'], ['I', 'S', 'X', 'P', 'W', 'S', 'X', 'W', 'R', 'O', 'Y', 'R', 'A', 'G', 'M', 'M', 'N', 'Y', 'V', 'Z']]\\n\\n\\n### Output Format Requirements:\\nYour final answer format should be given like: WORD DIRECTION @ (x, y), where WORD is the word you found, DIRECTION is the direction in which the word extends, and (x, y) is the starting position of the word.\\n", "answer": "ELEPHANT NE @ (5,14)", "system": "[['B', 'C', 'M', 'R', 'C', 'H', 'T', 'Q', 'X', 'M', 'N', 'U', 'F', 'V', 'M', 'Z', 'D', 'S', 'S', 'D'], ['Q', 'B', 'R', 'I', 'F', 'E', 'F', 'D', 'S', 'T', 'R', 'B', 'R', 'T', 'U', 'J', 'U', 'Z', 'R', 'M'], ['Z', 'R', 'N', 'V', 'A', 'I', 'F', 'C', 'Q', 'M', 'I', 'J', 'Y', 'A', 'F', 'J', 'R', 'Y', 'F', 'Y'], ['P', 'O', 'Z', 'D', 'O', 'Z', 'T', 'Y', 'V', 'N', 'F', 'A', 'F', 'M', 'X', 'U', 'U', 'E', 'T', 'A'], ['V', 'U', 'M', 'O', 'A', 'P', 'W', 'O', 'O', 'I', 'Y', 'D', 'D', 'Q', 'K', 'P', 'R', 'J', 'T', 'S'], ['V', 'E', 'W', 'P', 'I', 'G', 'Z', 'U', 'K', 'Y', 'S', 'L', 'U', 'F', 'G', 'U', 'O', 'R', 'G', 'O'], ['T', 'N', 'M', 'P', 'C', 'T', 'C', 'G', 'C', 'F', 'I', 'T', 'G', 'R', 'P', 'I', 'B', 'Y', 'O', 'S'], ['I', 'O', 'H', 'W', 'W', 'O', 'V', 'D', 'J', 'K', 'N', 'D', 'N', 'C', 'D', 'W', 'S', 'A', 'O', 'J'], ['O', 'N', 'O', 'T', 'F', 'R', 'M', 'I', 'W', 'A', 'R', 'H', 'Y', 'C', 'I', 'T', 'C', 'P', 'O', 'S'], ['Q', 'I', 'H', 'X', 'I', 'S', 'F', 'Z', 'H', 'N', 'G', 'Q', 'K', 'U', 'P', 'Y', 'P', 'W', 'F', 'D'], ['R', 'H', 'K', 'V', 'J', 'Q', 'G', 'P', 'M', 'D', 'K', 'T', 'Y', 'O', 'Y', 'M', 'P', 'T', 'P', 'N'], ['P', 'W', 'C', 'I', 'V', 'F', 'E', 'W', 'W', 'Q', 'Q', 'R', 'D', 'L', 'H', 'L', 'T', 'G', 'N', 'E'], ['Z', 'A', 'F', 'Q', 'S', 'L', 'Q', 'I', 'C', 'D', 'O', 'B', 'H', 'D', 'W', 'I', 'T', 'Q', 'B', 'G'], ['B', 'O', 'B', 'P', 'E', 'Q', 'M', 'W', 'Q', 'A', 'E', 'T', 'D', 'U', 'K', 'I', 'Z', 'B', 'X', 'A'], ['W', 'F', 'I', 'K', 'H', 'W', 'K', 'A', 'Q', 'E', 'J', 'H', 'E', 'D', 'F', 'D', 'T', 'H', 'R', 'X'], ['Q', 'V', 'P', 'I', 'S', 'J', 'S', 'K', 'X', 'N', 'K', 'S', 'B', 'N', 'D', 'Y', 'Y', 'B', 'I', 'A'], ['B', 'E', 'N', 'Q', 'G', 'I', 'A', 'P', 'E', 'R', 'C', 'B', 'K', 'U', 'B', 'T', 'P', 'G', 'M', 'O'], ['N', 'P', 'M', 'J', 'J', 'T', 'I', 'U', 'O', 'G', 'D', 'F', 'G', 'S', 'O', 'B', 'Z', 'W', 'J', 'P'], ['C', 'H', 'N', 'Y', 'K', 'V', 'V', 'O', 'X', 'E', 'Z', 'K', 'H', 'T', 'L', 'N', 'G', 'I', 'F', 'Y'], ['I', 'S', 'X', 'P', 'W', 'S', 'X', 'W', 'R', 'O', 'Y', 'R', 'A', 'G', 'M', 'M', 'N', 'Y', 'V', 'Z']]", "category": "wordsearch", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'wordsearch_evaluator'}"}}
{"image": "images/001260.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [3]\\n2: [4]\\n3: [1, 4, 5]\\n4: [0, 2, 3]\\n5: [3]\\n\\nG2:\\n0: [2]\\n1: [2, 3, 4]\\n2: [0, 1, 5]\\n3: [1]\\n4: [1]\\n5: [2]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001261.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 5]\\n2: [0, 4]\\n3: [0, 4, 5]\\n4: [1, 2, 3]\\n5: [1, 3]\\n\\nG2:\\n0: [1, 5]\\n1: [0, 4]\\n2: [3, 5]\\n3: [2, 4]\\n4: [1, 3, 5]\\n5: [0, 2, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001262.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [3]\\n2: [0, 5]\\n3: [1, 5]\\n4: [0]\\n5: [2, 3]\\n\\nG2:\\n0: [1]\\n1: [0, 5]\\n2: [3]\\n3: [2, 4]\\n4: [3, 5]\\n5: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001263.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 5]\\n2: [0, 5]\\n3: [0, 4]\\n4: [1, 3]\\n5: [1, 2]\\n\\nG2:\\n0: [4]\\n1: [4]\\n2: [3, 4, 5]\\n3: [2]\\n4: [0, 1, 2]\\n5: [2]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001264.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [3, 4, 5]\\n1: [4]\\n2: [3]\\n3: [0, 2]\\n4: [0, 1]\\n5: [0]\\n\\nG2:\\n0: [1, 2]\\n1: [0, 3, 5]\\n2: [0]\\n3: [1]\\n4: [5]\\n5: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001265.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [4]\\n2: [5]\\n3: [4, 5]\\n4: [0, 1, 3]\\n5: [2, 3]\\n\\nG2:\\n0: [2]\\n1: [2, 3, 5]\\n2: [0, 1]\\n3: [1]\\n4: [5]\\n5: [1, 4]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 1, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001266.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 3, 4]\\n2: [3, 6]\\n3: [1, 2, 5]\\n4: [1]\\n5: [0, 3, 6]\\n6: [2, 5]\\n\\nG2:\\n0: [4]\\n1: [2, 3]\\n2: [1, 4, 5]\\n3: [1, 5]\\n4: [0, 2, 6]\\n5: [2, 3, 6]\\n6: [4, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001267.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [2, 6]\\n2: [0, 1, 3]\\n3: [2, 4, 6]\\n4: [0, 3]\\n5: [6]\\n6: [1, 3, 5]\\n\\nG2:\\n0: [3]\\n1: [5, 6]\\n2: [3, 4]\\n3: [0, 2, 5]\\n4: [2, 5, 6]\\n5: [1, 3, 4]\\n6: [1, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001268.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 6]\\n1: [4, 5]\\n2: [0, 3]\\n3: [2, 4]\\n4: [1, 3]\\n5: [1, 6]\\n6: [0, 5]\\n\\nG2:\\n0: [3, 5]\\n1: [2, 3]\\n2: [1, 6]\\n3: [0, 1]\\n4: [5, 6]\\n5: [0, 4]\\n6: [2, 4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001269.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 2, 3]\\n2: [1, 6]\\n3: [1, 5, 6]\\n4: [6]\\n5: [0, 3]\\n6: [2, 3, 4]\\n\\nG2:\\n0: [5, 6]\\n1: [4]\\n2: [3, 6]\\n3: [2]\\n4: [1, 6]\\n5: [0]\\n6: [0, 2, 4]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001270.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 3]\\n2: [4]\\n3: [1, 6]\\n4: [2, 5]\\n5: [4, 6]\\n6: [3, 5]\\n\\nG2:\\n0: [2, 3, 4]\\n1: [2, 6]\\n2: [0, 1, 5]\\n3: [0]\\n4: [0]\\n5: [2]\\n6: [1]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001271.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2]\\n1: [2]\\n2: [0, 1, 3, 4, 5, 6]\\n3: [2]\\n4: [2]\\n5: [2]\\n6: [2]\\n\\nG2:\\n0: [4]\\n1: [4]\\n2: [4]\\n3: [4]\\n4: [0, 1, 2, 3, 5, 6]\\n5: [4]\\n6: [4]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 2, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001272.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 7]\\n2: [6, 7]\\n3: [4, 6]\\n4: [3, 5]\\n5: [0, 4]\\n6: [2, 3]\\n7: [1, 2]\\n\\nG2:\\n0: [4, 7]\\n1: [3, 6]\\n2: [5, 7]\\n3: [1, 4]\\n4: [0, 3]\\n5: [2, 6]\\n6: [1, 5]\\n7: [0, 2]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001273.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [5, 7]\\n1: [2, 4, 6]\\n2: [1, 3]\\n3: [2, 4]\\n4: [1, 3, 7]\\n5: [0, 6]\\n6: [1, 5, 7]\\n7: [0, 4, 6]\\n\\nG2:\\n0: [1, 4, 5]\\n1: [0, 7]\\n2: [4, 6]\\n3: [4, 5, 6]\\n4: [0, 2, 3]\\n5: [0, 3, 7]\\n6: [2, 3]\\n7: [1, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001274.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 4]\\n1: [5, 6, 7]\\n2: [0, 6]\\n3: [5, 7]\\n4: [0, 6, 7]\\n5: [1, 3]\\n6: [1, 2, 4]\\n7: [1, 3, 4]\\n\\nG2:\\n0: [3, 4, 5]\\n1: [5, 6]\\n2: [3, 4]\\n3: [0, 2]\\n4: [0, 2, 7]\\n5: [0, 1, 7]\\n6: [1, 7]\\n7: [4, 5, 6]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001275.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [3, 7]\\n1: [3]\\n2: [4, 6]\\n3: [0, 1, 4]\\n4: [2, 3]\\n5: [6]\\n6: [2, 5]\\n7: [0]\\n\\nG2:\\n0: [1, 2, 3]\\n1: [0, 6]\\n2: [0, 5]\\n3: [0]\\n4: [7]\\n5: [2]\\n6: [1, 7]\\n7: [4, 6]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001276.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 3]\\n1: [4, 6]\\n2: [0, 7]\\n3: [0, 6, 7]\\n4: [1, 5]\\n5: [4, 6, 7]\\n6: [1, 3, 5]\\n7: [2, 3, 5]\\n\\nG2:\\n0: [6, 7]\\n1: [2, 3, 5]\\n2: [1, 4, 7]\\n3: [1, 4]\\n4: [2, 3]\\n5: [1, 6, 7]\\n6: [0, 5]\\n7: [0, 2, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001277.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2]\\n2: [1, 5, 7]\\n3: [4, 7]\\n4: [3, 6]\\n5: [2]\\n6: [4]\\n7: [2, 3]\\n\\nG2:\\n0: [1, 2, 5]\\n1: [0]\\n2: [0, 4, 7]\\n3: [5]\\n4: [2]\\n5: [0, 3, 6]\\n6: [5]\\n7: [2]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 3, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001278.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [2, 6]\\n2: [1, 4]\\n3: [5]\\n4: [0, 2]\\n5: [3, 7]\\n6: [1, 8]\\n7: [5, 8]\\n8: [6, 7]\\n\\nG2:\\n0: [5]\\n1: [3]\\n2: [8]\\n3: [1, 4, 6, 7]\\n4: [3, 8]\\n5: [0, 8]\\n6: [3]\\n7: [3]\\n8: [2, 4, 5]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001279.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n\\nG2:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001280.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1, 5]\\n1: [0, 7]\\n2: [3, 4]\\n3: [2, 8]\\n4: [2, 5]\\n5: [0, 4]\\n6: [7, 8]\\n7: [1, 6]\\n8: [3, 6]\\n\\nG2:\\n0: [2, 7]\\n1: [4, 8]\\n2: [0, 6]\\n3: [5, 6]\\n4: [1, 7]\\n5: [3, 8]\\n6: [2, 3]\\n7: [0, 4]\\n8: [1, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001281.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [7]\\n1: [7]\\n2: [7]\\n3: [7]\\n4: [7]\\n5: [7]\\n6: [7]\\n7: [0, 1, 2, 3, 4, 5, 6, 8]\\n8: [7]\\n\\nG2:\\n0: [1, 2, 3, 4, 5, 6, 7, 8]\\n1: [0]\\n2: [0]\\n3: [0]\\n4: [0]\\n5: [0]\\n6: [0]\\n7: [0]\\n8: [0]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001282.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [1]\\n1: [0, 2, 3, 4, 5, 6, 7, 8]\\n2: [1]\\n3: [1]\\n4: [1]\\n5: [1]\\n6: [1]\\n7: [1]\\n8: [1]\\n\\nG2:\\n0: [5]\\n1: [5]\\n2: [5]\\n3: [5]\\n4: [5]\\n5: [0, 1, 2, 3, 4, 6, 7, 8]\\n6: [5]\\n7: [5]\\n8: [5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001283.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [6]\\n1: [6]\\n2: [6]\\n3: [6]\\n4: [6]\\n5: [6]\\n6: [0, 1, 2, 3, 4, 5, 7, 8]\\n7: [6]\\n8: [6]\\n\\nG2:\\n0: [5, 7]\\n1: [4, 6]\\n2: [3, 6]\\n3: [2]\\n4: [1, 5]\\n5: [0, 4]\\n6: [1, 2]\\n7: [0, 8]\\n8: [7]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 4, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001284.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4, 8]\\n1: [4]\\n2: [4]\\n3: [4]\\n4: [0, 1, 2, 3, 5, 6, 7, 8, 9]\\n5: [4]\\n6: [4]\\n7: [4]\\n8: [0, 4]\\n9: [4]\\n\\nG2:\\n0: [7]\\n1: [3, 7]\\n2: [7]\\n3: [1, 7]\\n4: [7]\\n5: [7]\\n6: [7]\\n7: [0, 1, 2, 3, 4, 5, 6, 8, 9]\\n8: [7]\\n9: [7]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001285.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4]\\n1: [2, 6, 7]\\n2: [1, 4, 7]\\n3: [4]\\n4: [0, 2, 3, 5]\\n5: [4]\\n6: [1]\\n7: [1, 2, 8, 9]\\n8: [7]\\n9: [7]\\n\\nG2:\\n0: [1, 2, 5]\\n1: [0, 2, 4, 6]\\n2: [0, 1, 3]\\n3: [2]\\n4: [1]\\n5: [0, 7, 8, 9]\\n6: [1]\\n7: [5]\\n8: [5]\\n9: [5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001286.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [4, 8]\\n1: [3, 4, 7, 8]\\n2: [5, 7]\\n3: [1, 6, 9]\\n4: [0, 1, 6]\\n5: [2, 9]\\n6: [3, 4]\\n7: [1, 2, 9]\\n8: [0, 1]\\n9: [3, 5, 7]\\n\\nG2:\\n0: [1, 3, 9]\\n1: [0, 2, 4, 7]\\n2: [1, 8]\\n3: [0, 5, 7]\\n4: [1, 6, 8]\\n5: [3, 9]\\n6: [4, 7]\\n7: [1, 3, 6]\\n8: [2, 4]\\n9: [0, 5]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001287.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 7, 8]\\n1: [4, 7]\\n2: [0, 4, 5]\\n3: [8, 9]\\n4: [1, 2, 8]\\n5: [2, 6]\\n6: [5, 9]\\n7: [0, 1]\\n8: [0, 3, 4]\\n9: [3, 6]\\n\\nG2:\\n0: [1, 3, 8]\\n1: [0, 2]\\n2: [1, 6]\\n3: [0, 6, 7]\\n4: [5, 8]\\n5: [4, 9]\\n6: [2, 3, 8]\\n7: [3, 9]\\n8: [0, 4, 6]\\n9: [5, 7]\\n", "answer": "Yes", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001288.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [2, 5, 7]\\n1: [5, 6, 9]\\n2: [0, 3, 8]\\n3: [2, 4, 5]\\n4: [3, 9]\\n5: [0, 1, 3]\\n6: [1]\\n7: [0, 8, 9]\\n8: [2, 7]\\n9: [1, 4, 7]\\n\\nG2:\\n0: [1, 7]\\n1: [0, 6]\\n2: [5, 6]\\n3: [4, 5]\\n4: [3, 5, 9]\\n5: [2, 3, 4]\\n6: [1, 2]\\n7: [0, 8]\\n8: [7, 9]\\n9: [4, 8]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
{"image": "images/001289.png", "question": "Given two connected undirected planar graphs G1 and G2 with the adjacency lists below (with varying shapes and not just triangles), determine if they are isomorphic by analyzing their planar structure. Answer with 'Yes' or 'No'.G1:\\n0: [5]\\n1: [6, 9]\\n2: [6, 8]\\n3: [5, 8, 9]\\n4: [5, 6]\\n5: [0, 3, 4]\\n6: [1, 2, 4, 7]\\n7: [6]\\n8: [2, 3]\\n9: [1, 3]\\n\\nG2:\\n0: [5, 6, 8]\\n1: [2, 9]\\n2: [1, 4, 6]\\n3: [5]\\n4: [2, 7]\\n5: [0, 3, 7, 9]\\n6: [0, 2, 7]\\n7: [4, 5, 6]\\n8: [0]\\n9: [1, 5]\\n", "answer": "No", "system": "nan", "category": "graph_isomorphism", "metadata": {"difficulty": 5, "metric_info": "{'score_function': 'simple_str_match'}"}}
